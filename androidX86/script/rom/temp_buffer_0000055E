
local dumpstack=function()
  function vars(f)
    local dump = ""
    local func = debug.getinfo(f, "f").func
    local i = 1
    local locals = {}
    -- get locals
    while true do
      local name, value = debug.getlocal(f, i)
      if not name then break end
      if string.sub(name, 1, 1) ~= '(' then 
        dump = dump ..  "    " .. name .. "=" .. tostring(value) .. "\n" 
      end
      i = i + 1
    end
    -- get varargs (these use negative indices)
    i = 1
    while true do
      local name, value = debug.getlocal(f, -i)
      -- `not name` should be enough, but LuaJIT 2.0.0 incorrectly reports `(*temporary)` names here
      if not name or name ~= "(*vararg)" then break end
      dump = dump ..  "    " .. name .. "=" .. tostring(value) .. "\n"
      i = i + 1
    end
    -- get upvalues
    i = 1
    while func do -- check for func as it may be nil for tail calls
      local name, value = debug.getupvalue(func, i)
      if not name then break end
      dump = dump ..  "    " .. name .. "=" .. tostring(value) .. "\n"
      i = i + 1
    end
    return dump
  end
  local dump = ""
  for i = 3, 100 do
    local source = debug.getinfo(i, "S")
    if not source then break end
    dump = dump .. "- stack" .. tostring(i-2) .. "\n"
    dump = dump .. vars(i+1)
    if source.what == 'main' then break end
  end
  return dump
end
return dumpstack
