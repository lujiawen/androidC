# 1 "jni/scrcap/../util/PtraceUtil.cpp"
# 1 "C:\\cygwin64\\home\\kwang\\C\\androidX86//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "jni/scrcap/../util/PtraceUtil.cpp"
# 13 "jni/scrcap/../util/PtraceUtil.cpp"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h" 1
# 42 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_stlport_version.h" 1
# 43 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h" 2
# 63 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/user_config.h" 1
# 64 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h" 2
# 88 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/compat.h" 1
# 89 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h" 2


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/host.h" 1
# 92 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h" 2


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/_system.h" 1
# 64 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/_system.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/_android.h" 1
# 65 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/_android.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/_gcc.h" 1
# 66 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/_android.h" 2
# 65 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/_system.h" 2
# 95 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h" 2
# 103 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/stl_confix.h" 1
# 104 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h" 2
# 218 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/_native_headers.h" 1
# 219 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h" 2
# 415 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h"
namespace std { }
namespace __std_alias = std;
# 536 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/config/features.h"
namespace stlport = std;



namespace _STL = std;
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 2
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 1 3 4
# 49 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\cdefs.h" 1 3 4
# 77 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\cdefs.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\cdefs_elf.h" 1 3 4
# 78 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\cdefs.h" 2 3 4
# 547 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\cdefs.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\android\\api-level.h" 1 3 4
# 548 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\cdefs.h" 2 3 4
# 50 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 1 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 147 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 3 4
typedef int ptrdiff_t;
# 212 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 3 4
typedef unsigned int size_t;
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 1 3 4
# 31 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 422 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\_types.h" 1 3 4
# 40 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\_types.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\machine\\_types.h" 1 3 4
# 39 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\machine\\_types.h" 3 4
typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef short __int16_t;
typedef unsigned short __uint16_t;
typedef int __int32_t;
typedef unsigned int __uint32_t;

typedef long long __int64_t;

typedef unsigned long long __uint64_t;


typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;


typedef __int32_t __int_fast8_t;
typedef __uint32_t __uint_fast8_t;
typedef __int32_t __int_fast16_t;
typedef __uint32_t __uint_fast16_t;
typedef __int32_t __int_fast32_t;
typedef __uint32_t __uint_fast32_t;
typedef __int64_t __int_fast64_t;
typedef __uint64_t __uint_fast64_t;


typedef int __intptr_t;
typedef unsigned int __uintptr_t;


typedef __int64_t __intmax_t;
typedef __uint64_t __uintmax_t;


typedef __int32_t __register_t;


typedef unsigned long __vaddr_t;
typedef unsigned long __paddr_t;
typedef unsigned long __vsize_t;
typedef unsigned long __psize_t;


typedef int __clock_t;
typedef int __clockid_t;
typedef long __ptrdiff_t;
typedef int __time_t;
typedef int __timer_t;

typedef __builtin_va_list __va_list;
# 103 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\machine\\_types.h" 3 4
typedef int __wint_t;
typedef int __rune_t;
typedef void * __wctrans_t;
typedef void * __wctype_t;
# 41 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\_types.h" 2 3 4

typedef unsigned long __cpuid_t;
typedef __int32_t __dev_t;
typedef __uint32_t __fixpt_t;
typedef __uint32_t __gid_t;
typedef __uint32_t __id_t;
typedef __uint32_t __in_addr_t;
typedef __uint16_t __in_port_t;
typedef __uint32_t __ino_t;
typedef long __key_t;
typedef __uint32_t __mode_t;
typedef __uint32_t __nlink_t;
typedef __int32_t __pid_t;
typedef __uint64_t __rlim_t;
typedef __uint16_t __sa_family_t;
typedef __int32_t __segsz_t;
typedef __uint32_t __socklen_t;
typedef __int32_t __swblk_t;
typedef __uint32_t __uid_t;
typedef __uint32_t __useconds_t;
typedef __int32_t __suseconds_t;





typedef union {
 char __mbstate8[128];
 __int64_t __mbstateL;
} __mbstate_t;
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 2 3 4
# 42 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 3 4
typedef __int8_t int8_t;
typedef __uint8_t uint8_t;
typedef __int16_t int16_t;
typedef __uint16_t uint16_t;
typedef __int32_t int32_t;
typedef __uint32_t uint32_t;
typedef __int64_t int64_t;
typedef __uint64_t uint64_t;





typedef int8_t int_least8_t;
typedef int8_t int_fast8_t;

typedef uint8_t uint_least8_t;
typedef uint8_t uint_fast8_t;
# 88 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 3 4
typedef int16_t int_least16_t;
typedef int32_t int_fast16_t;

typedef uint16_t uint_least16_t;
typedef uint32_t uint_fast16_t;
# 121 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 3 4
typedef int32_t int_least32_t;
typedef int32_t int_fast32_t;

typedef uint32_t uint_least32_t;
typedef uint32_t uint_fast32_t;
# 154 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 3 4
typedef int64_t int_least64_t;
typedef int64_t int_fast64_t;

typedef uint64_t uint_least64_t;
typedef uint64_t uint_fast64_t;
# 198 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 3 4
typedef int intptr_t;
typedef unsigned int uintptr_t;
# 220 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 3 4
typedef uint64_t uintmax_t;
typedef int64_t intmax_t;
# 254 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdint.h" 3 4
typedef int ssize_t;
# 35 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 2 3 4


# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\posix_types.h" 1 3 4
# 15 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\posix_types.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\stddef.h" 1 3 4
# 21 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\compiler.h" 1 3 4
# 22 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\stddef.h" 2 3 4
# 16 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\posix_types.h" 2 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\posix_types.h" 3 4
typedef struct {
 unsigned long fds_bits [(1024/(8 * sizeof(unsigned long)))];
} __kernel_fd_set;

typedef void (*__kernel_sighandler_t)(int);

typedef int __kernel_key_t;
typedef int __kernel_mqd_t;

# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\posix_types.h" 1 3 4
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\posix_types.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\posix_types_32.h" 1 3 4
# 21 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\posix_types_32.h" 3 4
typedef unsigned long __kernel_ino_t;
typedef unsigned short __kernel_mode_t;

typedef unsigned short __kernel_nlink_t;
typedef long __kernel_off_t;
typedef int __kernel_pid_t;
typedef unsigned short __kernel_ipc_pid_t;

typedef unsigned short __kernel_uid_t;
typedef unsigned short __kernel_gid_t;
typedef unsigned int __kernel_size_t;
typedef int __kernel_ssize_t;

typedef int __kernel_ptrdiff_t;
typedef long __kernel_time_t;
typedef long __kernel_suseconds_t;
typedef long __kernel_clock_t;

typedef int __kernel_timer_t;
typedef int __kernel_clockid_t;
typedef int __kernel_daddr_t;
typedef char * __kernel_caddr_t;

typedef unsigned short __kernel_uid16_t;
typedef unsigned short __kernel_gid16_t;
typedef unsigned int __kernel_uid32_t;
typedef unsigned int __kernel_gid32_t;

typedef unsigned short __kernel_old_uid_t;
typedef unsigned short __kernel_old_gid_t;
typedef unsigned short __kernel_old_dev_t;


typedef long long __kernel_loff_t;

typedef struct {




 int __val[2];


} __kernel_fsid_t;
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\posix_types.h" 2 3 4
# 42 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\posix_types.h" 2 3 4
# 38 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\types.h" 1 3 4
# 22 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\types.h" 3 4
typedef unsigned short umode_t;

typedef __signed__ char __s8;
typedef unsigned char __u8;
typedef __signed__ short __s16;
typedef unsigned short __u16;

typedef __signed__ int __s32;
typedef unsigned int __u32;

__extension__ typedef __signed__ long long __s64;

__extension__ typedef unsigned long long __u64;
# 39 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\types.h" 1 3 4
# 21 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\types.h" 3 4
typedef __u16 __le16;
typedef __u16 __be16;
typedef __u32 __le32;
typedef __u32 __be32;





struct ustat {
 __kernel_daddr_t f_tfree;
 __kernel_ino_t f_tinode;
 char f_fname[6];
 char f_fpack[6];
};
# 40 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\machine\\kernel.h" 1 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\machine\\kernel.h" 3 4
typedef unsigned long __kernel_blkcnt_t;
typedef unsigned long __kernel_blksize_t;


typedef unsigned long __kernel_fsblkcnt_t;
typedef unsigned long __kernel_fsfilcnt_t;
typedef unsigned int __kernel_id_t;
# 41 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 2 3 4

typedef __u32 __kernel_dev_t;
# 52 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 3 4
typedef __kernel_blkcnt_t blkcnt_t;
typedef __kernel_blksize_t blksize_t;
typedef __kernel_clock_t clock_t;
typedef __kernel_clockid_t clockid_t;
typedef __kernel_dev_t dev_t;
typedef __kernel_fsblkcnt_t fsblkcnt_t;
typedef __kernel_fsfilcnt_t fsfilcnt_t;
typedef __kernel_gid32_t gid_t;
typedef __kernel_id_t id_t;
typedef __kernel_ino_t ino_t;
typedef __kernel_key_t key_t;
typedef __kernel_mode_t mode_t;
typedef __kernel_nlink_t nlink_t;


typedef __kernel_off_t off_t;

typedef __kernel_loff_t loff_t;
typedef loff_t off64_t;

typedef __kernel_pid_t pid_t;
# 93 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 3 4
typedef __kernel_suseconds_t suseconds_t;
typedef __kernel_time_t time_t;
typedef __kernel_uid32_t uid_t;
typedef signed long useconds_t;

typedef __kernel_daddr_t daddr_t;
typedef __kernel_timer_t timer_t;
typedef __kernel_mqd_t mqd_t;

typedef __kernel_caddr_t caddr_t;
typedef unsigned int uint_t;
typedef unsigned int uint;


# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\sysmacros.h" 1 3 4
# 36 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\sysmacros.h" 3 4
static __inline__ int major(dev_t _dev)
{
  return (_dev >> 8) & 0xfff;
}

static __inline__ int minor(dev_t _dev)
{
  return (_dev & 0xff) | ((_dev >> 12) & 0xfff00);
}

static __inline__ dev_t makedev(int __ma, int __mi)
{
  return ((__ma & 0xfff) << 8) | (__mi & 0xff) | ((__mi & 0xfff00) << 12);
}
# 108 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\types.h" 2 3 4


typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;

typedef uint32_t u_int32_t;
typedef uint16_t u_int16_t;
typedef uint8_t u_int8_t;
typedef uint64_t u_int64_t;
# 51 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 2 3 4



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 1 3 4
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stdarg.h" 1 3 4
# 40 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 2 3 4
# 55 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 2 3 4



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 59 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 2 3 4


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 62 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 2 3 4



typedef off_t fpos_t;
# 74 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 3 4
struct __sbuf {
 unsigned char *_base;
 int _size;
};
# 106 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 3 4
typedef struct __sFILE {
 unsigned char *_p;
 int _r;
 int _w;
 short _flags;
 short _file;
 struct __sbuf _bf;
 int _lbfsize;


 void *_cookie;
 int (*_close)(void *);
 int (*_read)(void *, char *, int);
 fpos_t (*_seek)(void *, fpos_t, int);
 int (*_write)(void *, const char *, int);


 struct __sbuf _ext;

 unsigned char *_up;
 int _ur;


 unsigned char _ubuf[3];
 unsigned char _nbuf[1];


 struct __sbuf _lb;


 int _blksize;
 fpos_t _offset;
} FILE;

extern "C" {
extern FILE __sF[];
}
# 210 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 3 4
extern "C" {
void clearerr(FILE *);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int fgetc(FILE *);
int fgetpos(FILE *, fpos_t *);
char *fgets(char *, int, FILE *);
FILE *fopen(const char *, const char *);
int fprintf(FILE *, const char *, ...);
int fputc(int, FILE *);
int fputs(const char *, FILE *);
size_t fread(void *, size_t, size_t, FILE *);
FILE *freopen(const char *, const char *, FILE *);
int fscanf(FILE *, const char *, ...);
int fseek(FILE *, long, int);
int fseeko(FILE *, off_t, int);
int fsetpos(FILE *, const fpos_t *);
long ftell(FILE *);
off_t ftello(FILE *);
size_t fwrite(const void *, size_t, size_t, FILE *);
int getc(FILE *);
int getchar(void);
char *gets(char *);



extern int sys_nerr;
extern char *sys_errlist[];

void perror(const char *);
int printf(const char *, ...);
int putc(int, FILE *);
int putchar(int);
int puts(const char *);
int remove(const char *);
int rename(const char *, const char *);
void rewind(FILE *);
int scanf(const char *, ...);
void setbuf(FILE *, char *);
int setvbuf(FILE *, char *, int, size_t);
int sprintf(char *, const char *, ...);
int sscanf(const char *, const char *, ...);
FILE *tmpfile(void);
char *tmpnam(char *);
int ungetc(int, FILE *);
int vfprintf(FILE *, const char *, __va_list);
int vprintf(const char *, __va_list);
int vsprintf(char *, const char *, __va_list);


int snprintf(char *, size_t, const char *, ...)
  __attribute__((__format__ (printf, 3, 4)))
  __attribute__((__nonnull__ (3)));
int vfscanf(FILE *, const char *, __va_list)
  __attribute__((__format__ (scanf, 2, 0)))
  __attribute__((__nonnull__ (2)));
int vscanf(const char *, __va_list)
  __attribute__((__format__ (scanf, 1, 0)))
  __attribute__((__nonnull__ (1)));
int vsnprintf(char *, size_t, const char *, __va_list)
  __attribute__((__format__ (printf, 3, 0)))
  __attribute__((__nonnull__ (3)));
int vsscanf(const char *, const char *, __va_list)
  __attribute__((__format__ (scanf, 2, 0)))
  __attribute__((__nonnull__ (2)));


}
# 289 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 3 4
extern "C" {




FILE *fdopen(int, const char *);
int fileno(FILE *);


int pclose(FILE *);
FILE *popen(const char *, const char *);



void flockfile(FILE *);
int ftrylockfile(FILE *);
void funlockfile(FILE *);





int getc_unlocked(FILE *);
int getchar_unlocked(void);
int putc_unlocked(int, FILE *);
int putchar_unlocked(int);



char *tempnam(const char *, const char *);

}







extern "C" {
int asprintf(char **, const char *, ...)
  __attribute__((__format__ (printf, 2, 3)))
  __attribute__((__nonnull__ (2)));
char *fgetln(FILE *, size_t *);
int fpurge(FILE *);
int getw(FILE *);
int putw(int, FILE *);
void setbuffer(FILE *, char *, int);
int setlinebuf(FILE *);
int vasprintf(char **, const char *, __va_list)
  __attribute__((__format__ (printf, 2, 0)))
  __attribute__((__nonnull__ (2)));
}




extern "C" {
FILE *funopen(const void *,
  int (*)(void *, char *, int),
  int (*)(void *, const char *, int),
  fpos_t (*)(void *, fpos_t, int),
  int (*)(void *));
}
# 390 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdio.h" 3 4
int fdprintf(int, const char*, ...);
int vfdprintf(int, const char*, __va_list);
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 51 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 14 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\ptrace.h" 1 3 4
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\ptrace.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\ptrace.h" 1 3 4
# 53 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\ptrace.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\ptrace.h" 1 3 4
# 22 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\ptrace.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\ptrace-abi.h" 1 3 4
# 23 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\ptrace.h" 2 3 4

# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\processor-flags.h" 1 3 4
# 25 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\ptrace.h" 2 3 4


struct pt_regs {

 long ebx;
 long ecx;
 long edx;
 long esi;

 long edi;
 long ebp;
 long eax;
 int xds;

 int xes;
 int xfs;
 int xgs;
 long orig_eax;

 long eip;
 int xcs;
 long eflags;
 long esp;

 int xss;
};
# 54 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\ptrace.h" 2 3 4
# 35 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\ptrace.h" 2 3 4

extern "C" {




extern long ptrace(int request, ...);

}
# 15 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\wait.h" 1 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\wait.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\resource.h" 1 3 4
# 40 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\resource.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\resource.h" 1 3 4
# 15 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\resource.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\time.h" 1 3 4
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\time.h" 3 4
struct timespec {
 time_t tv_sec;
 long tv_nsec;
};


struct timeval {
 time_t tv_sec;
 suseconds_t tv_usec;
};

struct timezone {
 int tz_minuteswest;
 int tz_dsttime;
};
# 47 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\time.h" 3 4
struct itimerspec {
 struct timespec it_interval;
 struct timespec it_value;
};

struct itimerval {
 struct timeval it_interval;
 struct timeval it_value;
};
# 16 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\resource.h" 2 3 4

struct task_struct;





struct rusage {
 struct timeval ru_utime;
 struct timeval ru_stime;
 long ru_maxrss;
 long ru_ixrss;
 long ru_idrss;
 long ru_isrss;
 long ru_minflt;
 long ru_majflt;
 long ru_nswap;
 long ru_inblock;
 long ru_oublock;
 long ru_msgsnd;
 long ru_msgrcv;
 long ru_nsignals;
 long ru_nvcsw;
 long ru_nivcsw;
};

struct rlimit {
 unsigned long rlim_cur;
 unsigned long rlim_max;
};
# 58 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\resource.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\resource.h" 1 3 4
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\resource.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\resource.h" 1 3 4
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\resource.h" 2 3 4
# 59 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\resource.h" 2 3 4
# 41 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\resource.h" 2 3 4


typedef unsigned long rlim_t;

extern "C" {

extern int getpriority(int, int);
extern int setpriority(int, int, int);
extern int getrlimit(int resource, struct rlimit *rlp);
extern int setrlimit(int resource, const struct rlimit *rlp);
extern int getrusage(int who, struct rusage* r_usage);

}
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\wait.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\wait.h" 1 3 4
# 35 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\wait.h" 2 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 1 3 4
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1 3 4
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 2 3 4
# 28 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\signal.h" 1 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\signal.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/limits.h" 1 3 4
# 30 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/limits.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\limits.h" 1 3 4
# 86 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\limits.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\limits.h" 1 3 4
# 30 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\limits.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\limits.h" 1 3 4
# 31 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\limits.h" 2 3 4
# 44 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\limits.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\machine\\internal_types.h" 1 3 4
# 45 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\limits.h" 2 3 4


# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\machine\\limits.h" 1 3 4
# 48 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\limits.h" 2 3 4
# 87 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\limits.h" 2 3 4


# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\syslimits.h" 1 3 4
# 90 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\limits.h" 2 3 4
# 109 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\limits.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\page.h" 1 3 4
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\page.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\page_32.h" 1 3 4
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\page.h" 2 3 4
# 110 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\limits.h" 2 3 4
# 31 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/limits.h" 2 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\signal.h" 2 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 1 3 4
# 39 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\string.h" 1 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\string.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\string.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\malloc.h" 1 3 4
# 26 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\malloc.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 27 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\malloc.h" 2 3 4

extern "C" {

extern __attribute__((malloc)) void* malloc(size_t);
extern __attribute__((malloc)) void* calloc(size_t, size_t);
extern void* realloc(void *, size_t);
extern void free(void *);

extern void* memalign(size_t alignment, size_t bytesize);
extern size_t malloc_usable_size(const void*);

extern void* valloc(size_t bytesize);
extern void* pvalloc(size_t bytesize);



struct mallinfo {
  size_t arena;
  size_t ordblks;
  size_t smblks;
  size_t hblks;
  size_t hblkhd;
  size_t usmblks;
  size_t fsmblks;
  size_t uordblks;
  size_t fordblks;
  size_t keepcost;
};


extern struct mallinfo mallinfo(void);

}
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\string.h" 2 3 4

extern "C" {

extern void* memccpy(void *, const void *, int, size_t);
extern void* memchr(const void *, int, size_t);
extern void* memrchr(const void *, int, size_t);
extern int memcmp(const void *, const void *, size_t);
extern void* memcpy(void *, const void *, size_t);
extern void* memmove(void *, const void *, size_t);
extern void* memset(void *, int, size_t);
extern void* memmem(const void *, size_t, const void *, size_t);
extern void memswap(void *, void *, size_t);

extern char* index(const char *, int);
extern char* rindex(const char *, int);
extern char* strchr(const char *, int);
extern char* strrchr(const char *, int);

extern size_t strlen(const char *);
extern int strcmp(const char *, const char *);
extern char* strcpy(char *, const char *);
extern char* strcat(char *, const char *);

extern int strcasecmp(const char *, const char *);
extern int strncasecmp(const char *, const char *, size_t);
extern char* strdup(const char *);

extern char* strstr(const char *, const char *);
extern char* strcasestr(const char *haystack, const char *needle);
extern char* strtok(char *, const char *);
extern char* strtok_r(char *, const char *, char**);

extern char* strerror(int);
extern int strerror_r(int errnum, char *buf, size_t n);

extern size_t strnlen(const char *, size_t);
extern char* strncat(char *, const char *, size_t);
extern char* strndup(const char *, size_t);
extern int strncmp(const char *, const char *, size_t);
extern char* strncpy(char *, const char *, size_t);

extern size_t strlcat(char *, const char *, size_t);
extern size_t strlcpy(char *, const char *, size_t);

extern size_t strcspn(const char *, const char *);
extern char* strpbrk(const char *, const char *);
extern char* strsep(char **, const char *);
extern size_t strspn(const char *, const char *);

extern char* strsignal(int sig);

extern int strcoll(const char *, const char *);
extern size_t strxfrm(char *, const char *, size_t);

}
# 40 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 2 3 4
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\signal.h" 2 3 4

# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\signal.h" 1 3 4
# 26 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\signal.h" 3 4
struct siginfo;


typedef unsigned long sigset_t;
# 94 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\signal.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\signal.h" 1 3 4
# 28 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\signal.h" 3 4
typedef void __signalfn_t(int);
typedef __signalfn_t *__sighandler_t;

typedef void __restorefn_t(void);
typedef __restorefn_t *__sigrestore_t;
# 95 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\signal.h" 2 3 4

struct sigaction {
 union {

 __sighandler_t _sa_handler;
 void (*_sa_sigaction)(int, struct siginfo *, void *);
 } _u;
 sigset_t sa_mask;

 unsigned long sa_flags;
 void (*sa_restorer)(void);
};



typedef struct sigaltstack {
 void *ss_sp;
 int ss_flags;

 size_t ss_size;
} stack_t;
# 36 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\signal.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\sigcontext.h" 1 3 4
# 24 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\sigcontext.h" 3 4
struct _fpreg {
 unsigned short significand[4];
 unsigned short exponent;
};

struct _fpxreg {
 unsigned short significand[4];
 unsigned short exponent;
 unsigned short padding[3];

};
struct _xmmreg {
 unsigned long element[4];
};

struct _fpstate {
 unsigned long cw;
 unsigned long sw;
 unsigned long tag;

 unsigned long ipoff;
 unsigned long cssel;
 unsigned long dataoff;
 unsigned long datasel;

 struct _fpreg _st[8];
 unsigned short status;
 unsigned short magic;
 unsigned long _fxsr_env[6];

 unsigned long mxcsr;
 unsigned long reserved;
 struct _fpxreg _fxsr_st[8];
 struct _xmmreg _xmm[8];

 unsigned long padding[56];
};

struct sigcontext {

 unsigned short gs, __gsh;
 unsigned short fs, __fsh;
 unsigned short es, __esh;
 unsigned short ds, __dsh;

 unsigned long edi;
 unsigned long esi;
 unsigned long ebp;
 unsigned long esp;

 unsigned long ebx;
 unsigned long edx;
 unsigned long ecx;
 unsigned long eax;

 unsigned long trapno;
 unsigned long err;
 unsigned long eip;
 unsigned short cs, __csh;

 unsigned long eflags;
 unsigned long esp_at_signal;
 unsigned short ss, __ssh;
 struct _fpstate * fpstate;

 unsigned long oldmask;
 unsigned long cr2;
};
# 37 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\signal.h" 2 3 4


# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\siginfo.h" 1 3 4
# 25 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\siginfo.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\siginfo.h" 1 3 4
# 18 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\siginfo.h" 3 4
typedef union sigval {
 int sival_int;
 void *sival_ptr;
} sigval_t;
# 42 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\siginfo.h" 3 4
typedef struct siginfo {
 int si_signo;
 int si_errno;
 int si_code;

 union {
 int _pad[((128 - (3 * sizeof(int))) / sizeof(int))];

 struct {
 pid_t _pid;
 __kernel_uid32_t _uid;
 } _kill;

 struct {
 timer_t _tid;
 int _overrun;
 char _pad[sizeof( __kernel_uid32_t) - sizeof(int)];
 sigval_t _sigval;
 int _sys_private;
 } _timer;

 struct {
 pid_t _pid;
 __kernel_uid32_t _uid;
 sigval_t _sigval;
 } _rt;

 struct {
 pid_t _pid;
 __kernel_uid32_t _uid;
 int _status;
 clock_t _utime;
 clock_t _stime;
 } _sigchld;

 struct {
 void *_addr;



 } _sigfault;

 struct {
 long _band;
 int _fd;
 } _sigpoll;
 } _sifields;
} siginfo_t;
# 194 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\siginfo.h" 3 4
typedef struct sigevent {
 sigval_t sigev_value;
 int sigev_signo;
 int sigev_notify;
 union {
 int _pad[((64 - (sizeof(int) * 2 + sizeof(sigval_t))) / sizeof(int))];
 int _tid;

 struct {
 void (*_function)(sigval_t);
 void *_attribute;
 } _sigev_thread;
 } _sigev_un;
} sigevent_t;
# 26 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\siginfo.h" 2 3 4
# 40 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\signal.h" 2 3 4


# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\ucontext.h" 1 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\ucontext.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 1 3 4
# 28 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\signal.h" 1 3 4
# 29 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 2 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\ucontext.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\user.h" 1 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\user.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/limits.h" 1 3 4
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\user.h" 2 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 35 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\user.h" 2 3 4

extern "C" {



struct user_fpregs_struct {
  long cwd;
  long swd;
  long twd;
  long fip;
  long fcs;
  long foo;
  long fos;
  long st_space[20];
};
struct user_fxsr_struct {
  unsigned short cwd;
  unsigned short swd;
  unsigned short twd;
  unsigned short fop;
  long fip;
  long fcs;
  long foo;
  long fos;
  long mxcsr;
  long reserved;
  long st_space[32];
  long xmm_space[32];
  long padding[56];
};
struct user_regs_struct {
  long ebx;
  long ecx;
  long edx;
  long esi;
  long edi;
  long ebp;
  long eax;
  long xds;
  long xes;
  long xfs;
  long xgs;
  long orig_eax;
  long eip;
  long xcs;
  long eflags;
  long esp;
  long xss;
};
struct user {
  struct user_regs_struct regs;
  int u_fpvalid;
  struct user_fpregs_struct i387;
  unsigned long int u_tsize;
  unsigned long int u_dsize;
  unsigned long int u_ssize;
  unsigned long start_code;
  unsigned long start_stack;
  long int signal;
  int reserved;
  unsigned long u_ar0;
  struct user_fpregs_struct* u_fpstate;
  unsigned long magic;
  char u_comm[32];
  int u_debugreg[8];
};
# 241 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\user.h" 3 4
}
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\ucontext.h" 2 3 4

extern "C" {
# 96 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\ucontext.h" 3 4
enum {
  REG_GS = 0,
  REG_FS,
  REG_ES,
  REG_DS,
  REG_EDI,
  REG_ESI,
  REG_EBP,
  REG_ESP,
  REG_EBX,
  REG_EDX,
  REG_ECX,
  REG_EAX,
  REG_TRAPNO,
  REG_ERR,
  REG_EIP,
  REG_CS,
  REG_EFL,
  REG_UESP,
  REG_SS,
  NGREG
};

typedef int greg_t;
typedef greg_t gregset_t[NGREG];

struct _libc_fpreg {
  unsigned short significand[4];
  unsigned short exponent;
};

struct _libc_fpstate {
  unsigned long cw;
  unsigned long sw;
  unsigned long tag;
  unsigned long ipoff;
  unsigned long cssel;
  unsigned long dataoff;
  unsigned long datasel;
  struct _libc_fpreg _st[8];
  unsigned long status;
};

typedef struct _libc_fpstate* fpregset_t;

typedef struct {
  gregset_t gregs;
  fpregset_t fpregs;
  unsigned long oldmask;
  unsigned long cr2;
} mcontext_t;

typedef struct ucontext {
  unsigned long uc_flags;
  struct ucontext* uc_link;
  stack_t uc_stack;
  mcontext_t uc_mcontext;
  sigset_t uc_sigmask;

  uint32_t __padding_rt_sigset;
  struct _libc_fpstate __fpregs_mem;
} ucontext_t;
# 287 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\ucontext.h" 3 4
}
# 43 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\signal.h" 2 3 4


extern "C" {

typedef int sig_atomic_t;
# 60 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\signal.h" 3 4
extern const char * const sys_siglist[];
extern const char * const sys_signame[];

static __inline__ int sigismember(sigset_t *set, int signum)
{
    unsigned long *local_set = (unsigned long *)set;
    signum--;
    return (int)((local_set[signum/32] >> (signum%32)) & 1);
}


static __inline__ int sigaddset(sigset_t *set, int signum)
{
    unsigned long *local_set = (unsigned long *)set;
    signum--;
    local_set[signum/32] |= 1UL << (signum%32);
    return 0;
}


static __inline__ int sigdelset(sigset_t *set, int signum)
{
    unsigned long *local_set = (unsigned long *)set;
    signum--;
    local_set[signum/32] &= ~(1UL << (signum%32));
    return 0;
}


static __inline__ int sigemptyset(sigset_t *set)
{
    memset(set, 0, sizeof *set);
    return 0;
}

static __inline__ int sigfillset(sigset_t *set)
{
    memset(set, ~0, sizeof *set);
    return 0;
}



typedef void (*sig_t)(int);
typedef sig_t sighandler_t;


extern __sighandler_t sysv_signal(int, __sighandler_t);
extern __sighandler_t bsd_signal(int, __sighandler_t);


static __inline__ __sighandler_t signal(int s, __sighandler_t f)
{
    return bsd_signal(s,f);
}


extern __sighandler_t __signal(int, __sighandler_t, int);

extern int sigprocmask(int, const sigset_t *, sigset_t *);
extern int sigaction(int, const struct sigaction *, struct sigaction *);

extern int sigpending(sigset_t *);
extern int sigsuspend(const sigset_t *);
extern int sigwait(const sigset_t *set, int *sig);
extern int siginterrupt(int sig, int flag);

extern int raise(int);
extern int kill(pid_t, int);
extern int killpg(int pgrp, int sig);
extern int sigaltstack(const stack_t *ss, stack_t *oss);


}
# 29 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 2 3 4





# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1 3 4
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1 3 4
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 2 3 4
# 36 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\wait.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\unistd.h" 1 3 4
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\unistd.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\unistd_32.h" 1 3 4
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\unistd.h" 2 3 4
# 37 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\wait.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\syscall.h" 1 3 4
# 31 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\syscall.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 1 3 4
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1 3 4
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 2 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\errno.h" 1 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\errno.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\errno.h" 1 3 4
# 15 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\errno.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\errno.h" 1 3 4
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\errno.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\errno.h" 1 3 4
# 15 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\errno.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\errno-base.h" 1 3 4
# 16 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\errno.h" 2 3 4
# 19 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\errno.h" 2 3 4
# 16 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\errno.h" 2 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\errno.h" 2 3 4

extern "C" {
# 44 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\errno.h" 3 4
extern volatile int* __errno(void);






static __inline__ int __attribute__((deprecated))
__set_errno(int n) {
  (*__errno()) = n;
  return -1;
}

}
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 2 3 4
# 61 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1 3 4
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1 3 4
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2 3 4
# 62 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 2 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\syscall.h" 2 3 4


# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\unistd.h" 1 3 4
# 35 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\syscall.h" 2 3 4

extern "C" {

int syscall(int number, ...);

}
# 38 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\wait.h" 2 3 4


extern "C" {
# 51 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\wait.h" 3 4
extern pid_t wait(int *);
extern pid_t waitpid(pid_t, int *, int);
extern pid_t wait3(int *, int, struct rusage *);
static __inline__ pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage)
{
  return (pid_t)syscall(114, pid, status, options, rusage);
}





typedef int idtype_t;

extern int waitid(idtype_t which, id_t id, siginfo_t *info, int options);

}
# 16 "jni/scrcap/../util/PtraceUtil.cpp" 2

# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\mman.h" 1 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\mman.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\mman.h" 1 3 4
# 21 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\mman.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\mman.h" 1 3 4
# 21 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\mman.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\mman-common.h" 1 3 4
# 22 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm-generic\\mman.h" 2 3 4
# 22 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\mman.h" 2 3 4
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\mman.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\asm\\page.h" 1 3 4
# 35 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\mman.h" 2 3 4

extern "C" {
# 47 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\mman.h" 3 4
extern void* mmap(void *, size_t, int, int, int, off_t);
extern int munmap(void *, size_t);
extern int msync(const void *, size_t, int);
extern int mprotect(const void *, size_t, int);
extern void* mremap(void *, size_t, size_t, unsigned long);

extern int mlockall(int);
extern int munlockall(void);
extern int mlock(const void *, size_t);
extern int munlock(const void *, size_t);
extern int madvise(const void *, size_t, int);

extern int mlock(const void *addr, size_t len);
extern int munlock(const void *addr, size_t len);

extern int mincore(void* start, size_t length, unsigned char* vec);

}
# 18 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\unistd.h" 1 3 4
# 31 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\unistd.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1 3 4
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4




# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1 3 4
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1 3 4
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2 3 4
# 40 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\unistd.h" 2 3 4


# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\select.h" 1 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\select.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\time.h" 1 3 4
# 35 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\time.h" 3 4
extern "C" {

extern int gettimeofday(struct timeval *, struct timezone *);
extern int settimeofday(const struct timeval *, const struct timezone *);

extern int getitimer(int, struct itimerval *);
extern int setitimer(int, const struct itimerval *, struct itimerval *);

extern int utimes(const char *, const struct timeval *);
# 76 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\time.h" 3 4
}
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\select.h" 2 3 4

# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 1 3 4
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1 3 4
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 2 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1 3 4
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1 3 4
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 2 3 4
# 35 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\select.h" 2 3 4

extern "C" {

typedef __kernel_fd_set fd_set;

extern int select(int, fd_set *, fd_set *, fd_set *, struct timeval *);
extern int pselect(int n, fd_set *readfds, fd_set *writefds, fd_set *errfds,
                   const struct timespec *timeout, const sigset_t *sigmask);

}
# 35 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\unistd.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\sysconf.h" 1 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\sysconf.h" 3 4
extern "C" {
# 132 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\sysconf.h" 3 4
long sysconf(int name);

}
# 36 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\unistd.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\capability.h" 1 3 4
# 20 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\linux\\capability.h" 3 4
typedef struct __user_cap_header_struct {
 __u32 version;
 int pid;
} *cap_user_header_t;

typedef struct __user_cap_data_struct {
 __u32 effective;
 __u32 permitted;
 __u32 inheritable;
} *cap_user_data_t;
# 37 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\unistd.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pathconf.h" 1 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pathconf.h" 3 4
extern "C" {
# 58 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pathconf.h" 3 4
extern long fpathconf(int fildes, int name);
extern long pathconf(const char *path, int name);

}
# 38 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\unistd.h" 2 3 4

extern "C" {
# 51 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\unistd.h" 3 4
extern char **environ;
extern __attribute__((__noreturn__)) void _exit(int);

extern pid_t fork(void);
extern pid_t vfork(void);
extern pid_t getpid(void);
extern pid_t gettid(void);
extern pid_t getpgid(pid_t);
extern int setpgid(pid_t, pid_t);
extern pid_t getppid(void);
extern pid_t getpgrp(void);
extern int setpgrp(void);
extern pid_t setsid(void);

extern int execv(const char *, char * const *);
extern int execvp(const char *, char * const *);
extern int execve(const char *, char * const *, char * const *);
extern int execl(const char *, const char *, ...);
extern int execlp(const char *, const char *, ...);
extern int execle(const char *, const char *, ...);
extern int capget(cap_user_header_t hdrp, cap_user_data_t datap);
extern int capset(cap_user_header_t hdrp, const cap_user_data_t datap);


extern int prctl(int option, ...);

extern int nice(int);

extern int setuid(uid_t);
extern uid_t getuid(void);
extern int seteuid(uid_t);
extern uid_t geteuid(void);
extern int setgid(gid_t);
extern gid_t getgid(void);
extern int setegid(gid_t);
extern gid_t getegid(void);
extern int getgroups(int, gid_t *);
extern int setgroups(size_t, const gid_t *);
extern int setreuid(uid_t, uid_t);
extern int setregid(gid_t, gid_t);
extern int setresuid(uid_t, uid_t, uid_t);
extern int setresgid(gid_t, gid_t, gid_t);
extern int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);
extern int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);
extern int issetugid(void);
extern char* getlogin(void);
extern char* getusershell(void);
extern void setusershell(void);
extern void endusershell(void);
# 109 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\unistd.h" 3 4
extern int access(const char *, int);
extern int link(const char *, const char *);
extern int unlink(const char *);
extern int chdir(const char *);
extern int fchdir(int);
extern int rmdir(const char *);
extern int pipe(int *);

extern int pipe2(int *, int);

extern int chroot(const char *);
extern int symlink(const char *, const char *);
extern int readlink(const char *, char *, size_t);
extern int chown(const char *, uid_t, gid_t);
extern int fchown(int, uid_t, gid_t);
extern int lchown(const char *, uid_t, gid_t);
extern int truncate(const char *, off_t);
extern char *getcwd(char *, size_t);

extern int sync(void);

extern int close(int);
extern off_t lseek(int, off_t, int);
extern off64_t lseek64(int, off64_t, int);

extern ssize_t read(int, void *, size_t);
extern ssize_t write(int, const void *, size_t);
extern ssize_t pread(int, void *, size_t, off_t);
extern ssize_t pwrite(int, const void *, size_t, off_t);

extern int dup(int);
extern int dup2(int, int);
extern int fcntl(int, int, ...);
extern int ioctl(int, int, ...);
extern int flock(int, int);
extern int fsync(int);
extern int fdatasync(int);
extern int ftruncate(int, off_t);

extern int pause(void);
extern unsigned int alarm(unsigned int);
extern unsigned int sleep(unsigned int);
extern int usleep(unsigned long);

extern int gethostname(char *, size_t);

extern int getdtablesize(void);

extern void *__brk(void *);
extern int brk(void *);
extern void *sbrk(ptrdiff_t);

extern int getopt(int, char * const *, const char *);
extern char *optarg;
extern int optind, opterr, optopt;

extern int isatty(int);
extern char* ttyname(int);
extern int ttyname_r(int, char*, size_t);

extern int acct(const char* filepath);

static __inline__ int getpagesize(void) {
  return (1UL << 12);
}

long sysconf(int);

extern int daemon(int, int);


extern int cacheflush(long start, long end, long flags);

extern pid_t tcgetpgrp(int fd);
extern int tcsetpgrp(int fd, pid_t _pid);
# 205 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\unistd.h" 3 4
}
# 19 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 2
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h"
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdlib.h" 1 3 4
# 37 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdlib.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 38 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdlib.h" 2 3 4

# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 40 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdlib.h" 2 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 1 3 4
# 41 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdlib.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\alloca.h" 1 3 4
# 42 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdlib.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\strings.h" 1 3 4
# 45 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\strings.h" 3 4
extern "C" {



int bcmp(const void *, const void *, size_t);
int ffs(int);
int strcasecmp(const char *, const char *);
int strncasecmp(const char *, const char *, size_t);
}
# 43 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdlib.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\memory.h" 1 3 4
# 44 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdlib.h" 2 3 4

extern "C" {




extern __attribute__((__noreturn__)) void exit(int);
extern __attribute__((__noreturn__)) void abort(void);
extern int atexit(void (*)(void));

extern char *getenv(const char *);
extern int putenv(const char *);
extern int setenv(const char *, const char *, int);
extern int unsetenv(const char *);
extern int clearenv(void);

extern char *mkdtemp(char *);
extern char *mktemp (char *);
extern int mkstemp (char *);

extern long strtol(const char *, char **, int);
extern long long strtoll(const char *, char **, int);
extern unsigned long strtoul(const char *, char **, int);
extern unsigned long long strtoull(const char *, char **, int);
extern double strtod(const char *nptr, char **endptr) ;


static __inline__ float strtof(const char *nptr, char **endptr)
{
    return (float)strtod(nptr, endptr);
}

extern int atoi(const char *);
extern long atol(const char *);
extern long long atoll(const char *);


static __inline__ double atof(const char *nptr)
{
    return (strtod(nptr, __null));
}

static __inline__ int abs(int __n) {
    return (__n < 0) ? -__n : __n;
}

static __inline__ long labs(long __n) {
    return (__n < 0L) ? -__n : __n;
}

static __inline__ long long llabs(long long __n) {
    return (__n < 0LL) ? -__n : __n;
}

extern char * realpath(const char *path, char *resolved);
extern int system(const char * string);

extern void * bsearch(const void *key, const void *base0,
 size_t nmemb, size_t size,
 int (*compar)(const void *, const void *));

extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));

extern long jrand48(unsigned short *);
extern long mrand48(void);
extern long nrand48(unsigned short *);
extern long lrand48(void);
extern unsigned short *seed48(unsigned short*);
extern double erand48(unsigned short xsubi[3]) ;
extern double drand48(void) ;
extern void srand48(long);
extern unsigned int arc4random(void);
extern void arc4random_stir(void);
extern void arc4random_addrandom(unsigned char *, int);


static __inline__ int rand(void) {
    return (int)lrand48();
}
static __inline__ void srand(unsigned int __s) {
    srand48(__s);
}
static __inline__ long random(void)
{
    return lrand48();
}
static __inline__ void srandom(unsigned int __s)
{
    srand48(__s);
}



extern int unlockpt(int);
extern char* ptsname(int);
extern int ptsname_r(int, char*, size_t);
extern int getpt(void);

static __inline__ int grantpt(int __fd __attribute((unused)))
{
  (void)__fd;
  return 0;
}

typedef struct {
    int quot;
    int rem;
} div_t;

extern div_t div(int, int);

typedef struct {
    long int quot;
    long int rem;
} ldiv_t;

extern ldiv_t ldiv(long, long);

typedef struct {
    long long int quot;
    long long int rem;
} lldiv_t;

extern lldiv_t lldiv(long long, long long);



extern int mblen(const char *, size_t);
extern size_t mbstowcs(wchar_t *, const char *, size_t);
extern int mbtowc(wchar_t *, const char *, size_t);


extern int wctomb(char *, wchar_t);
extern size_t wcstombs(char *, const wchar_t *, size_t);
# 186 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\stdlib.h" 3 4
}
# 51 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 2
# 60 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 61 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 2
# 20 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 51 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 21 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 1
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 2
# 61 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 62 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 2
# 22 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h" 1
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h" 2
# 30 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h"
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\assert.h" 1 3 4
# 62 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\assert.h" 3 4
extern "C" {
 void __assert(const char *, int, const char *);
 void __assert2(const char *, int, const char *, const char *);
}
# 31 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h" 2
# 41 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 42 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h" 2
# 23 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 2
# 59 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 60 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 2
# 24 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\dlfcn.h" 1 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\dlfcn.h" 3 4
extern "C" {

typedef struct {
    const char *dli_fname;

    void *dli_fbase;

    const char *dli_sname;

    void *dli_saddr;

} Dl_info;

extern void* dlopen(const char* filename, int flag);
extern int dlclose(void* handle);
extern const char* dlerror(void);
extern void* dlsym(void* handle, const char* symbol);
extern int dladdr(const void* addr, Dl_info *info);

enum {
  RTLD_NOW = 0,
  RTLD_LAZY = 1,

  RTLD_LOCAL = 0,
  RTLD_GLOBAL = 2,
};




}
# 25 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 2
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h"
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stdarg.h" 1 3 4
# 98 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 37 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 2




# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 42 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 2
# 26 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string" 1
# 23 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 1






# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 8 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 2
# 17 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/debug/_debug.h" 1
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 2
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string" 2





# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h" 1
# 23 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h" 1
# 31 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstddef.h" 1
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstddef.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h"
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstddef.h" 2



namespace std {
using ::ptrdiff_t;
using ::size_t;
}
# 32 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdlib.h" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdlib.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 1
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdlib.h" 2
# 55 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdlib.h"
namespace std {
using ::div_t;
using ::ldiv_t;
using ::size_t;




using ::abort;
using ::getenv;
using ::mblen;
using ::mbtowc;
using ::system;
using ::bsearch;

using ::atexit;
using ::exit;
using ::calloc;
using ::free;
using ::malloc;
using ::realloc;
using ::atof;
using ::atoi;
using ::atol;
using ::mbstowcs;
using ::strtod;
using ::strtol;
using ::strtoul;


using ::wcstombs;

using ::wctomb;


using ::qsort;
using ::labs;
using ::ldiv;
# 104 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdlib.h"
using ::rand;
using ::srand;

}
# 131 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdlib.h"
inline long abs(long __x) { return ::labs(__x); }





inline ::ldiv_t div(long __x, long __y) { return ::ldiv(__x, __y); }
# 169 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdlib.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cmath.h" 1
# 44 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cmath.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/math.h" 1
# 32 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/math.h"
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\math.h" 1 3 4
# 22 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\math.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/limits.h" 1 3 4
# 23 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\math.h" 2 3 4






extern const union __infinity_un {
 unsigned char __uc[8];
 double __ud;
} __infinity;

extern const union __nan_un {
 unsigned char __uc[sizeof(float)];
 float __uf;
} __nan;
# 165 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\math.h" 3 4
extern int signgam;
# 182 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\math.h" 3 4
extern "C" {



int __fpclassifyd(double) ;
int __fpclassifyf(float) ;
int __fpclassifyl(long double) ;
int __isfinitef(float) ;
int __isfinite(double) ;
int __isfinitel(long double) ;
int __isinff(float) ;
int __isinf(double) ;
int __isinfl(long double) ;
int __isnanl(long double) ;
int __isnormalf(float) ;
int __isnormal(double) ;
int __isnormall(long double) ;
int __signbit(double) ;
int __signbitf(float) ;
int __signbitl(long double) ;

double acos(double) ;
double asin(double) ;
double atan(double) ;
double atan2(double, double) ;
double cos(double) ;
double sin(double) ;
double tan(double) ;

double cosh(double) ;
double sinh(double) ;
double tanh(double) ;

double exp(double) ;
double frexp(double, int *) ;
double ldexp(double, int) ;
double log(double) ;
double log10(double) ;
double modf(double, double *) ;

double pow(double, double) ;
double sqrt(double) ;

double ceil(double) ;
double fabs(double) ;
double floor(double) ;
double fmod(double, double) ;





double acosh(double) ;
double asinh(double) ;
double atanh(double) ;
double cbrt(double) ;
double erf(double) ;
double erfc(double) ;
double exp2(double) ;
double expm1(double) ;
double fma(double, double, double) ;
double hypot(double, double) ;
int ilogb(double) ;

int (isnan)(double) ;
double lgamma(double) ;
long long llrint(double) ;
long long llround(double) ;
double log1p(double) ;
double logb(double) ;
long lrint(double) ;
long lround(double) ;
double nextafter(double, double) ;
double remainder(double, double) ;
double remquo(double, double, int *) ;
double rint(double) ;



double j0(double) ;
double j1(double) ;
double jn(int, double) ;
double scalb(double, double) ;
double y0(double) ;
double y1(double) ;
double yn(int, double) ;


double gamma(double) ;




double copysign(double, double) ;
double fdim(double, double) ;
double fmax(double, double) ;
double fmin(double, double) ;
double nearbyint(double) ;
double round(double) ;
double scalbln(double, long) ;
double scalbn(double, int) ;
double tgamma(double) ;
double trunc(double) ;






double drem(double, double) ;
int finite(double) ;
int isnanf(float) ;





double gamma_r(double, int *) ;
double lgamma_r(double, int *) ;




double significand(double) ;




float acosf(float) ;
float asinf(float) ;
float atanf(float) ;
float atan2f(float, float) ;
float cosf(float) ;
float sinf(float) ;
float tanf(float) ;

float coshf(float) ;
float sinhf(float) ;
float tanhf(float) ;

float exp2f(float) ;
float expf(float) ;
float expm1f(float) ;
float frexpf(float, int *) ;
int ilogbf(float) ;
float ldexpf(float, int) ;
float log10f(float) ;
float log1pf(float) ;
float logf(float) ;
float modff(float, float *) ;

float powf(float, float) ;
float sqrtf(float) ;

float ceilf(float) ;
float fabsf(float) ;
float floorf(float) ;
float fmodf(float, float) ;
float roundf(float) ;

float erff(float) ;
float erfcf(float) ;
float hypotf(float, float) ;
float lgammaf(float) ;

float acoshf(float) ;
float asinhf(float) ;
float atanhf(float) ;
float cbrtf(float) ;
float logbf(float) ;
float copysignf(float, float) ;
long long llrintf(float) ;
long long llroundf(float) ;
long lrintf(float) ;
long lroundf(float) ;
float nearbyintf(float) ;
float nextafterf(float, float) ;
float remainderf(float, float) ;
float remquof(float, float, int *) ;
float rintf(float) ;
float scalblnf(float, long) ;
float scalbnf(float, int) ;
float truncf(float) ;

float fdimf(float, float) ;
float fmaf(float, float, float) ;
float fmaxf(float, float) ;
float fminf(float, float) ;






float dremf(float, float) ;
int finitef(float) ;
float gammaf(float) ;
float j0f(float) ;
float j1f(float) ;
float jnf(int, float) ;
float scalbf(float, float) ;
float y0f(float) ;
float y1f(float) ;
float ynf(int, float) ;






float gammaf_r(float, int *) ;
float lgammaf_r(float, int *) ;




float significandf(float) ;
# 415 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\math.h" 3 4
long double ceill(long double) ;
long double copysignl(long double, long double) ;
# 426 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\math.h" 3 4
long double fabsl(long double) ;
long double fdiml(long double, long double) ;
long double floorl(long double) ;
long double fmal(long double, long double, long double) ;
long double fmaxl(long double, long double) ;
long double fminl(long double, long double) ;



long double frexpl(long double value, int *) ;



int ilogbl(long double) ;
long double ldexpl(long double, int) ;




long long llroundl(long double) ;
# 454 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\math.h" 3 4
long lroundl(long double) ;





long double nextafterl(long double, long double) ;
double nexttoward(double, long double) ;
float nexttowardf(float, long double) ;
long double nexttowardl(long double, long double) ;






long double roundl(long double) ;
long double scalblnl(long double, long) ;
long double scalbnl(long double, int) ;
# 481 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\math.h" 3 4
long double truncl(long double) ;



void sincos(double x, double *sin, double *cos) ;
void sincosf(float x, float *sin, float *cos) ;
void sincosl(long double x, long double *sin, long double *cos) ;




double __builtin_acos(double) ;
double __builtin_asin(double) ;
double __builtin_atan(double) ;
double __builtin_atan2(double, double) ;
double __builtin_cos(double) ;
double __builtin_sin(double) ;
double __builtin_tan(double) ;
double __builtin_cosh(double) ;
double __builtin_sinh(double) ;
double __builtin_tanh(double) ;
double __builtin_exp(double) ;
double __builtin_frexp(double, int *) ;
double __builtin_ldexp(double, int) ;
double __builtin_log(double) ;
double __builtin_log10(double) ;
double __builtin_modf(double, double *) ;
double __builtin_pow(double, double) ;
double __builtin_sqrt(double) ;
double __builtin_ceil(double) ;
double __builtin_fabs(double) ;
double __builtin_floor(double) ;
double __builtin_fmod(double, double) ;
double __builtin_acosh(double) ;
double __builtin_asinh(double) ;
double __builtin_atanh(double) ;
double __builtin_cbrt(double) ;
double __builtin_erf(double) ;
double __builtin_erfc(double) ;
double __builtin_exp2(double) ;
double __builtin_expm1(double) ;
double __builtin_fma(double, double, double) ;
double __builtin_hypot(double, double) ;
int __builtin_ilogb(double) ;



int __builtin_isnan(double) ;

double __builtin_lgamma(double) ;
long long __builtin_llrint(double) ;
long long __builtin_llround(double) ;
double __builtin_log1p(double) ;
double __builtin_logb(double) ;
long __builtin_lrint(double) ;
long __builtin_lround(double) ;
double __builtin_nextafter(double, double) ;
double __builtin_remainder(double, double) ;
double __builtin_remquo(double, double, int *) ;
double __builtin_rint(double) ;
double __builtin_j0(double) ;
double __builtin_j1(double) ;
double __builtin_jn(int, double) ;
double __builtin_scalb(double, double) ;
double __builtin_y0(double) ;
double __builtin_y1(double) ;
double __builtin_yn(int, double) ;
double __builtin_gamma(double) ;
double __builtin_copysign(double, double) ;
double __builtin_fdim(double, double) ;
double __builtin_fmax(double, double) ;
double __builtin_fmin(double, double) ;
double __builtin_nearbyint(double) ;
double __builtin_round(double) ;
double __builtin_scalbln(double, long) ;
double __builtin_scalbn(double, int) ;
double __builtin_tgamma(double) ;
double __builtin_trunc(double) ;
double __builtin_drem(double, double) ;
int __builtin_finite(double) ;
int __builtin_isnanf(float) ;
double __builtin_gamma_r(double, int *) ;
double __builtin_lgamma_r(double, int *) ;
double __builtin_significand(double) ;
float __builtin_acosf(float) ;
float __builtin_asinf(float) ;
float __builtin_atanf(float) ;
float __builtin_atan2f(float, float) ;
float __builtin_cosf(float) ;
float __builtin_sinf(float) ;
float __builtin_tanf(float) ;
float __builtin_coshf(float) ;
float __builtin_sinhf(float) ;
float __builtin_tanhf(float) ;
float __builtin_exp2f(float) ;
float __builtin_expf(float) ;
float __builtin_expm1f(float) ;
float __builtin_frexpf(float, int *) ;
int __builtin_ilogbf(float) ;
float __builtin_ldexpf(float, int) ;
float __builtin_log10f(float) ;
float __builtin_log1pf(float) ;
float __builtin_logf(float) ;
float __builtin_modff(float, float *) ;
float __builtin_powf(float, float) ;
float __builtin_sqrtf(float) ;
float __builtin_ceilf(float) ;
float __builtin_fabsf(float) ;
float __builtin_floorf(float) ;
float __builtin_fmodf(float, float) ;
float __builtin_roundf(float) ;
float __builtin_erff(float) ;
float __builtin_erfcf(float) ;
float __builtin_hypotf(float, float) ;
float __builtin_lgammaf(float) ;
float __builtin_acoshf(float) ;
float __builtin_asinhf(float) ;
float __builtin_atanhf(float) ;
float __builtin_cbrtf(float) ;
float __builtin_logbf(float) ;
float __builtin_copysignf(float, float) ;
long long __builtin_llrintf(float) ;
long long __builtin_llroundf(float) ;
long __builtin_lrintf(float) ;
long __builtin_lroundf(float) ;
float __builtin_nearbyintf(float) ;
float __builtin_nextafterf(float, float) ;
float __builtin_remainderf(float, float) ;
float __builtin_remquof(float, float, int *) ;
float __builtin_rintf(float) ;
float __builtin_scalblnf(float, long) ;
float __builtin_scalbnf(float, int) ;
float __builtin_truncf(float) ;
float __builtin_fdimf(float, float) ;
float __builtin_fmaf(float, float, float) ;
float __builtin_fmaxf(float, float) ;
float __builtin_fminf(float, float) ;
float __builtin_dremf(float, float) ;
int __builtin_finitef(float) ;
float __builtin_gammaf(float) ;
float __builtin_j0f(float) ;
float __builtin_j1f(float) ;
float __builtin_jnf(int, float) ;
float __builtin_scalbf(float, float) ;
float __builtin_y0f(float) ;
float __builtin_y1f(float) ;
float __builtin_ynf(int, float) ;
float __builtin_gammaf_r(float, int *) ;
float __builtin_lgammaf_r(float, int *) ;
float __builtin_significandf(float) ;
long double __builtin_acoshl(long double) ;
long double __builtin_acosl(long double) ;
long double __builtin_asinhl(long double) ;
long double __builtin_asinl(long double) ;
long double __builtin_atan2l(long double, long double) ;
long double __builtin_atanhl(long double) ;
long double __builtin_atanl(long double) ;
long double __builtin_cbrtl(long double) ;
long double __builtin_ceill(long double) ;
long double __builtin_copysignl(long double, long double) ;
long double __builtin_coshl(long double) ;
long double __builtin_cosl(long double) ;
long double __builtin_erfcl(long double) ;
long double __builtin_erfl(long double) ;
long double __builtin_exp2l(long double) ;
long double __builtin_expl(long double) ;
long double __builtin_expm1l(long double) ;
long double __builtin_fabsl(long double) ;
long double __builtin_fdiml(long double, long double) ;
long double __builtin_floorl(long double) ;
long double __builtin_fmal(long double, long double, long double) ;
long double __builtin_fmaxl(long double, long double) ;
long double __builtin_fminl(long double, long double) ;
long double __builtin_fmodl(long double, long double) ;
long double __builtin_frexpl(long double value, int *) ;
long double __builtin_hypotl(long double, long double) ;
int __builtin_ilogbl(long double) ;
long double __builtin_ldexpl(long double, int) ;
long double __builtin_lgammal(long double) ;
long long __builtin_llrintl(long double) ;
long long __builtin_llroundl(long double) ;
long double __builtin_log10l(long double) ;
long double __builtin_log1pl(long double) ;
long double __builtin_log2l(long double) ;
long double __builtin_logbl(long double) ;
long double __builtin_logl(long double) ;
long __builtin_lrintl(long double) ;
long __builtin_lroundl(long double) ;
long double __builtin_modfl(long double, long double *) ;
long double __builtin_nanl(const char *) ;
long double __builtin_nearbyintl(long double) ;
long double __builtin_nextafterl(long double, long double) ;

double __builtin_nexttoward(double, long double) ;
float __builtin_nexttowardf(float, long double) ;





long double __builtin_nexttowardl(long double, long double) ;
long double __builtin_powl(long double, long double) ;
long double __builtin_remainderl(long double, long double) ;
long double __builtin_remquol(long double, long double, int *) ;
long double __builtin_rintl(long double) ;
long double __builtin_roundl(long double) ;
long double __builtin_scalblnl(long double, long) ;
long double __builtin_scalbnl(long double, int) ;
long double __builtin_sinhl(long double) ;
long double __builtin_sinl(long double) ;
long double __builtin_sqrtl(long double) ;
long double __builtin_tanhl(long double) ;
long double __builtin_tanl(long double) ;
long double __builtin_tgammal(long double) ;
long double __builtin_truncl(long double) ;
void __builtin_sincos(double x, double *sin, double *cos) ;
void __builtin_sincosf(float x, float *sin, float *cos) ;
void __builtin_sincosl(long double x, long double *sin, long double *cos) ;


}
# 33 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/math.h" 2
# 45 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cmath.h" 2
# 424 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cmath.h"
inline double abs(double __x)
{ return ::fabs(__x); }

inline float abs (float x) { return ::fabsf(x); } inline long double abs (long double x) { return static_cast<long double>(::fabs((double)x)); }




inline float acos (float x) { return ::acosf(x); } inline long double acos (long double x) { return static_cast<long double>(::acos((double)x)); }
inline float asin (float x) { return ::asinf(x); } inline long double asin (long double x) { return static_cast<long double>(::asin((double)x)); }
inline float atan (float x) { return ::atanf(x); } inline long double atan (long double x) { return static_cast<long double>(::atan((double)x)); }
inline float atan2 (float x, float y) { return ::atan2f(x, y); } inline long double atan2 (long double x, long double y) { return static_cast<long double>(::atan2((double)x, (double)y)); }
inline float ceil (float x) { return ::ceilf(x); } inline long double ceil (long double x) { return static_cast<long double>(::ceil((double)x)); }
inline float cos (float x) { return ::cosf(x); } inline long double cos (long double x) { return static_cast<long double>(::cos((double)x)); }
inline float cosh (float x) { return ::coshf(x); } inline long double cosh (long double x) { return static_cast<long double>(::cosh((double)x)); }
inline float exp (float x) { return ::expf(x); } inline long double exp (long double x) { return static_cast<long double>(::exp((double)x)); }
inline float fabs (float x) { return ::fabsf(x); } inline long double fabs (long double x) { return static_cast<long double>(::fabs((double)x)); }
inline float floor (float x) { return ::floorf(x); } inline long double floor (long double x) { return static_cast<long double>(::floor((double)x)); }
inline float fmod (float x, float y) { return ::fmodf(x, y); } inline long double fmod (long double x, long double y) { return static_cast<long double>(::fmod((double)x, (double)y)); }
inline float frexp (float x, int * y) { return ::frexpf(x, y); } inline long double frexp (long double x, int * y) { return static_cast<long double>(::frexp((double)x, y)); }
inline float ldexp (float x, int y) { return ::ldexpf(x, y); } inline long double ldexp (long double x, int y) { return static_cast<long double>(::ldexp((double)x, y)); }
inline float log (float x) { return ::logf(x); } inline long double log (long double x) { return static_cast<long double>(::log((double)x)); }
inline float log10 (float x) { return ::log10f(x); } inline long double log10 (long double x) { return static_cast<long double>(::log10((double)x)); }
inline float modf (float x, float * y) { return ::modff(x, y); } inline long double modf (long double x, long double *y) { double tmp1, tmp2; tmp1 = ::modf(static_cast<double>(x), &tmp2); *y = static_cast<long double>(tmp2); return static_cast<long double>(tmp1); }
inline float sin (float x) { return ::sinf(x); } inline long double sin (long double x) { return static_cast<long double>(::sin((double)x)); }
inline float sinh (float x) { return ::sinhf(x); } inline long double sinh (long double x) { return static_cast<long double>(::sinh((double)x)); }
inline float sqrt (float x) { return ::sqrtf(x); } inline long double sqrt (long double x) { return static_cast<long double>(::sqrt((double)x)); }
inline float tan (float x) { return ::tanf(x); } inline long double tan (long double x) { return static_cast<long double>(::tan((double)x)); }
inline float tanh (float x) { return ::tanhf(x); } inline long double tanh (long double x) { return static_cast<long double>(::tanh((double)x)); }
inline float pow (float x, float y) { return ::powf(x, y); } inline long double pow (long double x, long double y) { return static_cast<long double>(::pow((double)x, (double)y)); }




inline float pow(float __x, int __y) { return ::powf(__x, static_cast<float>(__y)); }






inline double pow(double __x, int __y) { return ::pow(__x, static_cast<double>(__y)); }
# 478 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cmath.h"
inline long double pow(long double __x, int __y) { return static_cast<long double>(::pow(__x, static_cast<long double>(__y))); }
# 535 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cmath.h"
namespace __captured {
template<typename _Tp> inline int __capture_isfinite(_Tp __f) { return ((sizeof (__f) == sizeof (float)) ? __isfinitef(__f) : (sizeof (__f) == sizeof (double)) ? __isfinite(__f) : __isfinitel(__f)); }
template<typename _Tp> inline int __capture_isinf(_Tp __f) { return ((sizeof (__f) == sizeof (float)) ? __isinff(__f) : (sizeof (__f) == sizeof (double)) ? __isinf(__f) : __isinfl(__f)); }
template<typename _Tp> inline int __capture_isnan(_Tp __f) { return ((sizeof (__f) == sizeof (float)) ? isnanf(__f) : (sizeof (__f) == sizeof (double)) ? isnan(__f) : __isnanl(__f)); }
template<typename _Tp> inline int __capture_signbit(_Tp __f) { return ((sizeof (__f) == sizeof (float)) ? __signbitf(__f) : (sizeof (__f) == sizeof (double)) ? __signbit(__f) : __signbitl(__f)); }
}




namespace __captured {
template<typename _Tp> inline int isfinite(_Tp __f) { return __capture_isfinite(__f); }
template<typename _Tp> inline int isinf(_Tp __f) { return __capture_isinf(__f); }
template<typename _Tp> inline int isnan(_Tp __f) { return __capture_isnan(__f); }
template<typename _Tp> inline int signbit(_Tp __f) { return __capture_signbit(__f); }
}

namespace std {
using ::abs;
using ::acos;
using ::asin;
using ::atan;
using ::atan2;
using ::ceil;
using ::cos;
using ::cosh;
using ::exp;
using ::fabs;
using ::floor;
using ::fmod;
using ::frexp;
# 574 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cmath.h"
using ::hypot;


using __captured::isfinite;
using __captured::isinf;
using __captured::isnan;

using ::ldexp;
using ::log;
using ::log10;
using ::modf;
using ::pow;

using __captured::signbit;

using ::sin;
using ::sinh;
using ::sqrt;
using ::tan;
using ::tanh;
}
# 170 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdlib.h" 2




namespace std {
using ::abs;
using ::div;
}
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstring.h" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstring.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 1
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstring.h" 2



namespace std {
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/using/cstring" 1
using ::size_t;
# 12 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/using/cstring"
using ::memmove;
using ::memcpy;




using ::strcoll;
using ::strerror;
using ::strxfrm;





using ::memchr;
using ::strchr;
using ::strpbrk;
using ::strrchr;
using ::strstr;




using ::memcmp;
using ::memset;

using ::strcat;


using ::strcmp;





using ::strcpy;



using ::strcspn;
using ::strlen;
using ::strncat;
using ::strncmp;

using ::strncpy;
using ::strspn;

using ::strtok;
# 32 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstring.h" 2
}
# 40 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h" 1
# 42 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/climits" 1
# 40 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/climits"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/limits.h" 1
# 41 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/climits" 2
# 43 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h" 2







# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_pair.h" 1
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_pair.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h" 1
# 63 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_manips.h" 1
# 21 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_manips.h"
namespace std {

struct __true_type {};
struct __false_type {};


namespace priv {
using ::std::__true_type;
using ::std::__false_type;
}



template <int _Is>
struct __bool2type
{ typedef __true_type _Ret; };

template<>
struct __bool2type<1> { typedef __true_type _Ret; };

template<>
struct __bool2type<0> { typedef __false_type _Ret; };


template <class __bool_type>
struct __type2bool { enum {_Ret = 1}; };

template<>
struct __type2bool<__true_type> { enum {_Ret = 1}; };

template<>
struct __type2bool<__false_type> { enum {_Ret = 0}; };


template <class _BoolType>
struct _Not { typedef __false_type _Ret; };

template<>
struct _Not<__false_type> { typedef __true_type _Ret; };


template <class _P1, class _P2>
struct _Land2 { typedef __false_type _Ret; };

template<>
struct _Land2<__true_type, __true_type> { typedef __true_type _Ret; };


template <class _P1, class _P2, class _P3>
struct _Land3 { typedef __false_type _Ret; };

template<>
struct _Land3<__true_type, __true_type, __true_type> { typedef __true_type _Ret; };


template <class _P1, class _P2>
struct _Lor2 { typedef __true_type _Ret; };

template<>
struct _Lor2<__false_type, __false_type> { typedef __false_type _Ret; };


template <class _P1, class _P2, class _P3>
struct _Lor3 { typedef __true_type _Ret; };

template<>
struct _Lor3<__false_type, __false_type, __false_type> { typedef __false_type _Ret; };
# 112 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_manips.h"
template <bool _Cond, class _Tp1, class _Tp2>
struct __select { typedef _Tp1 _Ret; };

template <class _Tp1, class _Tp2>
struct __select<false, _Tp1, _Tp2> { typedef _Tp2 _Ret; };
# 164 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_manips.h"
struct _NoVolatilePointerShim { _NoVolatilePointerShim(const void*); };
template <class _Tp>
char _IsCopyableFun(bool, _NoVolatilePointerShim, _Tp const*, _Tp*);
char* _IsCopyableFun(bool, ...);

template <class _Src, class _Dst>
struct _Copyable {
  static _Src* __null_src();
  static _Dst* __null_dst();
  enum { _Ret = (sizeof(_IsCopyableFun(false, __null_src(), __null_src(), __null_dst())) == sizeof(char)) };
  typedef typename __bool2type<_Ret>::_Ret _RetT;
};
# 202 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_manips.h"
template <class _Src, class _Dst>
struct _AreCopyable {
  enum { _Same = _Copyable<_Src, _Dst>::_Ret };
  typedef typename _Copyable<_Src, _Dst>::_RetT _Ret;
};

template <class _Tp1, class _Tp2>
struct _AreSameTypes {
  enum { _Same = 0 };
  typedef __false_type _Ret;
};


template <class _Tp>
struct _AreSameTypes<_Tp, _Tp> {
  enum { _Same = 1 };
  typedef __true_type _Ret;
};



template <class _Src, class _Dst>
struct _ConversionHelper {
  static char _Test(bool, _Dst);
  static char* _Test(bool, ...);
  static _Src _MakeSource();
};

template <class _Src, class _Dst>
struct _IsConvertible {
  typedef _ConversionHelper<_Src*, const volatile _Dst*> _H;
  enum { value = (sizeof(char) == sizeof(_H::_Test(false, _H::_MakeSource()))) };
  typedef typename __bool2type<value>::_Ret _Ret;
};
# 292 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_manips.h"
template <class _Src, class _Dst>
struct _IsCVConvertible {

  typedef _ConversionHelper<_Src, _Dst> _H;
  enum { value = (sizeof(char) == sizeof(_H::_Test(false, _H::_MakeSource()))) };





  typedef typename __bool2type<value>::_Ret _Ret;
};
# 319 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_manips.h"
}
# 64 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h" 2
# 72 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h"
namespace std {






template <class _Tp> struct _IsIntegral
{ typedef __false_type _Ret; };


template<> struct _IsIntegral<bool>
{ typedef __true_type _Ret; };


template<> struct _IsIntegral<char>
{ typedef __true_type _Ret; };


template<> struct _IsIntegral<signed char>
{ typedef __true_type _Ret; };


template<> struct _IsIntegral<unsigned char>
{ typedef __true_type _Ret; };


template<> struct _IsIntegral<wchar_t>
{ typedef __true_type _Ret; };


template<> struct _IsIntegral<short>
{ typedef __true_type _Ret; };

template<> struct _IsIntegral<unsigned short>
{ typedef __true_type _Ret; };

template<> struct _IsIntegral<int>
{ typedef __true_type _Ret; };

template<> struct _IsIntegral<unsigned int>
{ typedef __true_type _Ret; };

template<> struct _IsIntegral<long>
{ typedef __true_type _Ret; };

template<> struct _IsIntegral<unsigned long>
{ typedef __true_type _Ret; };
# 129 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h"
template <class _Tp> struct _IsRational
{ typedef __false_type _Ret; };

template<> struct _IsRational<float>
{ typedef __true_type _Ret; };

template<> struct _IsRational<double>
{ typedef __true_type _Ret; };


template<> struct _IsRational<long double>
{ typedef __true_type _Ret; };



template <class _Tp> struct __type_traits;
template <class _IsPOD> struct __type_traits_aux {
   typedef __false_type has_trivial_default_constructor;
   typedef __false_type has_trivial_copy_constructor;
   typedef __false_type has_trivial_assignment_operator;
   typedef __false_type has_trivial_destructor;
   typedef __false_type is_POD_type;
};

template<>
struct __type_traits_aux<__false_type> {
   typedef __false_type has_trivial_default_constructor;
   typedef __false_type has_trivial_copy_constructor;
   typedef __false_type has_trivial_assignment_operator;
   typedef __false_type has_trivial_destructor;
   typedef __false_type is_POD_type;
};

template<>
struct __type_traits_aux<__true_type> {
  typedef __true_type has_trivial_default_constructor;
  typedef __true_type has_trivial_copy_constructor;
  typedef __true_type has_trivial_assignment_operator;
  typedef __true_type has_trivial_destructor;
  typedef __true_type is_POD_type;
};

template <class _Tp>
struct _IsRef {
  typedef __false_type _Ret;
};
# 219 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h"
template <class _Tp> struct _IsPtr {
  typedef __false_type _Ret;
};

template <class _Tp>
struct __type_traits {
   typedef __true_type this_dummy_member_must_be_first;
# 243 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h"
   typedef __false_type has_trivial_default_constructor;
   typedef __false_type has_trivial_copy_constructor;
   typedef __false_type has_trivial_assignment_operator;
   typedef __false_type has_trivial_destructor;
   typedef __false_type is_POD_type;







};


template <class _Tp> struct _IsPtr<_Tp*>
{ typedef __true_type _Ret; };
template <class _Tp> struct _IsRef<_Tp&>
{ typedef __true_type _Ret; };

template <class _Tp> struct __type_traits<_Tp*> : __type_traits_aux<__true_type>
{};
# 284 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h"
template<> struct __type_traits< bool > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const bool > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile bool > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile bool > : __type_traits_aux<__true_type> {};

template<> struct __type_traits< char > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const char > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile char > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile char > : __type_traits_aux<__true_type> {};

template<> struct __type_traits< signed char > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const signed char > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile signed char > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile signed char > : __type_traits_aux<__true_type> {};

template<> struct __type_traits< unsigned char > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const unsigned char > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile unsigned char > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile unsigned char > : __type_traits_aux<__true_type> {};

template<> struct __type_traits< wchar_t > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const wchar_t > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile wchar_t > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile wchar_t > : __type_traits_aux<__true_type> {};


template<> struct __type_traits< short > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const short > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile short > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile short > : __type_traits_aux<__true_type> {};
template<> struct __type_traits< unsigned short > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const unsigned short > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile unsigned short > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile unsigned short > : __type_traits_aux<__true_type> {};
template<> struct __type_traits< int > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const int > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile int > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile int > : __type_traits_aux<__true_type> {};
template<> struct __type_traits< unsigned int > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const unsigned int > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile unsigned int > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile unsigned int > : __type_traits_aux<__true_type> {};
template<> struct __type_traits< long > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const long > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile long > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile long > : __type_traits_aux<__true_type> {};
template<> struct __type_traits< unsigned long > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const unsigned long > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile unsigned long > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile unsigned long > : __type_traits_aux<__true_type> {};






template<> struct __type_traits< float > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const float > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile float > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile float > : __type_traits_aux<__true_type> {};
template<> struct __type_traits< double > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const double > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile double > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile double > : __type_traits_aux<__true_type> {};


template<> struct __type_traits< long double > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const long double > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< volatile long double > : __type_traits_aux<__true_type> {}; template<> struct __type_traits< const volatile long double > : __type_traits_aux<__true_type> {};



template <class _ArePtrs, class _Src, class _Dst>
struct _IsCVConvertibleIf
{ typedef typename _IsCVConvertible<_Src, _Dst>::_Ret _Ret; };

template <class _Src, class _Dst>
struct _IsCVConvertibleIf<__false_type, _Src, _Dst>
{ typedef __false_type _Ret; };
# 352 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h"
template <class _Src, class _Dst>
struct _TrivialNativeTypeCopy {
  typedef typename _IsPtr<_Src>::_Ret _Ptr1;
  typedef typename _IsPtr<_Dst>::_Ret _Ptr2;
  typedef typename _Land2<_Ptr1, _Ptr2>::_Ret _BothPtrs;
  typedef typename _IsCVConvertibleIf<_BothPtrs, _Src, _Dst>::_Ret _Convertible;
  typedef typename _Land2<_BothPtrs, _Convertible>::_Ret _Trivial1;

  typedef typename __bool2type<(sizeof(_Src) == sizeof(_Dst))>::_Ret _SameSize;


  typedef typename _IsIntegral<_Src>::_Ret _Int1;




  typedef typename _IsIntegral<_Dst>::_Ret _Int2;
  typedef typename _Land2<_Int1, _Int2>::_Ret _BothInts;

  typedef typename _IsRational<_Src>::_Ret _Rat1;
  typedef typename _IsRational<_Dst>::_Ret _Rat2;
  typedef typename _Land2<_Rat1, _Rat2>::_Ret _BothRats;

  typedef typename _Lor2<_BothInts, _BothRats>::_Ret _BothNatives;

  typedef typename _Land2<_BothNatives, _SameSize>::_Ret _Trivial2;




  typedef typename _Lor2<_Trivial1, _Trivial2>::_Ret _Ret;
};

template <class _Src, class _Dst>
struct _TrivialCopy {
  typedef typename _TrivialNativeTypeCopy<_Src, _Dst>::_Ret _NativeRet;

  typedef typename __type_traits<_Src>::has_trivial_assignment_operator _Tr1;




  typedef typename _AreCopyable<_Src, _Dst>::_Ret _Tr2;
  typedef typename _Land2<_Tr1, _Tr2>::_Ret _UserRet;
  typedef typename _Lor2<_NativeRet, _UserRet>::_Ret _Ret;
  static _Ret _Answer() { return _Ret(); }
};

template <class _Src, class _Dst>
struct _TrivialUCopy {
  typedef typename _TrivialNativeTypeCopy<_Src, _Dst>::_Ret _NativeRet;

  typedef typename __type_traits<_Src>::has_trivial_copy_constructor _Tr1;




  typedef typename _AreCopyable<_Src, _Dst>::_Ret _Tr2;
  typedef typename _Land2<_Tr1, _Tr2>::_Ret _UserRet;
  typedef typename _Lor2<_NativeRet, _UserRet>::_Ret _Ret;
  static _Ret _Answer() { return _Ret(); }
};

template <class _Tp>
struct _DefaultZeroValue {
  typedef typename _IsIntegral<_Tp>::_Ret _Tr1;
  typedef typename _IsRational<_Tp>::_Ret _Tr2;
  typedef typename _IsPtr<_Tp>::_Ret _Tr3;
  typedef typename _Lor3<_Tr1, _Tr2, _Tr3>::_Ret _Ret;
};

template <class _Tp>
struct _TrivialInit {

  typedef typename __type_traits<_Tp>::has_trivial_default_constructor _Tr1;




  typedef typename _DefaultZeroValue<_Tp>::_Ret _Tr2;
  typedef typename _Not<_Tr2>::_Ret _Tr3;
  typedef typename _Land2<_Tr1, _Tr3>::_Ret _Ret;
  static _Ret _Answer() { return _Ret(); }
};



template <class _Tp>
struct _IsPtrType {
  typedef typename _IsPtr<_Tp>::_Ret _Type;
  static _Type _Ret() { return _Type(); }
};

template <class _Tp>
struct _IsRefType {
  typedef typename _IsRef<_Tp>::_Ret _Type;
  static _Type _Ret() { return _Type();}
};

template <class _Tp>
struct __call_traits {
# 461 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h"
  typedef const _Tp& const_param_type;
  typedef _Tp& param_type;

};


template <class _Tp>
struct __call_traits<_Tp&> {
  typedef _Tp& param_type;
  typedef const _Tp& const_param_type;
};
template <class _Tp>
struct __call_traits<const _Tp&> {
  typedef _Tp& param_type;
  typedef const _Tp& const_param_type;
};


template <class _Tp1, class _Tp2>
struct _BothPtrType {
  typedef typename _IsPtr<_Tp1>::_Ret _IsPtr1;
  typedef typename _IsPtr<_Tp2>::_Ret _IsPtr2;

  typedef typename _Land2<_IsPtr1, _IsPtr2>::_Ret _Ret;
  static _Ret _Answer() { return _Ret(); }
};

template <class _Tp1, class _Tp2, class _IsRef1, class _IsRef2>
struct _OKToSwap {
  typedef typename _AreSameTypes<_Tp1, _Tp2>::_Ret _Same;
  typedef typename _Land3<_Same, _IsRef1, _IsRef2>::_Ret _Type;
  static _Type _Answer() { return _Type(); }
};

template <class _Tp1, class _Tp2, class _IsRef1, class _IsRef2>
inline _OKToSwap<_Tp1, _Tp2, _IsRef1, _IsRef2>
_IsOKToSwap(_Tp1*, _Tp2*, const _IsRef1&, const _IsRef2&)
{ return _OKToSwap<_Tp1, _Tp2, _IsRef1, _IsRef2>(); }

template <class _Src, class _Dst>
inline _TrivialCopy<_Src, _Dst> _UseTrivialCopy(_Src*, _Dst*)
{ return _TrivialCopy<_Src, _Dst>(); }

template <class _Src, class _Dst>
inline _TrivialUCopy<_Src, _Dst> _UseTrivialUCopy(_Src*, _Dst*)
{ return _TrivialUCopy<_Src, _Dst>(); }



struct _NegativeAnswer {
  typedef __false_type _Ret;
  static _Ret _Answer() { return _Ret(); }
};

template <class _Src, class _Dst>
inline _NegativeAnswer _UseTrivialCopy(_Src*, const _Dst*)
{ return _NegativeAnswer(); }

template <class _Src, class _Dst>
inline _NegativeAnswer _UseTrivialCopy(_Src*, volatile _Dst*)
{ return _NegativeAnswer(); }

template <class _Src, class _Dst>
inline _NegativeAnswer _UseTrivialCopy(_Src*, const volatile _Dst*)
{ return _NegativeAnswer(); }

template <class _Src, class _Dst>
inline _NegativeAnswer _UseTrivialUCopy(_Src*, const _Dst*)
{ return _NegativeAnswer(); }

template <class _Src, class _Dst>
inline _NegativeAnswer _UseTrivialUCopy(_Src*, volatile _Dst*)
{ return _NegativeAnswer(); }

template <class _Src, class _Dst>
inline _NegativeAnswer _UseTrivialUCopy(_Src*, const volatile _Dst*)
{ return _NegativeAnswer(); }


template <class _Tp>
inline _TrivialInit<_Tp> _UseTrivialInit(_Tp*)
{ return _TrivialInit<_Tp>(); }

template <class _Tp>
struct _IsPOD {
  typedef typename __type_traits<_Tp>::is_POD_type _Type;
  static _Type _Answer() { return _Type(); }
};

template <class _Tp>
inline _IsPOD<_Tp> _Is_POD(_Tp*)
{ return _IsPOD<_Tp>(); }

template <class _Tp>
struct _DefaultZeroValueQuestion {
  typedef typename _DefaultZeroValue<_Tp>::_Ret _Ret;
  static _Ret _Answer() { return _Ret(); }
};

template <class _Tp>
inline _DefaultZeroValueQuestion<_Tp> _HasDefaultZeroValue(_Tp*)
{ return _DefaultZeroValueQuestion<_Tp>(); }







template <class _Tp>
struct __stlport_class
{ typedef _Tp _Type; };

template <class _Tp>
struct _IsSTLportClass {
  typedef typename _IsConvertible<_Tp, __stlport_class<_Tp> >::_Ret _Ret;



};
# 592 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/type_traits.h"
template <class _Tp>
class _TpWithState : private _Tp {
  _TpWithState();
  int _state;
};



template <class _Tp>
struct _IsStateless {
  enum { _Is = sizeof(_TpWithState<_Tp>) == sizeof(int) };
  typedef typename __bool2type<_Is>::_Ret _Ret;
};

}
# 37 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_pair.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_move_construct_fwk.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_move_construct_fwk.h"
namespace std {
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_move_construct_fwk.h"
template <class _Tp>
class __move_source {
public:
  explicit __move_source (_Tp &_src) : _M_data(_src)
  {}

  _Tp& get() const
  { return _M_data; }
private:
  _Tp &_M_data;


  typedef __move_source<_Tp> _Self;
  _Self& operator = (_Self const&);
};


template <class _Tp>
struct __move_traits {
# 63 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_move_construct_fwk.h"
  typedef __false_type implemented;
# 73 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_move_construct_fwk.h"
  typedef typename __type_traits<_Tp>::has_trivial_destructor complete;

};

namespace priv {







template <class _Tp>
struct _MoveSourceTraits {
  typedef typename __move_traits<_Tp>::implemented _MvImpRet;



  enum {_MvImp = __type2bool<_MvImpRet>::_Ret};
  typedef typename __select<_MvImp,

                            __move_source<_Tp>,
                            _Tp const&>::_Ret _Type;
};


template <class _Tp>
inline typename _MoveSourceTraits<_Tp>::_Type
_AsMoveSource (_Tp &src) {
  typedef typename _MoveSourceTraits<_Tp>::_Type _SrcType;
  return _SrcType(src);
}


template <class _Tp>
struct __move_traits_aux {
  typedef typename __move_traits<_Tp>::implemented implemented;
  typedef typename __move_traits<_Tp>::complete complete;
};

template <class _Tp1, class _Tp2>
struct __move_traits_aux2 {
  typedef __move_traits<_Tp1> _MoveTraits1;
  typedef __move_traits<_Tp2> _MoveTraits2;

  typedef typename _Lor2<typename _MoveTraits1::implemented,
                         typename _MoveTraits2::implemented>::_Ret implemented;
  typedef typename _Land2<typename _MoveTraits1::complete,
                          typename _MoveTraits2::complete>::_Ret complete;
};





template <class _Tp>
struct __move_traits_help {
  typedef __true_type implemented;
  typedef typename __move_traits<_Tp>::complete complete;
};

template <class _Tp1, class _Tp2>
struct __move_traits_help1 {
  typedef __move_traits<_Tp1> _MoveTraits1;
  typedef __move_traits<_Tp2> _MoveTraits2;

  typedef typename _Lor2<typename _MoveTraits1::implemented,
                         typename _MoveTraits2::implemented>::_Ret implemented;
  typedef typename _Land2<typename _MoveTraits1::complete,
                          typename _MoveTraits2::complete>::_Ret complete;
};

template <class _Tp1, class _Tp2>
struct __move_traits_help2 {
  typedef __move_traits<_Tp1> _MoveTraits1;
  typedef __move_traits<_Tp2> _MoveTraits2;

  typedef __true_type implemented;
  typedef typename _Land2<typename _MoveTraits1::complete,
                          typename _MoveTraits2::complete>::_Ret complete;
};

}

}
# 41 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_pair.h" 2



namespace std {





template <class _T1, class _T2>
struct pair {
  typedef _T1 first_type;
  typedef _T2 second_type;

  _T1 first;
  _T2 second;



  pair() : first(_T1()), second(_T2()) {}

  pair(const _T1& __a, const _T2& __b) : first(__a), second(__b) {}


  template <class _U1, class _U2>
  pair(const pair<_U1, _U2>& __p) : first(__p.first), second(__p.second) {}

  pair(const pair<_T1,_T2>& __o) : first(__o.first), second(__o.second) {}



  pair(__move_source<pair<_T1, _T2> > src) : first(::std::priv:: _AsMoveSource(src.get().first)),
                                             second(::std::priv:: _AsMoveSource(src.get().second))
  {}


 
};

template <class _T1, class _T2>
inline bool operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
{ return __x.first == __y.first && __x.second == __y.second; }

template <class _T1, class _T2>
inline bool operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y) {
  return __x.first < __y.first ||
         (!(__y.first < __x.first) && __x.second < __y.second);
}


template <class _T1, class _T2>
inline bool operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
{ return !(__x == __y); }

template <class _T1, class _T2>
inline bool operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
{ return __y < __x; }

template <class _T1, class _T2>
inline bool operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
{ return !(__y < __x); }

template <class _T1, class _T2>
inline bool operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
{ return !(__x < __y); }



template <class _T1, class _T2, int _Sz>
inline pair<_T1, _T2 const*> make_pair(_T1 const& __x,
                                       _T2 const (&__y)[_Sz])
{ return pair<_T1, _T2 const*>(__x, static_cast<_T2 const*>(__y)); }

template <class _T1, class _T2, int _Sz>
inline pair<_T1 const*, _T2> make_pair(_T1 const (&__x)[_Sz],
                                       _T2 const& __y)
{ return pair<_T1 const*, _T2>(static_cast<_T1 const*>(__x), __y); }

template <class _T1, class _T2, int _Sz1, int _Sz2>
inline pair<_T1 const*, _T2 const*> make_pair(_T1 const (&__x)[_Sz1],
                                              _T2 const (&__y)[_Sz2]) {
  return pair<_T1 const*, _T2 const*>(static_cast<_T1 const*>(__x),
                                      static_cast<_T2 const*>(__y));
}


template <class _T1, class _T2>
inline pair<_T1, _T2> make_pair(_T1 __x, _T2 __y)
{ return pair<_T1, _T2>(__x, __y); }

}


namespace std { namespace rel_ops {

template <class _Tp>
inline bool operator!=(const _Tp& __x, const _Tp& __y)
{ return !(__x == __y); }

template <class _Tp>
inline bool operator>(const _Tp& __x, const _Tp& __y)
{ return __y < __x; }

template <class _Tp>
inline bool operator<=(const _Tp& __x, const _Tp& __y)
{ return !(__y < __x); }

template <class _Tp>
inline bool operator>=(const _Tp& __x, const _Tp& __y)
{ return !(__x < __y); }

} }



namespace std {

template <class _T1, class _T2>
struct __type_traits<pair<_T1, _T2> > {
  typedef __type_traits<_T1> _T1Traits;
  typedef __type_traits<_T2> _T2Traits;
  typedef typename _Land2<typename _T1Traits::has_trivial_default_constructor,
                          typename _T2Traits::has_trivial_default_constructor>::_Ret has_trivial_default_constructor;
  typedef typename _Land2<typename _T1Traits::has_trivial_copy_constructor,
                          typename _T2Traits::has_trivial_copy_constructor>::_Ret has_trivial_copy_constructor;
  typedef typename _Land2<typename _T1Traits::has_trivial_assignment_operator,
                          typename _T2Traits::has_trivial_assignment_operator>::_Ret has_trivial_assignment_operator;
  typedef typename _Land2<typename _T1Traits::has_trivial_destructor,
                          typename _T2Traits::has_trivial_destructor>::_Ret has_trivial_destructor;
  typedef __false_type is_POD_type;
};


template <class _T1, class _T2>
struct __move_traits<pair<_T1, _T2> >
  : ::std::priv:: __move_traits_help1<_T1, _T2> {};


}
# 51 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h" 1
# 49 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h"
namespace std {

struct input_iterator_tag {};
struct output_iterator_tag {};
struct forward_iterator_tag : public input_iterator_tag {};
struct bidirectional_iterator_tag : public forward_iterator_tag {};
struct random_access_iterator_tag : public bidirectional_iterator_tag {};

template <class _Category, class _Tp, class _Distance = ptrdiff_t,
          class _Pointer = _Tp*, class _Reference = _Tp& >
struct iterator {
  typedef _Category iterator_category;
  typedef _Tp value_type;
  typedef _Distance difference_type;
  typedef _Pointer pointer;
  typedef _Reference reference;
};
template<>
struct iterator<output_iterator_tag, void, void, void, void> {
  typedef output_iterator_tag iterator_category;

  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;

};
# 146 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h"
template <class _Iterator>
struct iterator_traits {
  typedef typename _Iterator::iterator_category iterator_category;

  typedef typename _Iterator::value_type value_type;
  typedef typename _Iterator::difference_type difference_type;
  typedef typename _Iterator::pointer pointer;
  typedef typename _Iterator::reference reference;
};
# 165 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h"
template <class _Tp>
struct iterator_traits<const _Tp*> {
  typedef random_access_iterator_tag iterator_category;
  typedef _Tp value_type;
  typedef ptrdiff_t difference_type;
  typedef const _Tp* pointer;
  typedef const _Tp& reference;
};

template <class _Tp>
struct iterator_traits<_Tp*> {
  typedef random_access_iterator_tag iterator_category;
  typedef _Tp value_type;
  typedef ptrdiff_t difference_type;
  typedef _Tp* pointer;
  typedef _Tp& reference;
};
# 196 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h"
}
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ptrs_specialize.h" 1
# 198 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h" 2
namespace std {
# 267 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h"
template <class _Tp, class _Distance> struct input_iterator :
  public iterator <input_iterator_tag, _Tp, _Distance, _Tp*, _Tp&> {};
struct output_iterator : public iterator <output_iterator_tag, void, void, void, void> {};
template <class _Tp, class _Distance> struct forward_iterator :
  public iterator<forward_iterator_tag, _Tp, _Distance, _Tp*, _Tp&> {};
template <class _Tp, class _Distance> struct bidirectional_iterator :
  public iterator<bidirectional_iterator_tag, _Tp, _Distance, _Tp*, _Tp&> {};
template <class _Tp, class _Distance> struct random_access_iterator :
  public iterator<random_access_iterator_tag, _Tp, _Distance, _Tp*, _Tp&> {};
# 311 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h"
namespace priv {

template <class _InputIterator>
inline typename iterator_traits<_InputIterator>::difference_type
__distance(const _InputIterator& __first, const _InputIterator& __last,
           const input_iterator_tag &) {
  typename iterator_traits<_InputIterator>::difference_type __n = 0;
  _InputIterator __it(__first);
  while (__it != __last) {
    ++__it; ++__n;
  }
  return __n;
}
# 351 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h"
template <class _RandomAccessIterator>
inline typename iterator_traits<_RandomAccessIterator>::difference_type
__distance(const _RandomAccessIterator& __first, const _RandomAccessIterator& __last,
           const random_access_iterator_tag &)
{ return __last - __first; }

}

template <class _InputIterator>
inline typename iterator_traits<_InputIterator>::difference_type
distance(_InputIterator __first, _InputIterator __last)
{ return ::std::priv:: __distance(__first, __last, typename ::std::iterator_traits< _InputIterator >::iterator_category()); }


template <class _InputIterator, class _Distance>
inline void distance(const _InputIterator& __first,
                                const _InputIterator& __last, _Distance& __n)
{ __n += ::std::distance(__first, __last); }
# 380 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h"
template <class _Tp>
struct _Nonconst_traits;

template <class _Tp>
struct _Const_traits {
  typedef _Tp value_type;
  typedef const _Tp& reference;
  typedef const _Tp* pointer;
  typedef _Const_traits<_Tp> _ConstTraits;
  typedef _Nonconst_traits<_Tp> _NonConstTraits;
};

template <class _Tp>
struct _Nonconst_traits {
  typedef _Tp value_type;
  typedef _Tp& reference;
  typedef _Tp* pointer;
  typedef _Const_traits<_Tp> _ConstTraits;
  typedef _Nonconst_traits<_Tp> _NonConstTraits;
};





template <class _Tp>
struct _Nonconst_Const_traits;

template <class _Tp>
struct _Const_Const_traits {
  typedef _Tp value_type;
  typedef const _Tp& reference;
  typedef const _Tp* pointer;
  typedef _Const_Const_traits<_Tp> _ConstTraits;
  typedef _Nonconst_Const_traits<_Tp> _NonConstTraits;
};

template <class _Tp>
struct _Nonconst_Const_traits {
  typedef _Tp value_type;
  typedef const _Tp& reference;
  typedef const _Tp* pointer;
  typedef _Const_Const_traits<_Tp> _ConstTraits;
  typedef _Nonconst_Const_traits<_Tp> _NonConstTraits;
};
# 476 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h"
namespace priv {

template <class _InputIter, class _Distance>
inline void
__advance(_InputIter& __i, _Distance __n, const input_iterator_tag &)
{ while (__n--) ++__i; }


template <class _InputIter, class _Distance>
inline void
__advance(_InputIter& __i, _Distance __n, const output_iterator_tag &)
{ while (__n--) ++__i; }
# 496 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator_base.h"
template <class _BidirectionalIterator, class _Distance>
inline void
__advance(_BidirectionalIterator& __i, _Distance __n,
          const bidirectional_iterator_tag &) {
  if (__n > 0)
    while (__n--) ++__i;
  else
    while (__n++) --__i;
}

template <class _RandomAccessIterator, class _Distance>
inline void
__advance(_RandomAccessIterator& __i, _Distance __n,
          const random_access_iterator_tag &)
{ __i += __n; }

}

template <class _InputIterator, class _Distance>
inline void advance(_InputIterator& __i, _Distance __n)
{ ::std::priv:: __advance(__i, __n, typename ::std::iterator_traits< _InputIterator >::iterator_category()); }

}
# 55 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h" 2






namespace std {
# 80 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
template <class _Tp>
inline void swap(_Tp& __a, _Tp& __b) {
# 91 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
  _Tp __tmp = __a;
  __a = __b;
  __b = __tmp;

}

namespace priv {

template <class _ForwardIter1, class _ForwardIter2, class _Value>
inline void __iter_swap_aux_aux(_ForwardIter1& __i1, _ForwardIter2& __i2, _Value *) {
  _Value tmp = *__i1;
  *__i1 = *__i2;
  *__i2 = tmp;
}

template <class _ForwardIter1, class _ForwardIter2>
inline void __iter_swap_aux(_ForwardIter1& __i1, _ForwardIter2& __i2, const __true_type& ) {

                  swap(*__i1, *__i2);
}

template <class _ForwardIter1, class _ForwardIter2>
inline void __iter_swap_aux(_ForwardIter1& __i1, _ForwardIter2& __i2, const __false_type& ) {
  ::std::priv:: __iter_swap_aux_aux( __i1, __i2, (typename ::std::iterator_traits< _ForwardIter1 >::value_type*)0 );
}

}

template <class _ForwardIter1, class _ForwardIter2>
inline void iter_swap(_ForwardIter1 __i1, _ForwardIter2 __i2) {
  ::std::priv:: __iter_swap_aux( __i1, __i2, _IsOKToSwap((typename ::std::iterator_traits< _ForwardIter1 >::value_type*)0, (typename ::std::iterator_traits< _ForwardIter2 >::value_type*)0,
                                                      ::std::_IsRefType< typename ::std::iterator_traits< _ForwardIter1 >::reference >::_Ret(),
                                                      ::std::_IsRefType< typename ::std::iterator_traits< _ForwardIter2 >::reference >::_Ret())._Answer());
}
# 138 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
template <class _Tp>
inline const _Tp& (min)(const _Tp& __a, const _Tp& __b) { return __b < __a ? __b : __a; }
template <class _Tp>
inline const _Tp& (max)(const _Tp& __a, const _Tp& __b) { return __a < __b ? __b : __a; }
# 151 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
template <class _Tp, class _Compare>
inline const _Tp& (min)(const _Tp& __a, const _Tp& __b, _Compare __comp) {
  return __comp(__b, __a) ? __b : __a;
}

template <class _Tp, class _Compare>
inline const _Tp& (max)(const _Tp& __a, const _Tp& __b, _Compare __comp) {
  return __comp(__a, __b) ? __b : __a;
}
# 181 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
namespace priv {

template <class _InputIter, class _OutputIter, class _Distance>
inline _OutputIter __copy(_InputIter __first, _InputIter __last,
                          _OutputIter __result, const input_iterator_tag &, _Distance*) {
  for ( ; __first != __last; ++__result, ++__first)
    *__result = *__first;
  return __result;
}
# 209 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
template <class _RandomAccessIter, class _OutputIter, class _Distance>
inline _OutputIter
__copy(_RandomAccessIter __first, _RandomAccessIter __last,
       _OutputIter __result, const random_access_iterator_tag &, _Distance*) {
  for (_Distance __n = __last - __first; __n > 0; --__n) {
    *__result = *__first;
    ++__first;
    ++__result;
  }
  return __result;
}

inline void*
__copy_trivial(const void* __first, const void* __last, void* __result) {
  size_t __n = (const char*)__last - (const char*)__first;
  return __n ? (void *)((char*)memmove(__result, __first, __n) + __n) : __result;
}




template <class _BidirectionalIter1, class _BidirectionalIter2,
          class _Distance>
inline _BidirectionalIter2 __copy_backward(_BidirectionalIter1 __first,
                                           _BidirectionalIter1 __last,
                                           _BidirectionalIter2 __result,
                                           const bidirectional_iterator_tag &,
                                           _Distance*) {
  while (__first != __last)
    *--__result = *--__last;
  return __result;
}

template <class _RandomAccessIter, class _BidirectionalIter, class _Distance>
inline _BidirectionalIter __copy_backward(_RandomAccessIter __first,
                                          _RandomAccessIter __last,
                                          _BidirectionalIter __result,
                                          const random_access_iterator_tag &,
                                          _Distance*) {
  for (_Distance __n = __last - __first; __n > 0; --__n)
    *--__result = *--__last;
  return __result;
}

inline void*
__copy_trivial_backward(const void* __first, const void* __last, void* __result) {
  const ptrdiff_t _Num = (const char*)__last - (const char*)__first;
  return (_Num > 0) ? memmove((char*)__result - _Num, __first, _Num) : __result ;
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_ptrs(_InputIter __first, _InputIter __last, _OutputIter __result,
                               const __false_type& ) {
  return ::std::priv:: __copy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0);
}
template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_ptrs(_InputIter __first, _InputIter __last, _OutputIter __result,
                               const __true_type& ) {


  return (_OutputIter)::std::priv:: __copy_trivial(__first, __last, __result);
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_aux(_InputIter __first, _InputIter __last, _OutputIter __result,
                              const __true_type& ) {
  return ::std::priv:: __copy_ptrs(__first, __last, __result,
                                _UseTrivialCopy((typename ::std::iterator_traits< _InputIter >::value_type*)0,
                                                (typename ::std::iterator_traits< _OutputIter >::value_type*)0)._Answer());
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_aux(_InputIter __first, _InputIter __last, _OutputIter __result,
                              const __false_type& ) {
  return ::std::priv:: __copy(__first, __last, __result,
                           typename ::std::iterator_traits< _InputIter >::iterator_category(),
                           (typename ::std::iterator_traits< _InputIter >::difference_type*)0);
}

}

template <class _InputIter, class _OutputIter>
inline _OutputIter copy(_InputIter __first, _InputIter __last, _OutputIter __result) {
 
  return ::std::priv:: __copy_aux(__first, __last, __result, _BothPtrType< _InputIter, _OutputIter>::_Answer());
}

namespace priv {

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_backward_ptrs(_InputIter __first, _InputIter __last,
                                        _OutputIter __result, const __false_type& ) {
  return ::std::priv:: __copy_backward(__first, __last, __result,
                                    typename ::std::iterator_traits< _InputIter >::iterator_category(),
                                    (typename ::std::iterator_traits< _InputIter >::difference_type*)0);
}
template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_backward_ptrs(_InputIter __first, _InputIter __last,
                                        _OutputIter __result, const __true_type& ) {
  return (_OutputIter)::std::priv:: __copy_trivial_backward(__first, __last, __result);
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_backward_aux(_InputIter __first, _InputIter __last, _OutputIter __result, const __false_type&) {
  return ::std::priv:: __copy_backward(__first, __last, __result,
                                    typename ::std::iterator_traits< _InputIter >::iterator_category(),
                                    (typename ::std::iterator_traits< _InputIter >::difference_type*)0);
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __copy_backward_aux(_InputIter __first, _InputIter __last, _OutputIter __result, const __true_type&) {
  return ::std::priv:: __copy_backward_ptrs(__first, __last, __result,
                                         _UseTrivialCopy((typename ::std::iterator_traits< _InputIter >::value_type*)0,
                                                         (typename ::std::iterator_traits< _OutputIter >::value_type*)0)._Answer());
}

}

template <class _InputIter, class _OutputIter>
inline _OutputIter copy_backward(_InputIter __first, _InputIter __last, _OutputIter __result) {
 
  return ::std::priv:: __copy_backward_aux(__first, __last, __result, _BothPtrType< _InputIter, _OutputIter>::_Answer() );
}
# 373 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
namespace priv {

template <class _InputIter, class _Size, class _OutputIter>
inline ::std::pair<_InputIter, _OutputIter>
__copy_n(_InputIter __first, _Size __count, _OutputIter __result,
         const input_iterator_tag &) {
  for ( ; __count > 0; --__count) {
    *__result = *__first;
    ++__first;
    ++__result;
  }
  return ::std::pair<_InputIter, _OutputIter>(__first, __result);
}

template <class _RAIter, class _Size, class _OutputIter>
inline ::std::pair<_RAIter, _OutputIter>
__copy_n(_RAIter __first, _Size __count, _OutputIter __result,
         const random_access_iterator_tag &) {
  _RAIter __last = __first + __count;
  return ::std::pair<_RAIter, _OutputIter>(__last, ::std::copy(__first, __last, __result));
}

}

template <class _InputIter, class _Size, class _OutputIter>
inline pair<_InputIter, _OutputIter>
copy_n(_InputIter __first, _Size __count, _OutputIter __result) {
 
  return ::std::priv:: __copy_n(__first, __count, __result, typename ::std::iterator_traits< _InputIter >::iterator_category());
}




namespace priv {

template <class _ForwardIter, class _Tp>
inline
void __fill_fwd(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {
  for ( ; __first != __last; ++__first)
    *__first = __val;
}

template <class _ForwardIter, class _Tp, class _Distance>
inline void __fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,
                   const input_iterator_tag &, _Distance*) {
  ::std::priv:: __fill_fwd(__first, __last, __val);
}
# 438 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
template <class _RandomAccessIter, class _Tp, class _Distance>
inline
void __fill(_RandomAccessIter __first, _RandomAccessIter __last, const _Tp& __val,
            const random_access_iterator_tag &, _Distance*) {
  for (_Distance __n = __last - __first ; __n > 0; ++__first, --__n)
    *__first = __val;
}

}

template <class _ForwardIter, class _Tp>
inline void fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __val) {
 
  ::std::priv:: __fill(__first, __last, __val,
                    typename ::std::iterator_traits< _ForwardIter >::iterator_category(),
                    (typename ::std::iterator_traits< _ForwardIter >::difference_type*)0);
}


inline void fill(unsigned char* __first, unsigned char* __last,
                 const unsigned char& __val) {
  unsigned char __tmp = __val;
  memset(__first, __tmp, __last - __first);
}

inline void fill(signed char* __first, signed char* __last,
                 const signed char& __val) {
  signed char __tmp = __val;
  memset(__first, static_cast<unsigned char>(__tmp), __last - __first);
}

inline void fill(char* __first, char* __last, const char& __val) {
  char __tmp = __val;
  memset(__first, static_cast<unsigned char>(__tmp), __last - __first);
}

namespace priv {

template <class _OutputIter, class _Size, class _Tp>
inline
_OutputIter __fill_n(_OutputIter __first, _Size __n, const _Tp& __val) {
 
  for ( ; __n > 0; --__n, ++__first)
    *__first = __val;
  return __first;
}


template <class _Size>
inline unsigned char* __fill_n(unsigned char* __first, _Size __n,
                               const unsigned char& __val) {
  ::std::fill(__first, __first + __n, __val);
  return __first + __n;
}

template <class _Size>
inline signed char* __fill_n(signed char* __first, _Size __n,
                             const signed char& __val) {
  ::std::fill(__first, __first + __n, __val);
  return __first + __n;
}

template <class _Size>
inline char* __fill_n(char* __first, _Size __n,
                      const char& __val) {
  ::std::fill(__first, __first + __n, __val);
  return __first + __n;
}


}

template <class _OutputIter, class _Size, class _Tp>
inline void fill_n(_OutputIter __first, _Size __n, const _Tp& __val) {
 
  ::std::priv:: __fill_n(__first, __n, __val);
}





template <class _InputIter1, class _InputIter2>
inline
::std::pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,
                                                   _InputIter1 __last1,
                                                   _InputIter2 __first2) {
 
 
  while (__first1 != __last1 && *__first1 == *__first2) {
    ++__first1;
    ++__first2;
  }
  return ::std::pair<_InputIter1, _InputIter2>(__first1, __first2);
}

template <class _InputIter1, class _InputIter2, class _BinaryPredicate>
inline
::std::pair<_InputIter1, _InputIter2> mismatch(_InputIter1 __first1,
                                                   _InputIter1 __last1,
                                                   _InputIter2 __first2,
                                                   _BinaryPredicate __binary_pred) {
 
 
  while (__first1 != __last1 && __binary_pred(*__first1, *__first2)) {
    ++__first1;
    ++__first2;
  }
  return ::std::pair<_InputIter1, _InputIter2>(__first1, __first2);
}

template <class _InputIter1, class _InputIter2>
inline
bool equal(_InputIter1 __first1, _InputIter1 __last1,
           _InputIter2 __first2) {
 
 
  for ( ; __first1 != __last1; ++__first1, ++__first2)
    if (!(*__first1 == *__first2))
      return false;
  return true;
}

template <class _InputIter1, class _InputIter2, class _BinaryPredicate>
inline
bool equal(_InputIter1 __first1, _InputIter1 __last1,
           _InputIter2 __first2, _BinaryPredicate __binary_pred) {
 
 
  for ( ; __first1 != __last1; ++__first1, ++__first2)
    if (!__binary_pred(*__first1, *__first2))
      return false;
  return true;
}





template <class _InputIter1, class _InputIter2>
bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,
                             _InputIter2 __first2, _InputIter2 __last2);

template <class _InputIter1, class _InputIter2, class _Compare>
bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,
                             _InputIter2 __first2, _InputIter2 __last2,
                             _Compare __comp);

inline bool
lexicographical_compare(const unsigned char* __first1,
                        const unsigned char* __last1,
                        const unsigned char* __first2,
                        const unsigned char* __last2) {
  const size_t __len1 = __last1 - __first1;
  const size_t __len2 = __last2 - __first2;
 
 

  const int __result = memcmp(__first1, __first2, (min) (__len1, __len2));
  return __result != 0 ? (__result < 0) : (__len1 < __len2);
}
# 614 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
namespace priv {

template <class _InputIter1, class _InputIter2>
int __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,
                                   _InputIter2 __first2, _InputIter2 __last2);

inline int
__lexicographical_compare_3way(const unsigned char* __first1,
                               const unsigned char* __last1,
                               const unsigned char* __first2,
                               const unsigned char* __last2) {
  const ptrdiff_t __len1 = __last1 - __first1;
  const ptrdiff_t __len2 = __last2 - __first2;
  const int __result = memcmp(__first1, __first2, (min) (__len1, __len2));
  return __result != 0 ? (__result > 0 ? 1 : -1 )
                       : (__len1 == __len2 ? 0 : (__len1 < __len2 ? -1 : 1));
}
# 644 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h"
}


template <class _InputIter1, class _InputIter2>
int lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,
                                 _InputIter2 __first2, _InputIter2 __last2);




template <class _InputIter, class _Tp>
inline typename iterator_traits<_InputIter>::difference_type
count(_InputIter __first, _InputIter __last, const _Tp& __val) {
 
  typename iterator_traits<_InputIter>::difference_type __n = 0;
  for ( ; __first != __last; ++__first)
    if (*__first == __val)
      ++__n;
  return __n;
}


template <class _InputIter, class _Tp>
_InputIter find(_InputIter __first, _InputIter __last, const _Tp& __val);

template <class _InputIter, class _Predicate>
_InputIter find_if(_InputIter __first, _InputIter __last, _Predicate __pred);


template <class _ForwardIter1, class _ForwardIter2, class _BinaryPred>
_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,
                     _ForwardIter2 __first2, _ForwardIter2 __last2, _BinaryPred __predicate);

namespace priv {


template <class _InputIter, class _ForwardIter>
_InputIter __find_first_of(_InputIter __first1, _InputIter __last1,
                           _ForwardIter __first2, _ForwardIter __last2);

template <class _InputIter, class _ForwardIter, class _BinaryPredicate>
_InputIter __find_first_of(_InputIter __first1, _InputIter __last1,
                           _ForwardIter __first2, _ForwardIter __last2,
                           _BinaryPredicate __comp);

}

template <class _ForwardIter1, class _ForwardIter2,
          class _BinaryPredicate>
_ForwardIter1
find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,
         _ForwardIter2 __first2, _ForwardIter2 __last2,
         _BinaryPredicate __comp);


template <class _ForwardIter, class _Tp>
inline void
replace(_ForwardIter __first, _ForwardIter __last,
        const _Tp& __old_value, const _Tp& __new_value) {
 
  for ( ; __first != __last; ++__first)
    if (*__first == __old_value)
      *__first = __new_value;
}

namespace priv {

template <class _ForwardIter, class _Tp, class _Compare1, class _Compare2, class _Distance>
_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last,
                           const _Tp& __val, _Compare1 __comp1, _Compare2 __comp2, _Distance*);

}

}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.c" 1
# 33 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.c"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function_base.h" 1
# 37 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function_base.h"
namespace std {

template <class _Arg, class _Result>
struct unary_function {
  typedef _Arg argument_type;
  typedef _Result result_type;

protected:



  ~unary_function() {}

};

template <class _Arg1, class _Arg2, class _Result>
struct binary_function {
  typedef _Arg1 first_argument_type;
  typedef _Arg2 second_argument_type;
  typedef _Result result_type;

protected:

  ~binary_function() {}

};

template <class _Tp>
struct equal_to : public binary_function<_Tp, _Tp, bool> {
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x == __y; }
};

template <class _Tp>
struct less : public binary_function<_Tp,_Tp,bool>





              , public __stlport_class<less<_Tp> >

{
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x < __y; }




};


template <class _Tp>
struct __type_traits<less<_Tp> > {

  typedef typename _IsSTLportClass<less<_Tp> >::_Ret _STLportLess;




  typedef _STLportLess has_trivial_default_constructor;
  typedef _STLportLess has_trivial_copy_constructor;
  typedef _STLportLess has_trivial_assignment_operator;
  typedef _STLportLess has_trivial_destructor;
  typedef _STLportLess is_POD_type;
};


namespace priv {

template <class _Tp>
less<_Tp> __less(_Tp* ) { return less<_Tp>(); }

template <class _Tp>
equal_to<_Tp> __equal_to(_Tp* ) { return equal_to<_Tp>(); }

}

template <class _Tp>
struct plus : public binary_function<_Tp, _Tp, _Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x + __y; }
};

template <class _Tp>
struct minus : public binary_function<_Tp, _Tp, _Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x - __y; }
};

namespace priv {

template <class _Tp>
plus<_Tp> __plus(_Tp* ) { return plus<_Tp>(); }

template <class _Tp>
minus<_Tp> __minus(_Tp* ) { return minus<_Tp>(); }

}

template <class _Tp>
struct multiplies : public binary_function<_Tp, _Tp, _Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x * __y; }
};

namespace priv {

template <class _Pair>
struct _Select1st : public unary_function<_Pair, typename _Pair::first_type> {
  const typename _Pair::first_type& operator()(const _Pair& __x) const {
    return __x.first;
  }
};

template <class _Pair>
struct _Select2nd : public unary_function<_Pair, typename _Pair::second_type> {
  const typename _Pair::second_type& operator()(const _Pair& __x) const {
    return __x.second;
  }
};


template <class _Arg1, class _Arg2>
struct _Project1st : public binary_function<_Arg1, _Arg2, _Arg1> {
  _Arg1 operator()(const _Arg1& __x, const _Arg2&) const { return __x; }
};

template <class _Arg1, class _Arg2>
struct _Project2nd : public binary_function<_Arg1, _Arg2, _Arg2> {
  _Arg2 operator()(const _Arg1&, const _Arg2& __y) const { return __y; }
};
# 177 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function_base.h"
template <class _Tp>
struct _Identity : public unary_function<_Tp,_Tp> {
  const _Tp& operator()(const _Tp& __x) const { return __x; }
};

template <class _Result, class _Argument>
struct _Constant_unary_fun {
  typedef _Argument argument_type;
  typedef _Result result_type;
  result_type _M_val;

  _Constant_unary_fun(const result_type& __v) : _M_val(__v) {}
  const result_type& operator()(const _Argument&) const { return _M_val; }
};

template <class _Result, class _Arg1, class _Arg2>
struct _Constant_binary_fun {
  typedef _Arg1 first_argument_type;
  typedef _Arg2 second_argument_type;
  typedef _Result result_type;
  _Result _M_val;

  _Constant_binary_fun(const _Result& __v) : _M_val(__v) {}
  const result_type& operator()(const _Arg1&, const _Arg2&) const {
    return _M_val;
  }
};


template <class _Tp> inline _Tp __identity_element(plus<_Tp>) { return _Tp(0); }
template <class _Tp> inline _Tp __identity_element(multiplies<_Tp>) { return _Tp(1); }

}

}
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.c" 2


namespace std {

template <class _InputIter1, class _InputIter2>
bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,
                             _InputIter2 __first2, _InputIter2 __last2) {
 
 
  for ( ; __first1 != __last1 && __first2 != __last2
        ; ++__first1, ++__first2) {
    if (*__first1 < *__first2) {
     
      return true;
    }
    if (*__first2 < *__first1)
      return false;
  }
  return __first1 == __last1 && __first2 != __last2;
}

template <class _InputIter1, class _InputIter2, class _Compare>
bool lexicographical_compare(_InputIter1 __first1, _InputIter1 __last1,
                             _InputIter2 __first2, _InputIter2 __last2,
                             _Compare __comp) {
 
 
  for ( ; __first1 != __last1 && __first2 != __last2
        ; ++__first1, ++__first2) {
    if (__comp(*__first1, *__first2)) {
     

      return true;
    }
    if (__comp(*__first2, *__first1))
      return false;
  }
  return __first1 == __last1 && __first2 != __last2;
}


namespace priv {

template <class _InputIter1, class _InputIter2>
int __lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,
                                   _InputIter2 __first2, _InputIter2 __last2) {
  while (__first1 != __last1 && __first2 != __last2) {
    if (*__first1 < *__first2) {
     
      return -1;
    }
    if (*__first2 < *__first1)
      return 1;
    ++__first1;
    ++__first2;
  }
  if (__first2 == __last2) {
    return !(__first1 == __last1);
  }
  else {
    return -1;
  }
}

}

template <class _InputIter1, class _InputIter2>
int lexicographical_compare_3way(_InputIter1 __first1, _InputIter1 __last1,
                                 _InputIter2 __first2, _InputIter2 __last2) {
 
 
  return ::std::priv:: __lexicographical_compare_3way(__first1, __last1, __first2, __last2);
}


namespace priv {

template <class _RandomAccessIter, class _Tp>
inline _RandomAccessIter __find(_RandomAccessIter __first, _RandomAccessIter __last,
                                           const _Tp& __val,
                                           const random_access_iterator_tag &) {
  typename iterator_traits<_RandomAccessIter>::difference_type __trip_count = (__last - __first) >> 2;

  for ( ; __trip_count > 0 ; --__trip_count) {
    if (*__first == __val) return __first;
    ++__first;

    if (*__first == __val) return __first;
    ++__first;

    if (*__first == __val) return __first;
    ++__first;

    if (*__first == __val) return __first;
    ++__first;
  }

  switch (__last - __first) {
  case 3:
    if (*__first == __val) return __first;
    ++__first;
  case 2:
    if (*__first == __val) return __first;
    ++__first;
  case 1:
    if (*__first == __val) return __first;

  case 0:
  default:
    return __last;
  }
}

inline char*
__find(char* __first, char* __last, char __val, const random_access_iterator_tag &) {
  void *res = memchr(__first, __val, __last - __first);
  return res != 0 ? static_cast<char*>(res) : __last;
}
inline const char*
__find(const char* __first, const char* __last, char __val, const random_access_iterator_tag &) {
  const void *res = memchr(__first, __val, __last - __first);
  return res != 0 ? static_cast<const char*>(res) : __last;
}

template <class _RandomAccessIter, class _Predicate>
inline _RandomAccessIter __find_if(_RandomAccessIter __first, _RandomAccessIter __last,
                                              _Predicate __pred,
                                              const random_access_iterator_tag &) {
  typename iterator_traits<_RandomAccessIter>::difference_type __trip_count = (__last - __first) >> 2;

  for ( ; __trip_count > 0 ; --__trip_count) {
    if (__pred(*__first)) return __first;
    ++__first;

    if (__pred(*__first)) return __first;
    ++__first;

    if (__pred(*__first)) return __first;
    ++__first;

    if (__pred(*__first)) return __first;
    ++__first;
  }

  switch(__last - __first) {
  case 3:
    if (__pred(*__first)) return __first;
    ++__first;
  case 2:
    if (__pred(*__first)) return __first;
    ++__first;
  case 1:
    if (__pred(*__first)) return __first;

  case 0:
  default:
    return __last;
  }
}

template <class _InputIter, class _Tp>
inline _InputIter __find(_InputIter __first, _InputIter __last,
                                    const _Tp& __val,
                                    const input_iterator_tag &) {
  while (__first != __last && !(*__first == __val)) ++__first;
  return __first;
}

template <class _InputIter, class _Predicate>
inline _InputIter __find_if(_InputIter __first, _InputIter __last,
                                       _Predicate __pred,
                                       const input_iterator_tag &) {
  while (__first != __last && !__pred(*__first))
    ++__first;
  return __first;
}

}

template <class _InputIter, class _Predicate>
_InputIter find_if(_InputIter __first, _InputIter __last,
                   _Predicate __pred) {
 
  return ::std::priv:: __find_if(__first, __last, __pred, typename ::std::iterator_traits< _InputIter >::iterator_category());
}

template <class _InputIter, class _Tp>
_InputIter find(_InputIter __first, _InputIter __last, const _Tp& __val) {
 
  return ::std::priv:: __find(__first, __last, __val, typename ::std::iterator_traits< _InputIter >::iterator_category());
}

template <class _ForwardIter1, class _ForwardIter2, class _BinaryPred>
_ForwardIter1 search(_ForwardIter1 __first1, _ForwardIter1 __last1,
                     _ForwardIter2 __first2, _ForwardIter2 __last2,
                     _BinaryPred __pred) {
 
 

  if (__first1 == __last1 || __first2 == __last2)
    return __first1;


  _ForwardIter2 __p1(__first2);

  if ( ++__p1 == __last2 ) {
    while (__first1 != __last1 && !__pred(*__first1, *__first2)) {
      ++__first1;
    }
    return __first1;
  }



  for ( ; ; ) {
    while (__first1 != __last1 && !__pred(*__first1, *__first2)) {
      ++__first1;
    }
    if (__first1 == __last1) {
      return __last1;
    }
    _ForwardIter2 __p = __p1;
    _ForwardIter1 __current = __first1;
    if (++__current == __last1) return __last1;

    while (__pred(*__current, *__p)) {
      if (++__p == __last2)
        return __first1;
      if (++__current == __last1)
        return __last1;
    }
    ++__first1;
  }
  return __first1;
}

namespace priv {
template <class _Tp>
struct _IsCharLikeType
{ typedef __false_type _Ret; };

template<> struct _IsCharLikeType<char>
{ typedef __true_type _Ret; };

template<> struct _IsCharLikeType<unsigned char>
{ typedef __true_type _Ret; };


template<> struct _IsCharLikeType<signed char>
{ typedef __true_type _Ret; };


template <class _Tp1, class _Tp2>
inline bool __stlp_eq(_Tp1 __val1, _Tp2 __val2)
{ return __val1 == __val2; }


template <class _Tp>
inline bool __stlp_eq(_Tp, _Tp)
{ return true; }


template <class _InputIter, class _ForwardIter, class _Tp2, class _Predicate>
inline _InputIter __find_first_of_aux2(_InputIter __first1, _InputIter __last1,
                                       _ForwardIter __first2, _ForwardIter __last2,
                                       _Tp2*, _Predicate __pred,
                                       const __true_type& ) {
  unsigned char __hints[(0xffU + 1) / 8];
  memset(__hints, 0, sizeof(__hints) / sizeof(unsigned char));
  for (; __first2 != __last2; ++__first2) {
    unsigned char __tmp = (unsigned char)*__first2;
    __hints[__tmp / 8] |= (1 << (__tmp % 8));
  }

  for (; __first1 != __last1; ++__first1) {
    _Tp2 __tmp = (_Tp2)*__first1;
    if (__stlp_eq(*__first1, __tmp) &&
        __pred((__hints[(unsigned char)__tmp / 8] & (1 << ((unsigned char)__tmp % 8))) != 0))
      break;
  }
  return __first1;
}

template <class _InputIter, class _ForwardIter, class _Tp2, class _Predicate>
inline _InputIter __find_first_of_aux2(_InputIter __first1, _InputIter __last1,
                                       _ForwardIter __first2, _ForwardIter __last2,
                                       _Tp2* , _Predicate ,
                                       const __false_type& ) {
  return ::std::priv:: __find_first_of(__first1, __last1, __first2, __last2,
                                    ::std::priv:: __equal_to((typename ::std::iterator_traits< _InputIter >::value_type*)0));
}

template <class _InputIter, class _ForwardIter, class _Tp1, class _Tp2>
inline _InputIter __find_first_of_aux1(_InputIter __first1, _InputIter __last1,
                                       _ForwardIter __first2, _ForwardIter __last2,
                                       _Tp1* __pt1, _Tp2* __pt2) {
  typedef typename ::std::_IsIntegral<_Tp1>::_Ret _IsIntegral;
  typedef typename ::std::priv:: _IsCharLikeType<_Tp2>::_Ret _IsCharLike;
  typedef typename ::std::_Land2<_IsIntegral, _IsCharLike>::_Ret _UseStrcspnLikeAlgo;
  return ::std::priv:: __find_first_of_aux2(__first1, __last1,
                                         __first2, __last2,
                                         __pt2, _Identity<bool>(), _UseStrcspnLikeAlgo());
}

template <class _InputIter, class _ForwardIter>
inline _InputIter __find_first_of(_InputIter __first1, _InputIter __last1,
                                  _ForwardIter __first2, _ForwardIter __last2) {
  return ::std::priv:: __find_first_of_aux1(__first1, __last1, __first2, __last2,
                                         (typename ::std::iterator_traits< _InputIter >::value_type*)0,
                                         (typename ::std::iterator_traits< _ForwardIter >::value_type*)0);
}


template <class _InputIter, class _ForwardIter, class _BinaryPredicate>
_InputIter __find_first_of(_InputIter __first1, _InputIter __last1,
                           _ForwardIter __first2, _ForwardIter __last2,
                           _BinaryPredicate __comp) {
  for ( ; __first1 != __last1; ++__first1) {
    for (_ForwardIter __iter = __first2; __iter != __last2; ++__iter) {
      if (__comp(*__first1, *__iter)) {
        return __first1;
      }
    }
  }
  return __last1;
}







template <class _ForwardIter1, class _ForwardIter2,
  class _BinaryPredicate>
_ForwardIter1 __find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,
                         _ForwardIter2 __first2, _ForwardIter2 __last2,
                         const forward_iterator_tag &, const forward_iterator_tag &,
                         _BinaryPredicate __comp) {
  if (__first2 == __last2)
    return __last1;
  else {
    _ForwardIter1 __result = __last1;
    for (;;) {
      _ForwardIter1 __new_result = ::std::search(__first1, __last1, __first2, __last2, __comp);
      if (__new_result == __last1)
        return __result;
      else {
        __result = __new_result;
        __first1 = __new_result;
        ++__first1;
      }
    }
  }
}

}





}
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator.h" 1
# 37 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator.h"
namespace std {
# 46 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iterator.h"
template <class _Iterator>
class reverse_iterator :
  public iterator<typename iterator_traits<_Iterator>::iterator_category,
                  typename iterator_traits<_Iterator>::value_type,
                  typename iterator_traits<_Iterator>::difference_type,
                  typename iterator_traits<_Iterator>::pointer,
                  typename iterator_traits<_Iterator>::reference> {
protected:
  _Iterator current;
  typedef reverse_iterator<_Iterator> _Self;
public:
  typedef typename iterator_traits<_Iterator>::difference_type difference_type;

  typedef typename iterator_traits<_Iterator>::pointer pointer;
  typedef typename iterator_traits<_Iterator>::reference reference;
  typedef _Iterator iterator_type;
public:
  reverse_iterator() {}
  explicit reverse_iterator(iterator_type __x) : current(__x) {}
  reverse_iterator(const _Self& __x) : current(__x.current) {}
  _Self& operator = (const _Self& __x) { current = __x.base(); return *this; }

  template <class _Iter>
  reverse_iterator(const reverse_iterator<_Iter>& __x) : current(__x.base()) {}
  template <class _Iter>
  _Self& operator = (const reverse_iterator<_Iter>& __x) { current = __x.base(); return *this; }


  iterator_type base() const { return current; }
  reference operator*() const {
    _Iterator __tmp = current;
    return *--__tmp;
  }
  pointer operator->() const { return &(operator*()); }
  _Self& operator++() {
    --current;
    return *this;
  }
  _Self operator++(int) {
    _Self __tmp = *this;
    --current;
    return __tmp;
  }
  _Self& operator--() {
    ++current;
    return *this;
  }
  _Self operator--(int) {
    _Self __tmp = *this;
    ++current;
    return __tmp;
  }

  _Self operator+(difference_type __n) const { return _Self(current - __n); }
  _Self& operator+=(difference_type __n) {
    current -= __n;
    return *this;
  }
  _Self operator-(difference_type __n) const { return _Self(current + __n); }
  _Self& operator-=(difference_type __n) {
    current += __n;
    return *this;
  }
  reference operator[](difference_type __n) const { return *(*this + __n); }
};

template <class _Iterator>
inline bool operator==(const reverse_iterator<_Iterator>& __x,
                                   const reverse_iterator<_Iterator>& __y)
{ return __x.base() == __y.base(); }

template <class _Iterator>
inline bool operator<(const reverse_iterator<_Iterator>& __x,
                                 const reverse_iterator<_Iterator>& __y)
{ return __y.base() < __x.base(); }


template <class _Iterator>
inline bool operator!=(const reverse_iterator<_Iterator>& __x,
                                  const reverse_iterator<_Iterator>& __y)
{ return !(__x == __y); }

template <class _Iterator>
inline bool operator>(const reverse_iterator<_Iterator>& __x,
                                 const reverse_iterator<_Iterator>& __y)
{ return __y < __x; }

template <class _Iterator>
inline bool operator<=(const reverse_iterator<_Iterator>& __x,
                                  const reverse_iterator<_Iterator>& __y)
{ return !(__y < __x); }

template <class _Iterator>
inline bool operator>=(const reverse_iterator<_Iterator>& __x,
                                  const reverse_iterator<_Iterator>& __y)
{ return !(__x < __y); }


template <class _Iterator>



inline typename reverse_iterator<_Iterator>::difference_type

operator-(const reverse_iterator<_Iterator>& __x,
          const reverse_iterator<_Iterator>& __y)
{ return __y.base() - __x.base(); }

template <class _Iterator, class _DifferenceType>
inline reverse_iterator<_Iterator>
operator+(_DifferenceType n,const reverse_iterator<_Iterator>& x)
{ return x.operator+(n); }


template <class _Container>
class back_insert_iterator
  : public iterator<output_iterator_tag, void, void, void, void> {
  typedef back_insert_iterator<_Container> _Self;
protected:

  _Container *container;
public:
  typedef _Container container_type;
  typedef output_iterator_tag iterator_category;

  explicit back_insert_iterator(_Container& __x) : container(&__x) {}

  _Self& operator=(const _Self& __other) {
    container = __other.container;
    return *this;
  }
  _Self& operator=(const typename _Container::value_type& __val) {
    container->push_back(__val);
    return *this;
  }
  _Self& operator*() { return *this; }
  _Self& operator++() { return *this; }
  _Self operator++(int) { return *this; }
};

template <class _Container>
inline back_insert_iterator<_Container> back_inserter(_Container& __x)
{ return back_insert_iterator<_Container>(__x); }

template <class _Container>
class front_insert_iterator
  : public iterator<output_iterator_tag, void, void, void, void> {
  typedef front_insert_iterator<_Container> _Self;
protected:

  _Container *container;
public:
  typedef _Container container_type;
  typedef output_iterator_tag iterator_category;
  explicit front_insert_iterator(_Container& __x) : container(&__x) {}

  _Self& operator=(const _Self& __other) {
    container = __other.container;
    return *this;
  }
  _Self& operator=(const typename _Container::value_type& __val) {
    container->push_front(__val);
    return *this;
  }
  _Self& operator*() { return *this; }
  _Self& operator++() { return *this; }
  _Self operator++(int) { return *this; }
};

template <class _Container>
inline front_insert_iterator<_Container> front_inserter(_Container& __x)
{ return front_insert_iterator<_Container>(__x); }

template <class _Container>
class insert_iterator
  : public iterator<output_iterator_tag, void, void, void, void> {
  typedef insert_iterator<_Container> _Self;
protected:

  _Container *container;
  typename _Container::iterator _M_iter;
public:
  typedef _Container container_type;
  typedef output_iterator_tag iterator_category;
  insert_iterator(_Container& __x, typename _Container::iterator __i)
    : container(&__x), _M_iter(__i) {}

  _Self& operator=(_Self const& __other) {
    container = __other.container;
    _M_iter = __other._M_iter;
    return *this;
  }
  _Self& operator=(const typename _Container::value_type& __val) {
    _M_iter = container->insert(_M_iter, __val);
    ++_M_iter;
    return *this;
  }
  _Self& operator*() { return *this; }
  _Self& operator++() { return *this; }
  _Self& operator++(int) { return *this; }
};

template <class _Container, class _Iterator>
inline insert_iterator<_Container>
inserter(_Container& __x, _Iterator __i) {
  typedef typename _Container::iterator __iter;
  return insert_iterator<_Container>(__x, __iter(__i));
}

}
# 398 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.c" 2
namespace std {


namespace priv {

template <class _BidirectionalIter1, class _BidirectionalIter2,
          class _BinaryPredicate>
_BidirectionalIter1
__find_end(_BidirectionalIter1 __first1, _BidirectionalIter1 __last1,
           _BidirectionalIter2 __first2, _BidirectionalIter2 __last2,
           const bidirectional_iterator_tag &, const bidirectional_iterator_tag &,
           _BinaryPredicate __comp) {
  typedef ::std::reverse_iterator<_BidirectionalIter1> _RevIter1;
  typedef ::std::reverse_iterator<_BidirectionalIter2> _RevIter2;

  _RevIter1 __rlast1(__first1);
  _RevIter2 __rlast2(__first2);
  _RevIter1 __rresult = ::std::search(_RevIter1(__last1), __rlast1,
                                          _RevIter2(__last2), __rlast2,
                                          __comp);

  if (__rresult == __rlast1)
    return __last1;
  else {
    _BidirectionalIter1 __result = __rresult.base();
    ::std::advance(__result, -::std::distance(__first2, __last2));
    return __result;
  }
}

}


template <class _ForwardIter1, class _ForwardIter2,
          class _BinaryPredicate>
_ForwardIter1
find_end(_ForwardIter1 __first1, _ForwardIter1 __last1,
         _ForwardIter2 __first2, _ForwardIter2 __last2,
         _BinaryPredicate __comp) {
 
 
  return ::std::priv:: __find_end(__first1, __last1, __first2, __last2,

                               typename ::std::iterator_traits< _ForwardIter1 >::iterator_category(),
                               typename ::std::iterator_traits< _ForwardIter2 >::iterator_category(),




                               __comp);
}

namespace priv {

template <class _ForwardIter, class _Tp, class _Compare1, class _Compare2, class _Distance>
_ForwardIter __lower_bound(_ForwardIter __first, _ForwardIter __last, const _Tp& __val,
                           _Compare1 __comp1, _Compare2 __comp2, _Distance*) {
  _Distance __len = ::std::distance(__first, __last);
  _Distance __half;
  _ForwardIter __middle;

  while (__len > 0) {
    __half = __len >> 1;
    __middle = __first;
    ::std::advance(__middle, __half);
    if (__comp1(*__middle, __val)) {
     
      __first = __middle;
      ++__first;
      __len = __len - __half - 1;
    }
    else
      __len = __half;
  }
  return __first;
}

}

}
# 721 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_algobase.h" 2
# 44 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_new.h" 1
# 47 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_new.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/new" 1
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/new"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cstddef" 1
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cstddef"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/cstddef" 1
# 39 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/cstddef"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h"
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2
# 40 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/cstddef" 2

extern "C++" {

namespace std {
using ::ptrdiff_t;
using ::size_t;
}

}
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cstddef" 2
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/new" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/exception" 1
# 49 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/exception"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/exception" 1
# 31 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/exception"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/gabixx_config.h" 1
# 32 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/exception" 2



namespace std {

  class exception {
  public:
    exception() noexcept;
    virtual ~exception() noexcept;
    virtual const char* what() const noexcept;
  };

  class bad_exception : public exception {
  public:
    bad_exception() noexcept;
    virtual ~bad_exception() noexcept;
    virtual const char* what() const noexcept;
  };

  typedef void (*terminate_handler)();
  terminate_handler get_terminate() noexcept;
  terminate_handler set_terminate(terminate_handler f) noexcept;
  void terminate() noexcept __attribute__((__noreturn__));

  typedef void (*unexpected_handler)();
  unexpected_handler get_unexpected() noexcept;
  unexpected_handler set_unexpected(unexpected_handler f) noexcept;
  void unexpected() __attribute__((__noreturn__));

  bool uncaught_exception() noexcept;

}
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/exception" 2
# 37 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/new" 2

namespace std
{
  struct nothrow_t {};
  extern const nothrow_t nothrow;
  typedef void (*new_handler)();

class bad_alloc : public exception {
public:
  bad_alloc() throw();
  virtual ~bad_alloc() throw();
  virtual const char* what() const throw();
};

class bad_array_new_length : public bad_alloc {
public:
  bad_array_new_length() throw();
  virtual ~bad_array_new_length() throw();
  virtual const char* what() const throw();
};
# 68 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/../../gabi++/include/new"
typedef void (*new_handler)();
new_handler set_new_handler(new_handler) throw();
new_handler get_new_handler() throw();

}

void* operator new(std::size_t size) throw(std::bad_alloc);
void* operator new(std::size_t size, const std::nothrow_t&) throw();
void* operator new[](std::size_t size) throw(std::bad_alloc);
void* operator new[](std::size_t size, const std::nothrow_t&) throw();

void operator delete[](void* ptr) throw();
void operator delete[](void* const, std::nothrow_t&) throw();
void operator delete(void* ptr) throw();
void operator delete(void*, const std::nothrow_t&) throw();

inline void* operator new(std::size_t, void* p) throw() { return p; }
inline void* operator new[](std::size_t, void* p) throw() { return p; }
inline void operator delete(void*, void*) throw() {}
inline void operator delete[](void*, void*) throw() {}
# 48 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_new.h" 2
# 114 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_new.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdio.h" 1
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 1
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdio.h" 2
# 52 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdio.h"
namespace std {
using ::FILE;
using ::fpos_t;
using ::size_t;
# 66 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cstdio.h"
using ::clearerr;
using ::fclose;
using ::feof;
using ::ferror;
using ::fflush;
using ::fgetc;
using ::fgetpos;
using ::fgets;
using ::fopen;
using ::fprintf;
using ::fputc;
using ::fputs;
using ::fread;

using ::freopen;

using ::fscanf;
using ::fseek;
using ::fsetpos;
using ::ftell;
using ::fwrite;



 using ::getc;
 using ::putc;

 using ::getchar;
 using ::putchar;


using ::gets;

using ::perror;

using ::printf;
using ::puts;

using ::remove;
using ::rename;
using ::rewind;
using ::setbuf;
using ::tmpfile;
using ::tmpnam;

using ::scanf;
using ::setvbuf;
using ::sprintf;
using ::sscanf;
using ::ungetc;
using ::vfprintf;
using ::vprintf;
using ::vsprintf;





}
# 115 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_new.h" 2
# 128 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_new.h"
namespace std {





inline void* __stl_new(size_t __n) { return ::operator new(__n); }
inline void __stl_delete(void* __p) { ::operator delete(__p); }

}
# 48 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_construct.h" 1
# 53 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_construct.h"
namespace std {

template <class _Tp>
inline void __destroy_aux(_Tp* __pointer, const __false_type& )
{ __pointer->~_Tp(); }

template <class _Tp>
inline void __destroy_aux(_Tp*, const __true_type& ) {}

template <class _Tp>
inline void _Destroy(_Tp* __pointer) {
  typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
  __destroy_aux(__pointer, _Trivial_destructor());



}

template <class _Tp>
inline void _Destroy_Moved(_Tp* __pointer) {

  typedef typename __move_traits<_Tp>::complete _Trivial_destructor;
  __destroy_aux(__pointer, _Trivial_destructor());






}






template <class _T1>
inline void _Construct_aux (_T1* __p, const __false_type&) {
  new(__p) _T1();
}

template <class _T1>
inline void _Construct_aux (_T1* __p, const __true_type&) {





  *__p = _T1();

}

template <class _T1>
inline void _Construct(_T1* __p) {






  _Construct_aux (__p, _Is_POD(__p)._Answer());

}

template <class _Tp>
__attribute__((always_inline)) inline void _Copy_Construct_aux(_Tp* __p, const _Tp& __val, const __false_type&) {
  new(__p) _Tp(__val);
}

template <class _Tp>
__attribute__((always_inline)) inline void _Copy_Construct_aux(_Tp* __p, const _Tp& __val, const __true_type&) {


  *__p = __val;
}

template <class _Tp>
__attribute__((always_inline)) inline void _Copy_Construct(_Tp* __p, const _Tp& __val) {



  _Copy_Construct_aux(__p, __val, _Is_POD(__p)._Answer());
}

template <class _T1, class _T2>
__attribute__((always_inline)) inline void _Param_Construct_aux(_T1* __p, const _T2& __val, const __false_type&) {
  new(__p) _T1(__val);
}

template <class _T1, class _T2>
__attribute__((always_inline)) inline void _Param_Construct_aux(_T1* __p, const _T2& __val, const __true_type&) {


  *__p = _T1(__val);
}

template <class _T1, class _T2>
__attribute__((always_inline)) inline void _Param_Construct(_T1* __p, const _T2& __val) {



  _Param_Construct_aux(__p, __val, _Is_POD(__p)._Answer());
}

template <class _T1, class _T2>
__attribute__((always_inline)) inline void _Move_Construct_Aux(_T1* __p, _T2& __val, const __false_type& ) {

  new(__p) _T1(::std::priv:: _AsMoveSource(__val));



}

template <class _T1, class _T2>
__attribute__((always_inline)) inline void _Move_Construct_Aux(_T1* __p, _T2& __val, const __true_type& ) {


  *__p = _T1(__val);
}

template <class _T1, class _T2>
__attribute__((always_inline)) inline void _Move_Construct(_T1* __p, _T2& __val) {



  _Move_Construct_Aux(__p, __val, _Is_POD(__p)._Answer());
}
# 188 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_construct.h"
template <class _ForwardIterator, class _Tp>
inline void
__destroy_range_aux(_ForwardIterator __first, _ForwardIterator __last, _Tp*, const __false_type& ) {
  for ( ; __first != __last; ++__first) {
    __destroy_aux(&(*__first), __false_type());



  }
}

template <class _ForwardIterator, class _Tp>







inline void
__destroy_range_aux(_ForwardIterator, _ForwardIterator, _Tp*, const __true_type& ) {}


template <class _ForwardIterator, class _Tp>
inline void
__destroy_range(_ForwardIterator __first, _ForwardIterator __last, _Tp *__ptr) {
  typedef typename __type_traits<_Tp>::has_trivial_destructor _Trivial_destructor;
  __destroy_range_aux(__first, __last, __ptr, _Trivial_destructor());
}

template <class _ForwardIterator>
inline void _Destroy_Range(_ForwardIterator __first, _ForwardIterator __last) {
  __destroy_range(__first, __last, (typename ::std::iterator_traits< _ForwardIterator >::value_type*)0);
}

inline void _Destroy_Range(char*, char*) {}

inline void _Destroy_Range(wchar_t*, wchar_t*) {}
inline void _Destroy_Range(const wchar_t*, const wchar_t*) {}



template <class _ForwardIterator, class _Tp>
inline void
__destroy_mv_srcs(_ForwardIterator __first, _ForwardIterator __last, _Tp *__ptr) {
  typedef typename __move_traits<_Tp>::complete _CompleteMove;
  __destroy_range_aux(__first, __last, __ptr, _CompleteMove());
}


template <class _ForwardIterator>
inline void _Destroy_Moved_Range(_ForwardIterator __first, _ForwardIterator __last)

{ __destroy_mv_srcs(__first, __last, (typename ::std::iterator_traits< _ForwardIterator >::value_type*)0); }
# 273 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_construct.h"
template <class _T1, class _T2>
inline void construct(_T1* __p, const _T2& __val) {_Param_Construct(__p, __val); }
template <class _T1>
inline void construct(_T1* __p) { ::std::_Construct(__p); }
template <class _Tp>
inline void destroy(_Tp* __pointer) { ::std::_Destroy(__pointer); }
template <class _ForwardIterator>
inline void destroy(_ForwardIterator __first, _ForwardIterator __last) { ::std::_Destroy_Range(__first, __last); }


}
# 52 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h" 2


namespace std {





typedef void (* __oom_handler_type)();


class __attribute__((visibility("default"))) __malloc_alloc {
public:

  typedef char value_type;
  static void* allocate(size_t __n)

  ;
# 80 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
  static void deallocate(void* __p, size_t ) { free((char*)__p); }

  static __oom_handler_type set_malloc_handler(__oom_handler_type __f);

};



class __attribute__((visibility("default"))) __new_alloc {
public:

  typedef char value_type;
  static void* allocate(size_t __n) { return __stl_new(__n); }
  static void deallocate(void* __p, size_t) { __stl_delete(__p); }
};
# 103 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
template <class _Alloc>
class __debug_alloc : public _Alloc {
public:
  typedef _Alloc __allocator_type;
  typedef typename _Alloc::value_type value_type;
private:
  struct __alloc_header {
    size_t __magic: 16;
    size_t __type_size:16;
    unsigned long _M_size;
  };

  enum { __pad = 8, __magic = 0xdeba, __deleted_magic = 0xdebd,
         __shred_byte = 0xA3 };

  enum { __extra_before = 16, __extra_after = 8 };



  static size_t __extra_before_chunk() {
    return (long)__extra_before / sizeof(value_type) +
      (size_t)((long)__extra_before % sizeof(value_type) > 0);
  }
  static size_t __extra_after_chunk() {
    return (long)__extra_after / sizeof(value_type) +
      (size_t)((long)__extra_after % sizeof(value_type) > 0);
  }
public:
  __debug_alloc() {}
  ~__debug_alloc() {}
  static void* allocate(size_t);
  static void deallocate(void *, size_t);
};





enum { _MAX_BYTES = 32 * sizeof(void*) };






class __attribute__((visibility("default"))) __node_alloc {
  static void * _M_allocate(size_t& __n);

  static void _M_deallocate(void *__p, size_t __n);

public:

  typedef char value_type;

  static void* allocate(size_t& __n)
  { return (__n > (size_t)_MAX_BYTES) ? __stl_new(__n) : _M_allocate(__n); }

  static void deallocate(void *__p, size_t __n)
  { if (__n > (size_t)_MAX_BYTES) __stl_delete(__p); else _M_deallocate(__p, __n); }
};
# 196 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
template <class _Tp, class _Allocator>
struct _Alloc_traits {
  typedef _Allocator _Orig;

  typedef typename _Allocator::template rebind<_Tp> _Rebind_type;
  typedef typename _Rebind_type::other allocator_type;
  static allocator_type create_allocator(const _Orig& __a)
  { return allocator_type(__a); }





};
# 224 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
typedef __node_alloc __alloc_type;





typedef __alloc_type __sgi_alloc;



typedef __sgi_alloc __single_client_alloc;
typedef __sgi_alloc __multithreaded_alloc;
# 269 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
template <class _Tp>
class allocator



                : public __stlport_class<allocator<_Tp> >
{
public:
  typedef _Tp value_type;
  typedef _Tp* pointer;
  typedef const _Tp* const_pointer;
  typedef _Tp& reference;
  typedef const _Tp& const_reference;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;

  template <class _Tp1> struct rebind {
    typedef allocator<_Tp1> other;
  };

  allocator() {}

  template <class _Tp1> allocator(const allocator<_Tp1>&) {}

  allocator(const allocator<_Tp>&) {}

  allocator(__move_source<allocator<_Tp> > src) {}

  ~allocator() {}
  pointer address(reference __x) const {return &__x;}
  const_pointer address(const_reference __x) const { return &__x; }

  _Tp* allocate(size_type __n, const void* = 0) {
    if (__n > max_size()) {
      puts("out of memory\n"); abort();
    }
    if (__n != 0) {
      size_type __buf_size = __n * sizeof(value_type);
      _Tp* __ret = reinterpret_cast<_Tp*>(__sgi_alloc::allocate(__buf_size));



      return __ret;
    }

    return 0;
  }

  void deallocate(pointer __p, size_type __n) {
   
    if (__p != 0) {



      __sgi_alloc::deallocate((void*)__p, __n * sizeof(value_type));
    }
  }


  void deallocate(pointer __p) const { if (__p != 0) __sgi_alloc::deallocate((void*)__p, sizeof(value_type)); }

  size_type max_size() const { return size_t(-1) / sizeof(value_type); }
  void construct(pointer __p, const_reference __val) { ::std::_Copy_Construct(__p, __val); }
  void destroy(pointer __p) { ::std::_Destroy(__p); }
# 341 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
  _Tp* _M_allocate(size_type __n, size_type& __allocated_n) {
    if (__n > max_size()) {
      puts("out of memory\n"); abort();
    }

    if (__n != 0) {
      size_type __buf_size = __n * sizeof(value_type);
      _Tp* __ret = reinterpret_cast<_Tp*>(__sgi_alloc::allocate(__buf_size));



      __allocated_n = __buf_size / sizeof(value_type);
      return __ret;
    }

    return 0;
  }



};

template<>
class __attribute__((visibility("default"))) allocator<void> {
public:
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef void* pointer;
  typedef const void* const_pointer;

  typedef void value_type;


  template <class _Tp1> struct rebind {
    typedef allocator<_Tp1> other;
  };

};

template <class _T1, class _T2>
inline bool operator==(const allocator<_T1>&, const allocator<_T2>&)
{ return true; }
template <class _T1, class _T2>
inline bool operator!=(const allocator<_T1>&, const allocator<_T2>&)
{ return false; }
# 397 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
namespace priv {

template <class _Tp>
struct __alloc_type_traits {

  typedef typename _IsSTLportClass<allocator<_Tp> >::_Ret _STLportAlloc;






  typedef _STLportAlloc has_trivial_default_constructor;
  typedef _STLportAlloc has_trivial_copy_constructor;
  typedef _STLportAlloc has_trivial_assignment_operator;
  typedef _STLportAlloc has_trivial_destructor;
  typedef _STLportAlloc is_POD_type;
};

}


template <class _Tp>
struct __type_traits<allocator<_Tp> > : ::std::priv:: __alloc_type_traits<_Tp> {};
# 451 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
template <class _Tp, class _Alloc>
inline typename _Alloc_traits<_Tp, _Alloc>::allocator_type
__stl_alloc_create(const _Alloc& __a, const _Tp*) {
  typedef typename _Alloc::template rebind<_Tp>::other _Rebound_type;
  return _Rebound_type(__a);
}
# 468 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
namespace priv {


template <class _Value, class _Tp, class _MaybeReboundAlloc>
class _STLP_alloc_proxy : public _MaybeReboundAlloc {
private:
  typedef _MaybeReboundAlloc _Base;
  typedef typename _Base::size_type size_type;
  typedef _STLP_alloc_proxy<_Value, _Tp, _MaybeReboundAlloc> _Self;
public:
  _Value _M_data;

  _STLP_alloc_proxy (const _MaybeReboundAlloc& __a, _Value __p) :
    _MaybeReboundAlloc(__a), _M_data(__p) {}


  _STLP_alloc_proxy (__move_source<_Self> src) :
    _Base(::std::priv:: _AsMoveSource(src.get()._M_base())),
    _M_data(::std::priv:: _AsMoveSource(src.get()._M_data)) {}

  _Base& _M_base()
  { return *this; }


private:




  void _M_swap_alloc(_Self&, const __true_type& )
  {}

  void _M_swap_alloc(_Self& __x, const __false_type& ) {
    _MaybeReboundAlloc &__base_this = *this;
    _MaybeReboundAlloc &__base_x = __x;
    ::std::swap(__base_this, __base_x);
  }

public:
  void _M_swap_alloc(_Self& __x) {

    typedef typename _IsStateless<_MaybeReboundAlloc>::_Ret _StatelessAlloc;



    _M_swap_alloc(__x, _StatelessAlloc());
  }





  void swap(_Self& __x) {
    _M_swap_alloc(__x);
    ::std::swap(_M_data, __x._M_data);
  }

  _Tp* allocate(size_type __n, size_type& __allocated_n) {

    typedef typename _IsSTLportClass<_MaybeReboundAlloc>::_Ret _STLportAlloc;



    return allocate(__n, __allocated_n, _STLportAlloc());
  }
# 547 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
  _Tp* allocate(size_type __n)
  { return _Base::allocate(__n); }
private:
  _Tp* allocate(size_type __n, size_type& __allocated_n, const __true_type& )
  { return _Base::_M_allocate(__n, __allocated_n); }


  _Tp* allocate(size_type __n, size_type& __allocated_n, const __false_type& )
  { __allocated_n = __n; return allocate(__n); }
};
# 568 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h"
}
}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.c" 1
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.c"
namespace std {

template <class _Alloc>
void * __debug_alloc<_Alloc>::allocate(size_t __n) {
  size_t __total_extra = __extra_before_chunk() + __extra_after_chunk();
  size_t __real_n = __n + __total_extra;
  if (__real_n < __n) {

    puts("out of memory\n"); abort();
  }
  __alloc_header *__result = (__alloc_header *)__allocator_type::allocate(__real_n);
  memset((char*)__result, __shred_byte, __real_n * sizeof(value_type));
  __result->__magic = __magic;
  __result->__type_size = sizeof(value_type);
  __result->_M_size = (unsigned long)__n;
  return ((char*)__result) + (long)__extra_before;
}

template <class _Alloc>
void
__debug_alloc<_Alloc>::deallocate(void *__p, size_t __n) {
  __alloc_header * __real_p = (__alloc_header*)((char *)__p -(long)__extra_before);

 
 
 
 

  unsigned char* __tmp;
  for (__tmp = (unsigned char*)(__real_p + 1); __tmp < (unsigned char*)__p; ++__tmp) {
   
  }

  size_t __real_n = __n + __extra_before_chunk() + __extra_after_chunk();

  for (__tmp= ((unsigned char*)__p) + __n * sizeof(value_type);
       __tmp < ((unsigned char*)__real_p) + __real_n ; ++__tmp) {
   
  }


  __real_p->__magic = __deleted_magic;
  memset((char*)__p, __shred_byte, __n * sizeof(value_type));
  __allocator_type::deallocate(__real_p, __real_n);
}

}
# 573 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_alloc.h" 2
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_fwd.h" 1
# 23 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_fwd.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iosfwd.h" 1
# 22 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iosfwd.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/char_traits.h" 1
# 48 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/char_traits.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cwchar.h" 1
# 68 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cwchar.h"
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\wchar.h" 1 3 4
# 31 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\wchar.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/limits.h" 1 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\wchar.h" 2 3 4

# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 1 3 4
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\wchar.h" 2 3 4



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 38 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\wchar.h" 2 3 4

# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 1 3 4
# 40 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\wchar.h" 2 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/time.h" 1 3 4
# 32 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/time.h" 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\time.h" 1 3 4
# 38 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\time.h" 3 4
extern "C" {

extern time_t time(time_t *);
extern int nanosleep(const struct timespec *, struct timespec *);

extern char *strtotimeval(const char *str, struct timeval *tv);

struct tm {
   int tm_sec;
   int tm_min;
   int tm_hour;
   int tm_mday;
   int tm_mon;
   int tm_year;
   int tm_wday;
   int tm_yday;
   int tm_isdst;

   long int tm_gmtoff;
   const char *tm_zone;

};






extern char* asctime(const struct tm* a);
extern char* asctime_r(const struct tm* a, char* buf);


extern double difftime (time_t __time1, time_t __time0) ;
extern time_t mktime (struct tm *a);

extern struct tm* localtime(const time_t *t);
extern struct tm* localtime_r(const time_t *timep, struct tm *result);

extern struct tm* gmtime(const time_t *timep);
extern struct tm* gmtime_r(const time_t *timep, struct tm *result);

extern char* strptime(const char *buf, const char *fmt, struct tm *tm);
extern size_t strftime(char *s, size_t max, const char *format, const struct tm *tm);

extern char *ctime(const time_t *timep);
extern char *ctime_r(const time_t *timep, char *buf);

extern void tzset(void);


extern char* tzname[];
extern int daylight;
extern long int timezone;



extern clock_t clock(void);


extern int clock_getres(clockid_t, struct timespec *);
extern int clock_gettime(clockid_t, struct timespec *);
extern int clock_settime(clockid_t, const struct timespec *);
extern int clock_nanosleep(clockid_t, int, const struct timespec *, struct timespec *);
# 113 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\time.h" 3 4
extern int timer_create(int, struct sigevent*, timer_t*);
extern int timer_delete(timer_t);
extern int timer_settime(timer_t timerid, int flags, const struct itimerspec *value, struct itimerspec *ovalue);
extern int timer_gettime(timer_t timerid, struct itimerspec *value);
extern int timer_getoverrun(timer_t timerid);

}
# 33 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/time.h" 2 3 4
# 41 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\wchar.h" 2 3 4


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 1 3 4
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 3 4
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\stddef.h" 1 3 4
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stddef.h" 2 3 4
# 44 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\wchar.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sys\\_wchar_limits.h" 1 3 4
# 45 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\wchar.h" 2 3 4

extern "C" {

typedef unsigned int wint_t;
typedef struct { int dummy; } mbstate_t;

typedef enum {
    WC_TYPE_INVALID = 0,
    WC_TYPE_ALNUM,
    WC_TYPE_ALPHA,
    WC_TYPE_BLANK,
    WC_TYPE_CNTRL,
    WC_TYPE_DIGIT,
    WC_TYPE_GRAPH,
    WC_TYPE_LOWER,
    WC_TYPE_PRINT,
    WC_TYPE_PUNCT,
    WC_TYPE_SPACE,
    WC_TYPE_UPPER,
    WC_TYPE_XDIGIT,
    WC_TYPE_MAX
} wctype_t;



extern wint_t btowc(int);
extern int fwprintf(FILE *, const wchar_t *, ...);
extern int fwscanf(FILE *, const wchar_t *, ...);
extern int iswalnum(wint_t);
extern int iswalpha(wint_t);
extern int iswcntrl(wint_t);
extern int iswdigit(wint_t);
extern int iswgraph(wint_t);
extern int iswlower(wint_t);
extern int iswprint(wint_t);
extern int iswpunct(wint_t);
extern int iswspace(wint_t);
extern int iswupper(wint_t);
extern int iswxdigit(wint_t);
extern int iswctype(wint_t, wctype_t);
extern wint_t fgetwc(FILE *);
extern wchar_t *fgetws(wchar_t *, int, FILE *);
extern wint_t fputwc(wchar_t, FILE *);
extern int fputws(const wchar_t *, FILE *);
extern int fwide(FILE *, int);
extern wint_t getwc(FILE *);
extern wint_t getwchar(void);
extern int mbsinit(const mbstate_t *);
extern size_t mbrlen(const char *, size_t, mbstate_t *);
extern size_t mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
extern size_t mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);
extern size_t mbstowcs(wchar_t *, const char *, size_t);
extern wint_t putwc(wchar_t, FILE *);
extern wint_t putwchar(wchar_t);
extern int swprintf(wchar_t *, size_t, const wchar_t *, ...);
extern int swscanf(const wchar_t *, const wchar_t *, ...);
extern wint_t towlower(wint_t);
extern wint_t towupper(wint_t);
extern wint_t ungetwc(wint_t, FILE *);
extern int vfwprintf(FILE *, const wchar_t *, va_list);
extern int vwprintf(const wchar_t *, va_list);
extern int vswprintf(wchar_t *, size_t, const wchar_t *, va_list);
extern size_t wcrtomb(char *, wchar_t, mbstate_t *);
extern wchar_t *wcscat(wchar_t *, const wchar_t *);
extern wchar_t *wcschr(const wchar_t *, wchar_t);
extern int wcscmp(const wchar_t *, const wchar_t *);
extern int wcscoll(const wchar_t *, const wchar_t *);
extern wchar_t *wcscpy(wchar_t *, const wchar_t *);
extern size_t wcscspn(const wchar_t *, const wchar_t *);
extern size_t wcsftime(wchar_t *, size_t, const wchar_t *, const struct tm *);
extern size_t wcslen(const wchar_t *);
extern wchar_t *wcsncat(wchar_t *, const wchar_t *, size_t);
extern int wcsncmp(const wchar_t *, const wchar_t *, size_t);
extern wchar_t *wcsncpy(wchar_t *, const wchar_t *, size_t);
extern wchar_t *wcspbrk(const wchar_t *, const wchar_t *);
extern wchar_t *wcsrchr(const wchar_t *, wchar_t);
extern size_t wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
extern size_t wcsspn(const wchar_t *, const wchar_t *);
extern wchar_t *wcsstr(const wchar_t *, const wchar_t *);
extern double wcstod(const wchar_t *, wchar_t **) ;
extern wchar_t *wcstok(wchar_t *, const wchar_t *, wchar_t **);
extern long int wcstol(const wchar_t *, wchar_t **, int);
extern size_t wcstombs(char *, const wchar_t *, size_t);
extern unsigned long int wcstoul(const wchar_t *, wchar_t **, int);
extern wchar_t *wcswcs(const wchar_t *, const wchar_t *);
extern int wcswidth(const wchar_t *, size_t);
extern size_t wcsxfrm(wchar_t *, const wchar_t *, size_t);
extern int wctob(wint_t);
extern wctype_t wctype(const char *);
extern int wcwidth(wchar_t);
extern wchar_t *wmemchr(const wchar_t *, wchar_t, size_t);
extern int wmemcmp(const wchar_t *, const wchar_t *, size_t);
extern wchar_t *wmemcpy(wchar_t *, const wchar_t *, size_t);
extern wchar_t *wmemmove(wchar_t *, const wchar_t *, size_t);
extern wchar_t *wmemset(wchar_t *, wchar_t, size_t);
extern int wprintf(const wchar_t *, ...);
extern int wscanf(const wchar_t *, ...);


typedef void *wctrans_t;
extern wint_t towctrans(wint_t, wctrans_t);
extern wctrans_t wctrans (const char *);

}
# 69 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cwchar.h" 2
# 113 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cwchar.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_mbstate_t.h" 1
# 114 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cwchar.h" 2
# 170 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cwchar.h"
namespace std {







using ::wint_t;





using ::size_t;


using ::mbstate_t;
# 213 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cwchar.h"
using ::fgetwc;
using ::fgetws;
using ::fputwc;
using ::fputws;





using ::fwide;

using ::fwprintf;
using ::fwscanf;
using ::getwchar;




using ::getwc;

using ::ungetwc;

using ::putwc;

using ::putwchar;
# 251 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cwchar.h"
using ::swprintf;
using ::vswprintf;

using ::swscanf;
using ::vfwprintf;
using ::vwprintf;




using ::wcsftime;

using ::wcstok;




using ::wcscoll;
using ::wcsxfrm;

using ::wcscat;
using ::wcsrchr;
using ::wcscmp;

using ::wcscpy;
using ::wcscspn;

using ::wcslen;
using ::wcsncat;
using ::wcsncmp;
using ::wcsncpy;
using ::wcspbrk;
using ::wcschr;

using ::wcsspn;


using ::wcstod;
using ::wcstol;



using ::wcsstr;
using ::wmemchr;



using ::wctob;


using ::wmemcmp;
using ::wmemmove;

using ::wprintf;
using ::wscanf;
# 327 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cwchar.h"
using ::wmemcpy;
using ::wmemset;




}
# 49 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/char_traits.h" 2


namespace std {

template <class _Tp> class allocator;
# 74 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/char_traits.h"
typedef off_t streamoff;






typedef ptrdiff_t streamsize;





template <class _StateT> class fpos {
public:
  fpos(streamoff __pos) : _M_pos(__pos), _M_st(_StateT()) {}
  fpos() : _M_pos(0), _M_st(_StateT()) {}

  operator streamoff() const { return _M_pos; }

  bool operator==(const fpos& __y) const
  { return _M_pos == __y._M_pos; }
  bool operator!=(const fpos& __y) const
  { return _M_pos != __y._M_pos; }

  fpos& operator+=(streamoff __off) {
    _M_pos += __off;
    return *this;
  }
  fpos& operator-=(streamoff __off) {
    _M_pos -= __off;
    return *this;
  }

  fpos operator+(streamoff __off) {
    fpos __tmp(*this);
    __tmp += __off;
    return __tmp;
  }
  fpos operator-(streamoff __off) {
    fpos __tmp(*this);
    __tmp -= __off;
    return __tmp;
  }

public:
  _StateT state() const { return _M_st; }
  void state(_StateT __st) { _M_st = __st; }
private:
  streamoff _M_pos;
  _StateT _M_st;
};

typedef fpos<mbstate_t> streampos;
typedef fpos<mbstate_t> wstreampos;


template <class _CharT, class _IntT>
class __char_traits_base {
public:
  typedef _CharT char_type;
  typedef _IntT int_type;
  typedef streamoff off_type;
  typedef streampos pos_type;
  typedef mbstate_t state_type;

  static void assign(char_type& __c1, const char_type& __c2) { __c1 = __c2; }
  static bool eq(const char_type& __c1, const char_type& __c2)
  { return __c1 == __c2; }
  static bool lt(const char_type& __c1, const char_type& __c2)
  { return __c1 < __c2; }

  static int compare(const char_type* __s1, const char_type* __s2, size_t __n) {
    for (size_t __i = 0; __i < __n; ++__i)
      if (!eq(__s1[__i], __s2[__i]))
        return __s1[__i] < __s2[__i] ? -1 : 1;
    return 0;
  }

  static size_t length(const char_type* __s) {
    const char_type _NullChar = char_type();
    size_t __i(0);
    for (; !eq(__s[__i], _NullChar); ++__i) {}
    return __i;
  }

  static const char_type* find(const char_type* __s, size_t __n, const char_type& __c) {
    for ( ; __n > 0 ; ++__s, --__n)
      if (eq(*__s, __c))
        return __s;
    return 0;
  }

  static char_type* move(char_type* __s1, const char_type* __s2, size_t _Sz)
  { return (_Sz == 0 ? __s1 : (char_type*)memmove(__s1, __s2, _Sz * sizeof(char_type))); }

  static char_type* copy(char_type* __s1, const char_type* __s2, size_t __n) {
    return (__n == 0 ? __s1 :
      (char_type*)memcpy(__s1, __s2, __n * sizeof(char_type)));
  }

  static char_type* assign(char_type* __s, size_t __n, char_type __c) {
    for (size_t __i = 0; __i < __n; ++__i)
      __s[__i] = __c;
    return __s;
  }

  static int_type not_eof(const int_type& __c)
  { return !eq_int_type(__c, eof()) ? __c : static_cast<int_type>(0); }

  static char_type to_char_type(const int_type& __c)
  { return (char_type)__c; }

  static int_type to_int_type(const char_type& __c)
  { return (int_type)__c; }

  static bool eq_int_type(const int_type& __c1, const int_type& __c2)
  { return __c1 == __c2; }

  static int_type eof()
  { return (int_type)-1; }
};






template <class _CharT>
class char_traits
  : public __char_traits_base<_CharT, _CharT> {};



template<>
class __attribute__((visibility("default"))) char_traits<char>
  : public __char_traits_base<char, int>,
    public __stlport_class<char_traits<char> > {
public:
  typedef char char_type;
  typedef int int_type;
  typedef streamoff off_type;
  typedef streampos pos_type;
  typedef mbstate_t state_type;

  static char to_char_type(const int& __c)
  { return (char)(unsigned char)__c; }

  static int to_int_type(const char& __c)
  { return (unsigned char)__c; }

  static int compare(const char* __s1, const char* __s2, size_t __n)
  { return memcmp(__s1, __s2, __n); }

  static size_t length(const char* __s)
  { return strlen(__s); }

  static void assign(char& __c1, const char& __c2)
  { __c1 = __c2; }

  static char* assign(char* __s, size_t __n, char __c) {
    memset(__s, __c, __n);
    return __s;
  }
};



template<>
class __attribute__((visibility("default"))) char_traits<wchar_t>
  : public __char_traits_base<wchar_t, wint_t> {

public:

  static wchar_t* move(wchar_t* __dest, const wchar_t* __src, size_t __n)
  { return wmemmove(__dest, __src, __n); }


  static wchar_t* copy(wchar_t* __dest, const wchar_t* __src, size_t __n)
  { return wmemcpy(__dest, __src, __n); }


  static int compare(const wchar_t* __s1, const wchar_t* __s2, size_t __n)
  { return wmemcmp(__s1, __s2, __n); }


  static wchar_t* assign(wchar_t* __s, size_t __n, wchar_t __c)
  { return wmemset(__s, __c, __n); }

  static size_t length(const wchar_t* __s)
  { return wcslen(__s); }

  static void assign(wchar_t& __c1, const wchar_t& __c2)
  { __c1 = __c2; }

};


}
# 23 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iosfwd.h" 2


namespace std {

class ios_base;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ios;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_streambuf;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_istream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ostream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_iostream;

template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
class basic_stringbuf;

template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
class basic_istringstream;

template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
class basic_ostringstream;

template <class _CharT, class _Traits = char_traits<_CharT>,
          class _Allocator = allocator<_CharT> >
class basic_stringstream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_filebuf;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ifstream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_ofstream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class basic_fstream;

template <class _CharT, class _Traits = char_traits<_CharT> >
class istreambuf_iterator;

template <class _CharT, class _Traits = char_traits<_CharT> >
class ostreambuf_iterator;

typedef basic_ios<char, char_traits<char> > ios;


typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;



class locale;
template <class _Facet>
# 95 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iosfwd.h"
inline const _Facet& use_facet(const locale&);


template <class _CharT> class ctype;
template <class _CharT> class ctype_byname;
template <class _CharT> class collate;
template <class _CharT> class collate_byname;

template<> class ctype<char>;
template<> class ctype_byname<char>;
template<> class collate<char>;
template<> class collate_byname<char>;


template<> class ctype<wchar_t>;
template<> class ctype_byname<wchar_t>;
template<> class collate<wchar_t>;
template<> class collate_byname<wchar_t>;







typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_streambuf<char,char_traits<char> > streambuf;

typedef basic_stringbuf<char, char_traits<char>, allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>, allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>, allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>, allocator<char> > stringstream;

typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;



typedef basic_streambuf<wchar_t, char_traits<wchar_t> > wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;

typedef basic_stringbuf<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wstringstream;

typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;


}
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_fwd.h" 2


namespace std {


template <class _CharT,
          class _Traits = char_traits<_CharT>,
          class _Alloc = allocator<_CharT> >
class basic_string;







typedef basic_string<char, char_traits<char>, allocator<char> > string;


typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> > wstring;


namespace priv {



const char* __get_c_string(const string& __str);

}

}
# 28 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h" 2
# 43 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_uninitialized.h" 1
# 45 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_uninitialized.h"
namespace std {

namespace priv {



template <class _InputIter, class _OutputIter, class _Distance>
inline _OutputIter __ucopy(_InputIter __first, _InputIter __last,
                           _OutputIter __result, _Distance*) {
  _OutputIter __cur = __result;
  {
    for ( ; __first != __last; ++__first, ++__cur)
      _Param_Construct(&*__cur, *__first);
    return __cur;
  }
 
 
}

template <class _InputIter, class _OutputIter, class _Distance>
inline _OutputIter __ucopy(_InputIter __first, _InputIter __last,
                           _OutputIter __result, const input_iterator_tag &, _Distance* __d)
{ return __ucopy(__first, __last, __result, __d); }
# 81 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_uninitialized.h"
template <class _RandomAccessIter, class _OutputIter, class _Distance>
inline _OutputIter __ucopy(_RandomAccessIter __first, _RandomAccessIter __last,
                           _OutputIter __result, const random_access_iterator_tag &, _Distance*) {
  _OutputIter __cur = __result;
  {
    for (_Distance __n = __last - __first; __n > 0; --__n) {
      _Param_Construct(&*__cur, *__first);
      ++__first;
      ++__cur;
    }
    return __cur;
  }
 
 
}


template <class _RandomAccessIter, class _OutputIter>
inline _OutputIter __ucopy(_RandomAccessIter __first, _RandomAccessIter __last, _OutputIter __result)
{ return __ucopy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0); }

inline void*
__ucopy_trivial(const void* __first, const void* __last, void* __result) {

  return (__last == __first) ? __result :
    ((char*)memcpy(__result, __first, ((const char*)__last - (const char*)__first))) +
    ((const char*)__last - (const char*)__first);
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __ucopy_ptrs(_InputIter __first, _InputIter __last, _OutputIter __result,
                                const __false_type& )
{ return __ucopy(__first, __last, __result, random_access_iterator_tag(), (ptrdiff_t*)0); }

template <class _InputIter, class _OutputIter>
inline _OutputIter __ucopy_ptrs(_InputIter __first, _InputIter __last, _OutputIter __result,
                                const __true_type& ) {


  return (_OutputIter)__ucopy_trivial(__first, __last, __result);
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __ucopy_aux(_InputIter __first, _InputIter __last, _OutputIter __result,
                               const __true_type& ) {
  return __ucopy_ptrs(__first, __last, __result,
                      _UseTrivialUCopy((typename ::std::iterator_traits< _InputIter >::value_type*)0,
                                       (typename ::std::iterator_traits< _OutputIter >::value_type*)0)._Answer());
}

template <class _InputIter, class _OutputIter>
inline _OutputIter __ucopy_aux(_InputIter __first, _InputIter __last, _OutputIter __result,
                               const __false_type& ) {
  return __ucopy(__first, __last, __result,
                 typename ::std::iterator_traits< _InputIter >::iterator_category(),
                 (typename ::std::iterator_traits< _InputIter >::difference_type*)0);
}

}

template <class _InputIter, class _ForwardIter>
inline _ForwardIter
uninitialized_copy(_InputIter __first, _InputIter __last, _ForwardIter __result)
{ return ::std::priv:: __ucopy_aux(__first, __last, __result, _BothPtrType< _InputIter, _ForwardIter>::_Answer()); }

inline char*
uninitialized_copy(const char* __first, const char* __last, char* __result)
{ return (char*)::std::priv:: __ucopy_trivial(__first, __last, __result); }


inline wchar_t*
uninitialized_copy(const wchar_t* __first, const wchar_t* __last, wchar_t* __result)
{ return (wchar_t*)::std::priv:: __ucopy_trivial (__first, __last, __result); }



namespace priv {

template <class _InputIter, class _Size, class _ForwardIter>
inline
pair<_InputIter, _ForwardIter>
__ucopy_n(_InputIter __first, _Size __count, _ForwardIter __result,
          const input_iterator_tag &) {
  _ForwardIter __cur = __result;
  {
    for ( ; __count > 0 ; --__count, ++__first, ++__cur)
      _Param_Construct(&*__cur, *__first);
    return pair<_InputIter, _ForwardIter>(__first, __cur);
  }
 
 
}
# 190 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_uninitialized.h"
template <class _RandomAccessIter, class _Size, class _ForwardIter>
inline pair<_RandomAccessIter, _ForwardIter>
__ucopy_n(_RandomAccessIter __first, _Size __count, _ForwardIter __result,
                       const random_access_iterator_tag &) {
  _RandomAccessIter __last = __first + __count;
  return pair<_RandomAccessIter, _ForwardIter>(__last, uninitialized_copy(__first, __last, __result));
}


template <class _InputIter, class _Size, class _ForwardIter>
inline pair<_InputIter, _ForwardIter>
__ucopy_n(_InputIter __first, _Size __count, _ForwardIter __result)
{ return ::std::priv:: __ucopy_n(__first, __count, __result, typename ::std::iterator_traits< _InputIter >::iterator_category()); }



}

template <class _InputIter, class _Size, class _ForwardIter>
inline pair<_InputIter, _ForwardIter>
uninitialized_copy_n(_InputIter __first, _Size __count, _ForwardIter __result)
{ return ::std::priv:: __ucopy_n(__first, __count, __result); }

namespace priv {



template <class _ForwardIter, class _Tp, class _Distance>
inline void __ufill(_ForwardIter __first, _ForwardIter __last, const _Tp& __x, _Distance*) {
  _ForwardIter __cur = __first;
  {
    for ( ; __cur != __last; ++__cur)
      _Param_Construct(&*__cur, __x);
  }
 
}

template <class _ForwardIter, class _Tp, class _Distance>
inline void __ufill(_ForwardIter __first, _ForwardIter __last,
                    const _Tp& __x, const input_iterator_tag &, _Distance* __d)
{ __ufill(__first, __last, __x, __d); }
# 244 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_uninitialized.h"
template <class _ForwardIter, class _Tp, class _Distance>
inline void __ufill(_ForwardIter __first, _ForwardIter __last,
                    const _Tp& __x, const random_access_iterator_tag &, _Distance*) {
  _ForwardIter __cur = __first;
  {
    for (_Distance __n = __last - __first; __n > 0; --__n, ++__cur)
      _Param_Construct(&*__cur, __x);
  }
 
}

}

template <class _ForwardIter, class _Tp>
inline void uninitialized_fill(_ForwardIter __first, _ForwardIter __last, const _Tp& __x) {
  ::std::priv:: __ufill(__first, __last, __x,
                     typename ::std::iterator_traits< _ForwardIter >::iterator_category(),
                     (typename ::std::iterator_traits< _ForwardIter >::difference_type*)0);
}


inline void uninitialized_fill(unsigned char* __first, unsigned char* __last,
                               const unsigned char& __val) {
  unsigned char __tmp = __val;
  memset(__first, __tmp, __last - __first);
}

inline void uninitialized_fill(signed char* __first, signed char* __last,
                               const signed char& __val) {
  signed char __tmp = __val;
  memset(__first, static_cast<unsigned char>(__tmp), __last - __first);
}

inline void uninitialized_fill(char* __first, char* __last, const char& __val) {
  char __tmp = __val;
  memset(__first, static_cast<unsigned char>(__tmp), __last - __first);
}

namespace priv {

template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter __ufill_n(_ForwardIter __first, _Size __n, const _Tp& __x) {
  _ForwardIter __cur = __first;
  {
    for ( ; __n > 0; --__n, ++__cur)
      _Param_Construct(&*__cur, __x);
  }
 
  return __cur;
}

template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter __ufill_n(_ForwardIter __first, _Size __n, const _Tp& __x,
                              const input_iterator_tag &)
{ return __ufill_n(__first, __n, __x); }
# 312 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_uninitialized.h"
template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter __uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x) {
  _ForwardIter __last = __first + __n;
  __ufill(__first, __last, __x, random_access_iterator_tag(), (ptrdiff_t*)0);
  return __last;
}

template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter __ufill_n(_ForwardIter __first, _Size __n, const _Tp& __x,
                              const random_access_iterator_tag &)
{ return __uninitialized_fill_n(__first, __n, __x); }





template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter __uinit_aux_aux(_ForwardIter __first, _Size __n, const _Tp& __val,
                                    const __false_type& )
{ return __uninitialized_fill_n(__first, __n, __val); }

template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter __uinit_aux_aux(_ForwardIter __first, _Size __n, const _Tp& ,
                                    const __true_type& ) {
  memset((unsigned char*)__first, 0, __n * sizeof(_Tp));
  return __first + __n;
}

template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter __uinit_aux(_ForwardIter __first, _Size __n, const _Tp&,
                                const __true_type& )
{ return __first + __n; }

template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter __uinit_aux(_ForwardIter __first, _Size __n, const _Tp& __val,
                                const __false_type& )
{ return __uinit_aux_aux(__first, __n, __val, _HasDefaultZeroValue(__first)._Answer()); }

template <class _ForwardIter, class _Size, class _Tp>
inline _ForwardIter __uninitialized_init(_ForwardIter __first, _Size __n, const _Tp& __val)
{ return __uinit_aux(__first, __n, __val, _UseTrivialInit(__first)._Answer()); }

}

template <class _ForwardIter, class _Size, class _Tp>
inline void
uninitialized_fill_n(_ForwardIter __first, _Size __n, const _Tp& __x)
{ ::std::priv:: __ufill_n(__first, __n, __x, typename ::std::iterator_traits< _ForwardIter >::iterator_category()); }
# 369 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_uninitialized.h"
namespace priv {

template <class _InputIter1, class _InputIter2, class _ForwardIter>
inline _ForwardIter
__uninitialized_copy_copy(_InputIter1 __first1, _InputIter1 __last1,
                          _InputIter2 __first2, _InputIter2 __last2,
                          _ForwardIter __result) {
  _ForwardIter __new_result = uninitialized_copy(__first1, __last1, __result);
  {
    return uninitialized_copy(__first2, __last2, __new_result);
  }
 
 
}




template <class _ForwardIter, class _Tp, class _InputIter>
inline _ForwardIter
__uninitialized_fill_copy(_ForwardIter __result, _ForwardIter __mid, const _Tp& __x,
                          _InputIter __first, _InputIter __last) {
  uninitialized_fill(__result, __mid, __x);
  {
    return uninitialized_copy(__first, __last, __mid);
  }
 
 
}




template <class _Iter, class _Tp>
inline void
__uninitialized_copy_fill(_Iter __first1, _Iter __last1, _Iter __first2, _Iter __last2,
                          const _Tp& __x) {
  _Iter __mid2 = uninitialized_copy(__first1, __last1, __first2);
  {
    uninitialized_fill(__mid2, __last2, __x);
  }
 
}




template <class _InputIter, class _ForwardIter, class _TrivialUCpy>
inline _ForwardIter
__uninitialized_move(_InputIter __first, _InputIter __last, _ForwardIter __result,
                     _TrivialUCpy __trivial_ucpy, const __false_type& )
{ return __ucopy_ptrs(__first, __last, __result, __trivial_ucpy); }

template <class _InputIter, class _ForwardIter, class _TrivialUCpy>
inline
_ForwardIter
__uninitialized_move(_InputIter __first, _InputIter __last, _ForwardIter __result,
                     _TrivialUCpy , const __true_type& ) {

  for (ptrdiff_t __n = __last - __first ; __n > 0; --__n) {
    _Move_Construct(&*__result, *__first);
    ++__first; ++__result;
  }
  return __result;
}

}

}
# 44 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h" 2
# 78 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_base.h" 1
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_base.h"
namespace std {

namespace priv {

template <class _Tp, class _Alloc>
class _String_base {
    typedef _String_base<_Tp, _Alloc> _Self;
protected:
 
public:

  enum {_DEFAULT_SIZE = 4 * sizeof( void * )};

  typedef _Alloc allocator_type;
  typedef _STLP_alloc_proxy<_Tp*, _Tp, allocator_type> _AllocProxy;
  typedef size_t size_type;
private:

  union _Buffers {
    _Tp* _M_end_of_storage;
    _Tp _M_static_buf[_DEFAULT_SIZE];
  } _M_buffers;



protected:

  bool _M_using_static_buf() const
  { return (_M_start_of_storage._M_data == _M_buffers._M_static_buf); }
  _Tp const* _M_Start() const { return _M_start_of_storage._M_data; }
  _Tp* _M_Start() { return _M_start_of_storage._M_data; }
  _Tp const* _M_End() const
  { return _M_using_static_buf() ? _M_buffers._M_static_buf + _DEFAULT_SIZE : _M_buffers._M_end_of_storage; }
  _Tp* _M_End()
  { return _M_using_static_buf() ? _M_buffers._M_static_buf + _DEFAULT_SIZE : _M_buffers._M_end_of_storage; }
  size_type _M_capacity() const
  { return _M_using_static_buf() ? _DEFAULT_SIZE : _M_buffers._M_end_of_storage - _M_start_of_storage._M_data; }
  size_type _M_rest() const
  { return _M_using_static_buf() ? _DEFAULT_SIZE - (_M_finish - _M_buffers._M_static_buf) : _M_buffers._M_end_of_storage - _M_finish; }
# 86 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_base.h"
  _Tp* _M_finish;
  _AllocProxy _M_start_of_storage;

  _Tp const* _M_Finish() const {return _M_finish;}
  _Tp* _M_Finish() {return _M_finish;}


  void _M_allocate_block(size_t __n = _DEFAULT_SIZE);
  void _M_deallocate_block() {

    if (!_M_using_static_buf() && (_M_start_of_storage._M_data != 0))
      _M_start_of_storage.deallocate(_M_start_of_storage._M_data, _M_buffers._M_end_of_storage - _M_start_of_storage._M_data);




  }

  size_t max_size() const {
    const size_type __string_max_size = size_type(-1) / sizeof(_Tp);
    typename allocator_type::size_type __alloc_max_size = _M_start_of_storage.max_size();
    return (min)(__alloc_max_size, __string_max_size) - 1;
  }

  _String_base(const allocator_type& __a)

    : _M_finish(_M_buffers._M_static_buf), _M_start_of_storage(__a, _M_buffers._M_static_buf)



    {}

  _String_base(const allocator_type& __a, size_t __n)

    : _M_finish(_M_buffers._M_static_buf), _M_start_of_storage(__a, _M_buffers._M_static_buf) {



      _M_allocate_block(__n);
    }


  void _M_move_src (_Self &src) {
    if (src._M_using_static_buf()) {
      _M_buffers = src._M_buffers;
      _M_finish = _M_buffers._M_static_buf + (src._M_finish - src._M_start_of_storage._M_data);
      _M_start_of_storage._M_data = _M_buffers._M_static_buf;
    }
    else {
      _M_start_of_storage._M_data = src._M_start_of_storage._M_data;
      _M_finish = src._M_finish;
      _M_buffers._M_end_of_storage = src._M_buffers._M_end_of_storage;
      src._M_start_of_storage._M_data = 0;
    }
  }



  _String_base(__move_source<_Self> src)

    : _M_start_of_storage(__move_source<_AllocProxy>(src.get()._M_start_of_storage)) {
      _M_move_src(src.get());





    }


  ~_String_base() { _M_deallocate_block(); }

  void _M_reset(_Tp *__start, _Tp *__finish, _Tp *__end_of_storage) {

    _M_buffers._M_end_of_storage = __end_of_storage;



    _M_finish = __finish;
    _M_start_of_storage._M_data = __start;
  }

  void _M_swap(_Self &__s) {

    if (_M_using_static_buf()) {
      if (__s._M_using_static_buf()) {
        ::std::swap(_M_buffers, __s._M_buffers);
        _Tp *__tmp = _M_finish;
        _M_finish = _M_start_of_storage._M_data + (__s._M_finish - __s._M_start_of_storage._M_data);
        __s._M_finish = __s._M_buffers._M_static_buf + (__tmp - _M_start_of_storage._M_data);

        _M_start_of_storage.swap(__s._M_start_of_storage);
        _M_start_of_storage._M_data = _M_buffers._M_static_buf;
        __s._M_start_of_storage._M_data = __s._M_buffers._M_static_buf;
      } else {
        __s._M_swap(*this);
        return;
      }
    }
    else if (__s._M_using_static_buf()) {
      _Tp *__tmp = _M_start_of_storage._M_data;
      _Tp *__tmp_finish = _M_finish;
      _Tp *__tmp_end_data = _M_buffers._M_end_of_storage;
      _M_buffers = __s._M_buffers;

      _M_start_of_storage.swap(__s._M_start_of_storage);
      _M_start_of_storage._M_data = _M_buffers._M_static_buf;
      _M_finish = _M_buffers._M_static_buf + (__s._M_finish - __s._M_buffers._M_static_buf);
      __s._M_buffers._M_end_of_storage = __tmp_end_data;
      __s._M_start_of_storage._M_data = __tmp;
      __s._M_finish = __tmp_finish;
    }
    else {
      ::std::swap(_M_buffers._M_end_of_storage, __s._M_buffers._M_end_of_storage);
      _M_start_of_storage.swap(__s._M_start_of_storage);
      ::std::swap(_M_finish, __s._M_finish);
    }





  }

  void __attribute__((noreturn)) _M_throw_length_error() const;
  void __attribute__((noreturn)) _M_throw_out_of_range() const;
};
# 221 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_base.h"
}

}
# 79 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h" 2

namespace std {
# 98 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
namespace priv {
struct _String_reserve_t {};
}
# 120 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
template <class _CharT, class _Traits, class _Alloc>
class basic_string : private ::std::priv:: _String_base<_CharT,_Alloc>



{
private:
  typedef ::std::priv:: _String_base<_CharT,_Alloc> _Base;
  typedef basic_string<_CharT, _Traits, _Alloc> _Self;

public:
  typedef _CharT value_type;
  typedef _Traits traits_type;

  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef typename _Base::size_type size_type;
  typedef ptrdiff_t difference_type;
  typedef random_access_iterator_tag _Iterator_category;

  typedef const value_type* const_iterator;
  typedef value_type* iterator;

  typedef ::std::reverse_iterator<const_iterator> const_reverse_iterator; typedef ::std::reverse_iterator<iterator> reverse_iterator;

# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_npos.h" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_npos.h"
  static const size_t npos = ~(size_t)0;
# 148 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h" 2

  typedef ::std::priv:: _String_reserve_t _Reserve_t;

public:
  typedef typename _Base::allocator_type allocator_type;

  allocator_type get_allocator() const
  { return (const allocator_type&)this->_M_start_of_storage; }


  explicit basic_string(const allocator_type& __a = allocator_type())






      : ::std::priv:: _String_base<_CharT,_Alloc>(__a, _Base::_DEFAULT_SIZE)
  { _M_terminate_string(); }


  basic_string(_Reserve_t, size_t __n,
               const allocator_type& __a = allocator_type())






    : ::std::priv:: _String_base<_CharT,_Alloc>(__a, __n + 1)
  { _M_terminate_string(); }

  basic_string(const _Self&);


  basic_string(const _Self& __s, size_type __pos, size_type __n = npos,
               const allocator_type& __a = allocator_type())
# 204 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
    : ::std::priv:: _String_base<_CharT,_Alloc>(__a) {
    if (__pos > __s.size())
      this->_M_throw_out_of_range();
    else
      _M_range_initialize(__s._M_Start() + __pos,
                          __s._M_Start() + __pos + (min) (__n, __s.size() - __pos));
  }


  basic_string(const _CharT* __s, size_type __n,
               const allocator_type& __a = allocator_type())
# 223 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
    : ::std::priv:: _String_base<_CharT,_Alloc>(__a) {
     
      _M_range_initialize(__s, __s + __n);
    }


  basic_string(const _CharT* __s,
               const allocator_type& __a = allocator_type());






  basic_string(size_type __n, _CharT __c,
               const allocator_type& __a = allocator_type())
# 247 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
    : ::std::priv:: _String_base<_CharT,_Alloc>(__a, __n + 1) {
    this->_M_finish = ::std::priv:: __uninitialized_fill_n(this->_M_Start(), __n, __c);
    _M_terminate_string();
  }


  basic_string(__move_source<_Self> src)
    : ::std::priv:: _String_base<_CharT,_Alloc>(__move_source<_Base>(src.get())) {}





  template <class _InputIterator>
  basic_string(_InputIterator __f, _InputIterator __l,
               const allocator_type & __a = allocator_type())
    : ::std::priv:: _String_base<_CharT,_Alloc>(__a) {
    typedef typename _IsIntegral<_InputIterator>::_Ret _Integral;
    _M_initialize_dispatch(__f, __l, _Integral());
  }
# 301 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
private:
  size_type _M_compute_next_size(size_type __n) {
    const size_type __size = size();
    if (__n > max_size() - __size)
      this->_M_throw_length_error();
    size_type __len = __size + (max)(__n, __size) + 1;
    if (__len > max_size() || __len < __size)
      __len = max_size();
    return __len;
  }

  template <class _InputIter>
  void _M_range_initialize(_InputIter __f, _InputIter __l,
                           const input_iterator_tag &__tag) {
    this->_M_allocate_block();
    _M_construct_null(this->_M_Finish());
    _M_appendT(__f, __l, __tag);
  }

  template <class _ForwardIter>
  void _M_range_initialize(_ForwardIter __f, _ForwardIter __l,
                           const forward_iterator_tag &) {
    difference_type __n = ::std::distance(__f, __l);
    this->_M_allocate_block(__n + 1);
    this->_M_finish = uninitialized_copy(__f, __l, this->_M_Start());
    this->_M_terminate_string();
  }

  template <class _InputIter>
  void _M_range_initializeT(_InputIter __f, _InputIter __l) {
    _M_range_initialize(__f, __l, typename ::std::iterator_traits< _InputIter >::iterator_category());
  }

  template <class _Integer>
  void _M_initialize_dispatch(_Integer __n, _Integer __x, const __true_type& ) {
    this->_M_allocate_block(__n + 1);
    this->_M_finish = ::std::priv:: __uninitialized_fill_n(this->_M_Start(), __n, __x);
    this->_M_terminate_string();
  }

  template <class _InputIter>
  void _M_initialize_dispatch(_InputIter __f, _InputIter __l, const __false_type& ) {
    _M_range_initializeT(__f, __l);
  }

public:
  _Self& operator=(const _Self& __s) {
    if (&__s != this)
      _M_assign(__s._M_Start(), __s._M_Finish());
    return *this;
  }

  _Self& operator=(const _CharT* __s) {
   
    return _M_assign(__s, __s + traits_type::length(__s));
  }

  _Self& operator=(_CharT __c)
  { return assign(static_cast<size_type>(1), __c); }

private:
  static _CharT _M_null()
  { return _CharT(); }

private:

  void _M_construct_null(_CharT* __p) const
  { ::std::_Construct(__p); }
  void _M_terminate_string()
  { _M_construct_null(this->_M_Finish()); }
  bool _M_inside(const _CharT* __s) const {
   
    return (__s >= this->_M_Start()) && (__s < this->_M_Finish());
  }

  void _M_range_initialize(const _CharT* __f, const _CharT* __l) {
   
    ptrdiff_t __n = __l - __f;
    this->_M_allocate_block(__n + 1);
    this->_M_finish = uninitialized_copy(__f, __l, this->_M_Start());
    _M_terminate_string();
  }

public:
  iterator begin() { return this->_M_Start(); }
  iterator end() { return this->_M_Finish(); }
  const_iterator begin() const { return this->_M_Start(); }
  const_iterator end() const { return this->_M_Finish(); }

  reverse_iterator rbegin()
  { return reverse_iterator(this->_M_Finish()); }
  reverse_iterator rend()
  { return reverse_iterator(this->_M_Start()); }
  const_reverse_iterator rbegin() const
  { return const_reverse_iterator(this->_M_Finish()); }
  const_reverse_iterator rend() const
  { return const_reverse_iterator(this->_M_Start()); }

public:
  size_type size() const { return this->_M_Finish() - this->_M_Start(); }
  size_type length() const { return size(); }
  size_type max_size() const { return _Base::max_size(); }

  void resize(size_type __n, _CharT __c) {
    if (__n <= size())
      erase(begin() + __n, end());
    else
      append(__n - size(), __c);
  }

  void resize(size_type __n) { resize(__n, _M_null()); }

private:
  void _M_reserve(size_type);
public:
  void reserve(size_type = 0);

  size_type capacity() const
  { return this->_M_capacity() - 1; }

  void clear() {
    if (!empty()) {
      _Traits::assign(*(this->_M_Start()), _M_null());
      this->_M_finish = this->_M_Start();
    }
  }

  bool empty() const { return this->_M_Start() == this->_M_Finish(); }

public:

  const_reference operator[](size_type __n) const
  { return *(this->_M_Start() + __n); }
  reference operator[](size_type __n)
  { return *(this->_M_Start() + __n); }

  const_reference at(size_type __n) const {
    if (__n >= size())
      this->_M_throw_out_of_range();
    return *(this->_M_Start() + __n);
  }

  reference at(size_type __n) {
    if (__n >= size())
      this->_M_throw_out_of_range();
    return *(this->_M_Start() + __n);
  }

public:

  _Self& operator+=(const _Self& __s) { return append(__s); }
  _Self& operator+=(const _CharT* __s) { return append(__s); }
  _Self& operator+=(_CharT __c) { push_back(__c); return *this; }

private:
  _Self& _M_append(const _CharT* __first, const _CharT* __last);


  template <class _InputIter>
  _Self& _M_appendT(_InputIter __first, _InputIter __last,
                    const input_iterator_tag &) {
    for ( ; __first != __last ; ++__first)
      push_back(*__first);
    return *this;
  }

  template <class _ForwardIter>
  _Self& _M_appendT(_ForwardIter __first, _ForwardIter __last,
                    const forward_iterator_tag &) {
    if (__first != __last) {
      size_type __n = static_cast<size_type>(::std::distance(__first, __last));
      if (__n >= this->_M_rest()) {
        size_type __len = _M_compute_next_size(__n);
        pointer __new_start = this->_M_start_of_storage.allocate(__len, __len);
        pointer __new_finish = uninitialized_copy(this->_M_Start(), this->_M_Finish(), __new_start);
        __new_finish = uninitialized_copy(__first, __last, __new_finish);
        _M_construct_null(__new_finish);
        this->_M_deallocate_block();
        this->_M_reset(__new_start, __new_finish, __new_start + __len);
      }
      else {
        _Traits::assign(*this->_M_finish, *__first++);
        uninitialized_copy(__first, __last, this->_M_Finish() + 1);
        _M_construct_null(this->_M_Finish() + __n);
        this->_M_finish += __n;
      }
    }
    return *this;
  }

  template <class _Integer>
  _Self& _M_append_dispatch(_Integer __n, _Integer __x, const __true_type& )
  { return append((size_type) __n, (_CharT) __x); }

  template <class _InputIter>
  _Self& _M_append_dispatch(_InputIter __f, _InputIter __l, const __false_type& )
  { return _M_appendT(__f, __l, typename ::std::iterator_traits< _InputIter >::iterator_category()); }

public:


  template <class _InputIter>
  _Self& append(_InputIter __first, _InputIter __last) {
    typedef typename _IsIntegral<_InputIter>::_Ret _Integral;
    return _M_append_dispatch(__first, __last, _Integral());
  }
# 515 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
public:
  _Self& append(const _Self& __s)
  { return _M_append(__s._M_Start(), __s._M_Finish()); }

  _Self& append(const _Self& __s,
                size_type __pos, size_type __n) {
    if (__pos > __s.size())
      this->_M_throw_out_of_range();
    return _M_append(__s._M_Start() + __pos,
                     __s._M_Start() + __pos + (min) (__n, __s.size() - __pos));
  }

  _Self& append(const _CharT* __s, size_type __n)
  { return _M_append(__s, __s+__n); }
  _Self& append(const _CharT* __s)
  { return _M_append(__s, __s + traits_type::length(__s)); }
  _Self& append(size_type __n, _CharT __c);

public:
  void push_back(_CharT __c) {
    if (this->_M_rest() == 1 )
      _M_reserve(_M_compute_next_size(1));
    _M_construct_null(this->_M_Finish() + 1);
    _Traits::assign(*(this->_M_Finish()), __c);
    ++this->_M_finish;
  }

  void pop_back() {
    _Traits::assign(*(this->_M_Finish() - 1), _M_null());
    --this->_M_finish;
  }

public:
  _Self& assign(const _Self& __s)
  { return _M_assign(__s._M_Start(), __s._M_Finish()); }

  _Self& assign(const _Self& __s,
                size_type __pos, size_type __n) {
    if (__pos > __s.size())
      this->_M_throw_out_of_range();
    return _M_assign(__s._M_Start() + __pos,
                     __s._M_Start() + __pos + (min) (__n, __s.size() - __pos));
  }

  _Self& assign(const _CharT* __s, size_type __n)
  { return _M_assign(__s, __s + __n); }

  _Self& assign(const _CharT* __s)
  { return _M_assign(__s, __s + _Traits::length(__s)); }

  _Self& assign(size_type __n, _CharT __c);

private:
  _Self& _M_assign(const _CharT* __f, const _CharT* __l);



  template <class _Integer>
  _Self& _M_assign_dispatch(_Integer __n, _Integer __x, const __true_type& )
  { return assign((size_type) __n, (_CharT) __x); }

  template <class _InputIter>
  _Self& _M_assign_dispatch(_InputIter __f, _InputIter __l, const __false_type& ) {
    pointer __cur = this->_M_Start();
    while (__f != __l && __cur != this->_M_Finish()) {
      _Traits::assign(*__cur, *__f);
      ++__f;
      ++__cur;
    }
    if (__f == __l)
      erase(__cur, this->end());
    else
      _M_appendT(__f, __l, typename ::std::iterator_traits< _InputIter >::iterator_category());
    return *this;
  }

public:


  template <class _InputIter>
  _Self& assign(_InputIter __first, _InputIter __last) {
    typedef typename _IsIntegral<_InputIter>::_Ret _Integral;
    return _M_assign_dispatch(__first, __last, _Integral());
  }
# 607 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
public:
  _Self& insert(size_type __pos, const _Self& __s) {
    if (__pos > size())
      this->_M_throw_out_of_range();
    if (__s.size() > max_size() - size())
      this->_M_throw_length_error();
    _M_insert(begin() + __pos, __s._M_Start(), __s._M_Finish(), &__s == this);
    return *this;
  }

  _Self& insert(size_type __pos, const _Self& __s,
                size_type __beg, size_type __n) {
    if (__pos > size() || __beg > __s.size())
      this->_M_throw_out_of_range();
    size_type __len = (min) (__n, __s.size() - __beg);
    if (__len > max_size() - size())
      this->_M_throw_length_error();
    _M_insert(begin() + __pos,
              __s._M_Start() + __beg, __s._M_Start() + __beg + __len, &__s == this);
    return *this;
  }
  _Self& insert(size_type __pos, const _CharT* __s, size_type __n) {
   
    if (__pos > size())
      this->_M_throw_out_of_range();
    if (__n > max_size() - size())
      this->_M_throw_length_error();
    _M_insert(begin() + __pos, __s, __s + __n, _M_inside(__s));
    return *this;
  }

  _Self& insert(size_type __pos, const _CharT* __s) {
   
    if (__pos > size())
      this->_M_throw_out_of_range();
    size_type __len = _Traits::length(__s);
    if (__len > max_size() - size())
      this->_M_throw_length_error();
    _M_insert(this->_M_Start() + __pos, __s, __s + __len, _M_inside(__s));
    return *this;
  }

  _Self& insert(size_type __pos, size_type __n, _CharT __c) {
    if (__pos > size())
      this->_M_throw_out_of_range();
    if (__n > max_size() - size())
      this->_M_throw_length_error();
    insert(begin() + __pos, __n, __c);
    return *this;
  }

  iterator insert(iterator __p, _CharT __c) {
   
    if (__p == end()) {
      push_back(__c);
      return this->_M_Finish() - 1;
    }
    else
      return _M_insert_aux(__p, __c);
  }

  void insert(iterator __p, size_t __n, _CharT __c);

private:
  void _M_insert(iterator __p, const _CharT* __first, const _CharT* __last, bool __self_ref);

  pointer _M_insert_aux(pointer, _CharT);

  void _M_copy(const _CharT* __f, const _CharT* __l, _CharT* __res) {
   
   
    _Traits::copy(__res, __f, __l - __f);
  }

  void _M_move(const _CharT* __f, const _CharT* __l, _CharT* __res) {
   
    _Traits::move(__res, __f, __l - __f);
  }



  template <class _ForwardIter>
  void _M_insert_overflow(iterator __pos, _ForwardIter __first, _ForwardIter __last,
                          size_type __n) {
    size_type __len = _M_compute_next_size(__n);
    pointer __new_start = this->_M_start_of_storage.allocate(__len, __len);
    pointer __new_finish = uninitialized_copy(this->_M_Start(), __pos, __new_start);
    __new_finish = uninitialized_copy(__first, __last, __new_finish);
    __new_finish = uninitialized_copy(__pos, this->_M_Finish(), __new_finish);
    _M_construct_null(__new_finish);
    this->_M_deallocate_block();
    this->_M_reset(__new_start, __new_finish, __new_start + __len);
  }

  template <class _InputIter>
  void _M_insertT(iterator __p, _InputIter __first, _InputIter __last,
                  const input_iterator_tag &) {
    for ( ; __first != __last; ++__first) {
      __p = insert(__p, *__first);
      ++__p;
    }
  }

  template <class _ForwardIter>
  void _M_insertT(iterator __pos, _ForwardIter __first, _ForwardIter __last,
                  const forward_iterator_tag &) {
    if (__first != __last) {
      size_type __n = ::std::distance(__first, __last);
      if (__n < this->_M_rest()) {
        const size_type __elems_after = this->_M_finish - __pos;
        if (__elems_after >= __n) {
          uninitialized_copy((this->_M_Finish() - __n) + 1, this->_M_Finish() + 1, this->_M_Finish() + 1);
          this->_M_finish += __n;
          _Traits::move(__pos + __n, __pos, (__elems_after - __n) + 1);
          _M_copyT(__first, __last, __pos);
        }
        else {
          pointer __old_finish = this->_M_Finish();
          _ForwardIter __mid = __first;
          ::std::advance(__mid, __elems_after + 1);
          ::std::uninitialized_copy(__mid, __last, this->_M_Finish() + 1);
          this->_M_finish += __n - __elems_after;
          uninitialized_copy(__pos, __old_finish + 1, this->_M_Finish());
          this->_M_finish += __elems_after;
          _M_copyT(__first, __mid, __pos);
        }
      }
      else {
        _M_insert_overflow(__pos, __first, __last, __n);
      }
    }
  }

  template <class _Integer>
  void _M_insert_dispatch(iterator __p, _Integer __n, _Integer __x,
                          const __true_type& )
  { insert(__p, (size_type) __n, (_CharT) __x); }

  template <class _InputIter>
  void _M_insert_dispatch(iterator __p, _InputIter __first, _InputIter __last,
                          const __false_type& ) {
   

    const _Self __self(__first, __last, get_allocator());
    _M_insertT(__p, __self.begin(), __self.end(), forward_iterator_tag());
  }

  template <class _InputIterator>
  void _M_copyT(_InputIterator __first, _InputIterator __last, pointer __result) {
   
    for ( ; __first != __last; ++__first, ++__result)
      _Traits::assign(*__result, *__first);
  }


  void _M_copyT(const _CharT* __f, const _CharT* __l, _CharT* __res) {
   
   
    _Traits::copy(__res, __f, __l - __f);
  }

public:


  template <class _InputIter>
  void insert(iterator __p, _InputIter __first, _InputIter __last) {
    typedef typename _IsIntegral<_InputIter>::_Ret _Integral;
    _M_insert_dispatch(__p, __first, __last, _Integral());
  }




public:
  void insert(iterator __p, const _CharT* __f, const _CharT* __l) {
   
    _M_insert(__p, __f, __l, _M_inside(__f));
  }


public:
  _Self& erase(size_type __pos = 0, size_type __n = npos) {
    if (__pos > size())
      this->_M_throw_out_of_range();
    erase(begin() + __pos, begin() + __pos + (min) (__n, size() - __pos));
    return *this;
  }

  iterator erase(iterator __pos) {

    _Traits::move(__pos, __pos + 1, this->_M_Finish() - __pos);
    --this->_M_finish;
    return __pos;
  }

  iterator erase(iterator __first, iterator __last) {
    if (__first != __last) {

      traits_type::move(__first, __last, (this->_M_Finish() - __last) + 1);
      this->_M_finish = this->_M_Finish() - (__last - __first);
    }
    return __first;
  }

public:

  _Self& replace(size_type __pos, size_type __n, const _Self& __s) {
    const size_type __size = size();
    if (__pos > __size)
      this->_M_throw_out_of_range();
    const size_type __len = (min) (__n, __size - __pos);
    if (__s.size() > max_size() - (__size - __len))
      this->_M_throw_length_error();
    return _M_replace(begin() + __pos, begin() + __pos + __len,
                      __s._M_Start(), __s._M_Finish(), &__s == this);
  }

  _Self& replace(size_type __pos1, size_type __n1, const _Self& __s,
                 size_type __pos2, size_type __n2) {
    const size_type __size1 = size();
    const size_type __size2 = __s.size();
    if (__pos1 > __size1 || __pos2 > __size2)
      this->_M_throw_out_of_range();
    const size_type __len1 = (min) (__n1, __size1 - __pos1);
    const size_type __len2 = (min) (__n2, __size2 - __pos2);
    if (__len2 > max_size() - (__size1 - __len1))
      this->_M_throw_length_error();
    return _M_replace(begin() + __pos1, begin() + __pos1 + __len1,
                      __s._M_Start() + __pos2, __s._M_Start() + __pos2 + __len2, &__s == this);
  }

  _Self& replace(size_type __pos, size_type __n1,
                 const _CharT* __s, size_type __n2) {
   
    const size_type __size = size();
    if (__pos > __size)
      this->_M_throw_out_of_range();
    const size_type __len = (min) (__n1, __size - __pos);
    if (__n2 > max_size() - (__size - __len))
      this->_M_throw_length_error();
    return _M_replace(begin() + __pos, begin() + __pos + __len,
                      __s, __s + __n2, _M_inside(__s));
  }

  _Self& replace(size_type __pos, size_type __n1, const _CharT* __s) {
   
    return replace(__pos, __n1, __s, _Traits::length(__s));
  }

  _Self& replace(size_type __pos, size_type __n1,
                 size_type __n2, _CharT __c) {
    const size_type __size = size();
    if (__pos > __size)
      this->_M_throw_out_of_range();
    const size_type __len = (min) (__n1, __size - __pos);
    if (__n2 > max_size() - (__size - __len))
      this->_M_throw_length_error();
    return replace(begin() + __pos, begin() + __pos + __len, __n2, __c);
  }

  _Self& replace(iterator __first, iterator __last, const _Self& __s) {
   
    return _M_replace(__first, __last, __s._M_Start(), __s._M_Finish(), &__s == this);
  }

  _Self& replace(iterator __first, iterator __last,
                 const _CharT* __s, size_type __n) {
   
   
    return _M_replace(__first, __last, __s, __s + __n, _M_inside(__s));
  }

  _Self& replace(iterator __first, iterator __last,
                 const _CharT* __s) {
   
   
    return _M_replace(__first, __last, __s, __s + _Traits::length(__s), _M_inside(__s));
  }

  _Self& replace(iterator __first, iterator __last, size_type __n, _CharT __c);

private:
  _Self& _M_replace(iterator __first, iterator __last,
                    const _CharT* __f, const _CharT* __l, bool __self_ref);


  template <class _Integer>
  _Self& _M_replace_dispatch(iterator __first, iterator __last,
                             _Integer __n, _Integer __x, const __true_type& ) {
   
    return replace(__first, __last, (size_type) __n, (_CharT) __x);
  }

  template <class _InputIter>
  _Self& _M_replace_dispatch(iterator __first, iterator __last,
                             _InputIter __f, _InputIter __l, const __false_type& ) {
   

    const _Self __self(__f, __l, get_allocator());
    return _M_replace(__first, __last, __self._M_Start(), __self._M_Finish(), false);
  }

public:


  template <class _InputIter>
  _Self& replace(iterator __first, iterator __last,
                 _InputIter __f, _InputIter __l) {
   
    typedef typename _IsIntegral<_InputIter>::_Ret _Integral;
    return _M_replace_dispatch(__first, __last, __f, __l, _Integral());
  }



public:
  _Self& replace(iterator __first, iterator __last,
                 const _CharT* __f, const _CharT* __l) {
   
   
    return _M_replace(__first, __last, __f, __l, _M_inside(__f));
  }


public:

  size_type copy(_CharT* __s, size_type __n, size_type __pos = 0) const {
   
    if (__pos > size())
      this->_M_throw_out_of_range();
    const size_type __len = (min) (__n, size() - __pos);
    _Traits::copy(__s, this->_M_Start() + __pos, __len);
    return __len;
  }

  void swap(_Self& __s) { this->_M_swap(__s); }




public:

  const _CharT* c_str() const { return this->_M_Start(); }
  const _CharT* data() const { return this->_M_Start(); }

public:
  size_type find(const _Self& __s, size_type __pos = 0) const
  { return find(__s._M_Start(), __pos, __s.size()); }

  size_type find(const _CharT* __s, size_type __pos = 0) const
  { return find(__s, __pos, _Traits::length(__s)); }

  size_type find(const _CharT* __s, size_type __pos, size_type __n) const;


  size_type find(_CharT __c) const { return find(__c, 0); }
  size_type find(_CharT __c, size_type __pos ) const;

public:
  size_type rfind(const _Self& __s, size_type __pos = npos) const
  { return rfind(__s._M_Start(), __pos, __s.size()); }

  size_type rfind(const _CharT* __s, size_type __pos = npos) const
  { return rfind(__s, __pos, _Traits::length(__s)); }

  size_type rfind(const _CharT* __s, size_type __pos, size_type __n) const;
  size_type rfind(_CharT __c, size_type __pos = npos) const;

public:
  size_type find_first_of(const _Self& __s, size_type __pos = 0) const
  { return find_first_of(__s._M_Start(), __pos, __s.size()); }

  size_type find_first_of(const _CharT* __s, size_type __pos = 0) const
  { return find_first_of(__s, __pos, _Traits::length(__s)); }

  size_type find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;

  size_type find_first_of(_CharT __c, size_type __pos = 0) const
  { return find(__c, __pos); }

public:
  size_type find_last_of(const _Self& __s, size_type __pos = npos) const
  { return find_last_of(__s._M_Start(), __pos, __s.size()); }

  size_type find_last_of(const _CharT* __s, size_type __pos = npos) const
  { return find_last_of(__s, __pos, _Traits::length(__s)); }

  size_type find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;

  size_type find_last_of(_CharT __c, size_type __pos = npos) const
  { return rfind(__c, __pos); }

public:
  size_type find_first_not_of(const _Self& __s, size_type __pos = 0) const
  { return find_first_not_of(__s._M_Start(), __pos, __s.size()); }

  size_type find_first_not_of(const _CharT* __s, size_type __pos = 0) const
  { return find_first_not_of(__s, __pos, _Traits::length(__s)); }

  size_type find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const;

  size_type find_first_not_of(_CharT __c, size_type __pos = 0) const;

public:
  size_type find_last_not_of(const _Self& __s, size_type __pos = npos) const
  { return find_last_not_of(__s._M_Start(), __pos, __s.size()); }

  size_type find_last_not_of(const _CharT* __s, size_type __pos = npos) const
  { return find_last_not_of(__s, __pos, _Traits::length(__s)); }

  size_type find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const;

  size_type find_last_not_of(_CharT __c, size_type __pos = npos) const;

public:
  _Self substr(size_type __pos = 0, size_type __n = npos) const
  { return _Self(*this, __pos, __n, get_allocator()); }

public:
  int compare(const _Self& __s) const
  { return _M_compare(this->_M_Start(), this->_M_Finish(), __s._M_Start(), __s._M_Finish()); }

  int compare(size_type __pos1, size_type __n1, const _Self& __s) const {
    if (__pos1 > size())
      this->_M_throw_out_of_range();
    return _M_compare(this->_M_Start() + __pos1,
                      this->_M_Start() + __pos1 + (min) (__n1, size() - __pos1),
                      __s._M_Start(), __s._M_Finish());
  }

  int compare(size_type __pos1, size_type __n1, const _Self& __s,
              size_type __pos2, size_type __n2) const {
    if (__pos1 > size() || __pos2 > __s.size())
      this->_M_throw_out_of_range();
    return _M_compare(this->_M_Start() + __pos1,
                      this->_M_Start() + __pos1 + (min) (__n1, size() - __pos1),
                      __s._M_Start() + __pos2,
                      __s._M_Start() + __pos2 + (min) (__n2, __s.size() - __pos2));
  }

  int compare(const _CharT* __s) const {
   
    return _M_compare(this->_M_Start(), this->_M_Finish(), __s, __s + _Traits::length(__s));
  }

  int compare(size_type __pos1, size_type __n1, const _CharT* __s) const {
   
    if (__pos1 > size())
      this->_M_throw_out_of_range();
    return _M_compare(this->_M_Start() + __pos1,
                      this->_M_Start() + __pos1 + (min) (__n1, size() - __pos1),
                      __s, __s + _Traits::length(__s));
  }

  int compare(size_type __pos1, size_type __n1, const _CharT* __s, size_type __n2) const {
   
    if (__pos1 > size())
      this->_M_throw_out_of_range();
    return _M_compare(this->_M_Start() + __pos1,
                      this->_M_Start() + __pos1 + (min) (__n1, size() - __pos1),
                      __s, __s + __n2);
  }

public:
  static int _M_compare(const _CharT* __f1, const _CharT* __l1,
                                   const _CharT* __f2, const _CharT* __l2) {
    const ptrdiff_t __n1 = __l1 - __f1;
    const ptrdiff_t __n2 = __l2 - __f2;
    const int cmp = _Traits::compare(__f1, __f2, (min) (__n1, __n2));
    return cmp != 0 ? cmp : (__n1 < __n2 ? -1 : (__n1 > __n2 ? 1 : 0));
  }





};
# 1104 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
}
# 1114 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
namespace std {





template <class _CharT, class _Traits, class _Alloc>
inline void
swap(basic_string<_CharT,_Traits,_Alloc>& __x,
     basic_string<_CharT,_Traits,_Alloc>& __y)
{ __x.swap(__y); }
# 1135 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
template <class _CharT, class _Traits, class _Alloc>
struct __move_traits<basic_string<_CharT, _Traits, _Alloc> > {
  typedef __true_type implemented;

  typedef typename __move_traits<_Alloc>::complete complete;
};
# 1150 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h"
namespace priv {

template <class _CharT, class _Traits, class _Alloc>
void _S_string_copy(const basic_string<_CharT,_Traits,_Alloc>& __s,
                               _CharT* __buf, size_t __n);







inline const char*
__get_c_string(const string& __str) { return __str.c_str(); }

}

}

# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
namespace std {







template <class _CharT, class _Traits, class _Alloc>
inline basic_string<_CharT,_Traits,_Alloc>
operator+(const basic_string<_CharT,_Traits,_Alloc>& __s,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
  typedef basic_string<_CharT,_Traits,_Alloc> _Str;
  typedef typename _Str::_Reserve_t _Reserve_t;


  _Str __result = _Str(_Reserve_t(), __s.size() + __y.size(), __s.get_allocator());



  __result.append(__s);
  __result.append(__y);
  return __result;
}

template <class _CharT, class _Traits, class _Alloc>
inline basic_string<_CharT,_Traits,_Alloc>
operator+(const _CharT* __s,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  typedef basic_string<_CharT,_Traits,_Alloc> _Str;
  typedef typename _Str::_Reserve_t _Reserve_t;
  const size_t __n = _Traits::length(__s);

  _Str __result = _Str(_Reserve_t(), __n + __y.size(), __y.get_allocator());



  __result.append(__s, __s + __n);
  __result.append(__y);
  return __result;
}

template <class _CharT, class _Traits, class _Alloc>
inline basic_string<_CharT,_Traits,_Alloc>
operator+(_CharT __c,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
  typedef basic_string<_CharT,_Traits,_Alloc> _Str;
  typedef typename _Str::_Reserve_t _Reserve_t;

  _Str __result = _Str(_Reserve_t(), 1 + __y.size(), __y.get_allocator());



  __result.push_back(__c);
  __result.append(__y);
  return __result;
}

template <class _CharT, class _Traits, class _Alloc>
inline basic_string<_CharT,_Traits,_Alloc>
operator+(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const _CharT* __s) {
 
  typedef basic_string<_CharT,_Traits,_Alloc> _Str;
  typedef typename _Str::_Reserve_t _Reserve_t;
  const size_t __n = _Traits::length(__s);

  _Str __result = _Str(_Reserve_t(), __x.size() + __n, __x.get_allocator());



  __result.append(__x);
  __result.append(__s, __s + __n);
  return __result;
}

template <class _CharT, class _Traits, class _Alloc>
inline basic_string<_CharT,_Traits,_Alloc>
operator+(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const _CharT __c) {
  typedef basic_string<_CharT,_Traits,_Alloc> _Str;
  typedef typename _Str::_Reserve_t _Reserve_t;

  _Str __result = _Str(_Reserve_t(), __x.size() + 1, __x.get_allocator());



  __result.append(__x);
  __result.push_back(__c);
  return __result;
}
# 285 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
template <class _CharT, class _Traits, class _Alloc>
inline bool
operator==(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
  return __x.size() == __y.size() && _Traits::compare(__x.data(), __y.data(), __x.size()) == 0;
}
# 309 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
template <class _CharT, class _Traits, class _Alloc>
inline bool
operator==(const _CharT* __s,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  size_t __n = _Traits::length(__s);
  return __n == __y.size() && _Traits::compare(__s, __y.data(), __n) == 0;
}

template <class _CharT, class _Traits, class _Alloc>
inline bool
operator==(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const _CharT* __s) {
 
  size_t __n = _Traits::length(__s);
  return __x.size() == __n && _Traits::compare(__x.data(), __s, __n) == 0;
}
# 349 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
template <class _CharT, class _Traits, class _Alloc>
inline bool
operator<(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
  return basic_string<_CharT,_Traits,_Alloc> ::_M_compare(__x.begin(), __x.end(),
                                                          __y.begin(), __y.end()) < 0;
}
# 375 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
template <class _CharT, class _Traits, class _Alloc>
inline bool
operator<(const _CharT* __s,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  size_t __n = _Traits::length(__s);
  return basic_string<_CharT,_Traits,_Alloc> ::_M_compare(__s, __s + __n,
                                                          __y.begin(), __y.end()) < 0;
}

template <class _CharT, class _Traits, class _Alloc>
inline bool
operator<(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const _CharT* __s) {
 
  size_t __n = _Traits::length(__s);
  return basic_string<_CharT,_Traits,_Alloc> ::_M_compare(__x.begin(), __x.end(),
                                                          __s, __s + __n) < 0;
}
# 423 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
template <class _CharT, class _Traits, class _Alloc>
inline bool
operator!=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const basic_string<_CharT,_Traits,_Alloc>& __y)
{ return !(__x == __y); }

template <class _CharT, class _Traits, class _Alloc>
inline bool
operator>(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const basic_string<_CharT,_Traits,_Alloc>& __y)
{ return __y < __x; }

template <class _CharT, class _Traits, class _Alloc>
inline bool
operator<=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const basic_string<_CharT,_Traits,_Alloc>& __y)
{ return !(__y < __x); }

template <class _CharT, class _Traits, class _Alloc>
inline bool
operator>=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const basic_string<_CharT,_Traits,_Alloc>& __y)
{ return !(__x < __y); }
# 463 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
template <class _CharT, class _Traits, class _Alloc>
inline bool
operator!=(const _CharT* __s,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  return !(__s == __y);
}

template <class _CharT, class _Traits, class _Alloc>
inline bool
operator!=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const _CharT* __s) {
 
  return !(__x == __s);
}
# 497 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
template <class _CharT, class _Traits, class _Alloc>
inline bool
operator>(const _CharT* __s,
          const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  return __y < __s;
}

template <class _CharT, class _Traits, class _Alloc>
inline bool
operator>(const basic_string<_CharT,_Traits,_Alloc>& __x,
          const _CharT* __s) {
 
  return __s < __x;
}
# 531 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
template <class _CharT, class _Traits, class _Alloc>
inline bool
operator<=(const _CharT* __s,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  return !(__y < __s);
}

template <class _CharT, class _Traits, class _Alloc>
inline bool
operator<=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const _CharT* __s) {
 
  return !(__s < __x);
}
# 565 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
template <class _CharT, class _Traits, class _Alloc>
inline bool
operator>=(const _CharT* __s,
           const basic_string<_CharT,_Traits,_Alloc>& __y) {
 
  return !(__s < __y);
}

template <class _CharT, class _Traits, class _Alloc>
inline bool
operator>=(const basic_string<_CharT,_Traits,_Alloc>& __x,
           const _CharT* __s) {
 
  return !(__x < __s);
}
# 599 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_operators.h"
}
# 1170 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.c" 1
# 32 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.c"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ctraits_fns.h" 1
# 28 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ctraits_fns.h"
namespace std {

namespace priv {

template <class _Traits>
struct _Eq_traits
  : public binary_function<typename _Traits::char_type,
                           typename _Traits::char_type,
                           bool> {
  bool operator()(const typename _Traits::char_type& __x,
                  const typename _Traits::char_type& __y) const
  { return _Traits::eq(__x, __y); }
};

template <class _Traits>
struct _Eq_char_bound
  : public unary_function<typename _Traits::char_type, bool> {
  typename _Traits::char_type __val;
  _Eq_char_bound(typename _Traits::char_type __c) : __val(__c) {}
  bool operator()(const typename _Traits::char_type& __x) const
  { return _Traits::eq(__x, __val); }
};

template <class _Traits>
struct _Neq_char_bound
  : public unary_function<typename _Traits::char_type, bool>
{
  typename _Traits::char_type __val;
  _Neq_char_bound(typename _Traits::char_type __c) : __val(__c) {}
  bool operator()(const typename _Traits::char_type& __x) const
  { return !_Traits::eq(__x, __val); }
};

template <class _Traits>
struct _Eq_int_bound
  : public unary_function<typename _Traits::char_type, bool> {
  typename _Traits::int_type __val;

  _Eq_int_bound(typename _Traits::int_type __c) : __val(__c) {}
  bool operator()(const typename _Traits::char_type& __x) const
  { return _Traits::eq_int_type(_Traits::to_int_type(__x), __val); }
};
# 83 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ctraits_fns.h"
}

}
# 33 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.c" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function.h" 1
# 41 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function.h"
namespace std {

template <class _Tp>
struct not_equal_to : public binary_function<_Tp, _Tp, bool> {
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x != __y; }
};

template <class _Tp>
struct greater : public binary_function<_Tp, _Tp, bool> {
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x > __y; }
};

template <class _Tp>
struct greater_equal : public binary_function<_Tp, _Tp, bool> {
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x >= __y; }
};

template <class _Tp>
struct less_equal : public binary_function<_Tp, _Tp, bool> {
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x <= __y; }
};

template <class _Tp>
struct divides : public binary_function<_Tp, _Tp, _Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x / __y; }
};

template <class _Tp>
struct modulus : public binary_function<_Tp, _Tp, _Tp> {
  _Tp operator()(const _Tp& __x, const _Tp& __y) const { return __x % __y; }
};

template <class _Tp>
struct negate : public unary_function<_Tp, _Tp> {
  _Tp operator()(const _Tp& __x) const { return -__x; }
};

template <class _Tp>
struct logical_and : public binary_function<_Tp, _Tp, bool> {
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x && __y; }
};

template <class _Tp>
struct logical_or : public binary_function<_Tp, _Tp,bool> {
  bool operator()(const _Tp& __x, const _Tp& __y) const { return __x || __y; }
};

template <class _Tp>
struct logical_not : public unary_function<_Tp, bool> {
  bool operator()(const _Tp& __x) const { return !__x; }
};



template <class _Tp> inline _Tp identity_element(plus<_Tp>) { return _Tp(0); }
template <class _Tp> inline _Tp identity_element(multiplies<_Tp>) { return _Tp(1); }
# 135 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function.h"
template <class _Predicate>
class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool> {
  typedef unary_function<typename _Predicate::argument_type, bool> _Base;
public:
  typedef typename _Base::argument_type argument_type;
private:
  typedef typename __call_traits<argument_type>::const_param_type _ArgParamType;
protected:
  _Predicate _M_pred;
public:
  explicit unary_negate(const _Predicate& __x) : _M_pred(__x) {}
  bool operator()(_ArgParamType __x) const {
    return !_M_pred(__x);
  }
};

template <class _Predicate>
inline unary_negate<_Predicate>
not1(const _Predicate& __pred) {
  return unary_negate<_Predicate>(__pred);
}

template <class _Predicate>
class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
                             typename _Predicate::second_argument_type,
                             bool> {
  typedef binary_function<typename _Predicate::first_argument_type,
                          typename _Predicate::second_argument_type,
                          bool> _Base;
public:
  typedef typename _Base::first_argument_type first_argument_type;
  typedef typename _Base::second_argument_type second_argument_type;
private:
  typedef typename __call_traits<first_argument_type>::const_param_type _FstArgParamType;
  typedef typename __call_traits<second_argument_type>::const_param_type _SndArgParamType;
protected:
  _Predicate _M_pred;
public:
  explicit binary_negate(const _Predicate& __x) : _M_pred(__x) {}
  bool operator()(_FstArgParamType __x, _SndArgParamType __y) const {
    return !_M_pred(__x, __y);
  }
};

template <class _Predicate>
inline binary_negate<_Predicate>
not2(const _Predicate& __pred) {
  return binary_negate<_Predicate>(__pred);
}

template <class _Operation>
class binder1st :
    public unary_function<typename _Operation::second_argument_type,
                          typename _Operation::result_type > {
  typedef unary_function<typename _Operation::second_argument_type,
                         typename _Operation::result_type > _Base;
public:
  typedef typename _Base::argument_type argument_type;
  typedef typename _Base::result_type result_type;
private:
  typedef typename __call_traits<argument_type>::param_type _ArgParamType;
  typedef typename __call_traits<argument_type>::const_param_type _ConstArgParamType;
  typedef typename __call_traits<typename _Operation::first_argument_type>::const_param_type _ValueParamType;
protected:

  _Operation op;
  typename _Operation::first_argument_type _M_value;
public:
  binder1st(const _Operation& __x, _ValueParamType __y)
    : op(__x), _M_value(__y) {}

  result_type operator()(_ConstArgParamType __x) const
  { return op(_M_value, __x); }

  result_type operator()(_ArgParamType __x) const
  { return op(_M_value, __x); }
};

template <class _Operation, class _Tp>
inline binder1st<_Operation>
bind1st(const _Operation& __fn, const _Tp& __x) {
  typedef typename _Operation::first_argument_type _Arg1_type;
  return binder1st<_Operation>(__fn, _Arg1_type(__x));
}

template <class _Operation>
class binder2nd
  : public unary_function<typename _Operation::first_argument_type,
                          typename _Operation::result_type> {
  typedef unary_function<typename _Operation::first_argument_type,
                         typename _Operation::result_type> _Base;
public:
  typedef typename _Base::argument_type argument_type;
  typedef typename _Base::result_type result_type;
private:
  typedef typename __call_traits<argument_type>::param_type _ArgParamType;
  typedef typename __call_traits<argument_type>::const_param_type _ConstArgParamType;
  typedef typename __call_traits<typename _Operation::second_argument_type>::const_param_type _ValueParamType;
protected:

  _Operation op;
  typename _Operation::second_argument_type value;
public:
  binder2nd(const _Operation& __x, _ValueParamType __y)
      : op(__x), value(__y) {}

  result_type operator()(_ConstArgParamType __x) const
  { return op(__x, value); }

  result_type operator()(_ArgParamType __x) const
  { return op(__x, value); }
};

template <class _Operation, class _Tp>
inline binder2nd<_Operation>
bind2nd(const _Operation& __fn, const _Tp& __x) {
  typedef typename _Operation::second_argument_type _Arg2_type;
  return binder2nd<_Operation>(__fn, _Arg2_type(__x));
}




template <class _Operation1, class _Operation2>
class unary_compose :
  public unary_function<typename _Operation2::argument_type,
                        typename _Operation1::result_type> {
  typedef unary_function<typename _Operation2::argument_type,
                         typename _Operation1::result_type> _Base;
public:
  typedef typename _Base::argument_type argument_type;
  typedef typename _Base::result_type result_type;
private:
  typedef typename __call_traits<argument_type>::const_param_type _ArgParamType;
protected:
  _Operation1 _M_fn1;
  _Operation2 _M_fn2;
public:
  unary_compose(const _Operation1& __x, const _Operation2& __y)
    : _M_fn1(__x), _M_fn2(__y) {}

  result_type operator()(_ArgParamType __x) const {
    return _M_fn1(_M_fn2(__x));
  }
};

template <class _Operation1, class _Operation2>
inline unary_compose<_Operation1,_Operation2>
compose1(const _Operation1& __fn1, const _Operation2& __fn2) {
  return unary_compose<_Operation1,_Operation2>(__fn1, __fn2);
}

template <class _Operation1, class _Operation2, class _Operation3>
class binary_compose :
    public unary_function<typename _Operation2::argument_type,
                          typename _Operation1::result_type> {
  typedef unary_function<typename _Operation2::argument_type,
                         typename _Operation1::result_type> _Base;
public:
  typedef typename _Base::argument_type argument_type;
  typedef typename _Base::result_type result_type;
private:
  typedef typename __call_traits<argument_type>::const_param_type _ArgParamType;
protected:
  _Operation1 _M_fn1;
  _Operation2 _M_fn2;
  _Operation3 _M_fn3;
public:
  binary_compose(const _Operation1& __x, const _Operation2& __y,
                 const _Operation3& __z)
    : _M_fn1(__x), _M_fn2(__y), _M_fn3(__z) { }

  result_type operator()(_ArgParamType __x) const {
    return _M_fn1(_M_fn2(__x), _M_fn3(__x));
  }
};

template <class _Operation1, class _Operation2, class _Operation3>
inline binary_compose<_Operation1, _Operation2, _Operation3>
compose2(const _Operation1& __fn1, const _Operation2& __fn2,
         const _Operation3& __fn3) {
  return binary_compose<_Operation1,_Operation2,_Operation3>(__fn1, __fn2, __fn3);
}


template <class _Tp> struct identity : public ::std::priv:: _Identity<_Tp> {};

template <class _Pair> struct select1st : public ::std::priv:: _Select1st<_Pair> {};
template <class _Pair> struct select2nd : public ::std::priv:: _Select2nd<_Pair> {};

template <class _Arg1, class _Arg2>
struct project1st : public ::std::priv:: _Project1st<_Arg1, _Arg2> {};

template <class _Arg1, class _Arg2>
struct project2nd : public ::std::priv:: _Project2nd<_Arg1, _Arg2> {};






namespace priv {

template <class _Result>
struct _Constant_void_fun {
  typedef _Result result_type;
  result_type _M_val;

  _Constant_void_fun(const result_type& __v) : _M_val(__v) {}
  const result_type& operator()() const { return _M_val; }
};

}

template <class _Result>
struct constant_void_fun : public ::std::priv:: _Constant_void_fun<_Result> {
  constant_void_fun(const _Result& __v)
    : ::std::priv:: _Constant_void_fun<_Result>(__v) {}
};

template <class _Result, class _Argument = _Result >
struct constant_unary_fun : public ::std::priv:: _Constant_unary_fun<_Result, _Argument> {
  constant_unary_fun(const _Result& __v)
    : ::std::priv:: _Constant_unary_fun<_Result, _Argument>(__v) {}
};

template <class _Result, class _Arg1 = _Result, class _Arg2 = _Arg1 >
struct constant_binary_fun
  : public ::std::priv:: _Constant_binary_fun<_Result, _Arg1, _Arg2> {
  constant_binary_fun(const _Result& __v)
    : ::std::priv:: _Constant_binary_fun<_Result, _Arg1, _Arg2>(__v) {}
};

template <class _Result>
inline constant_void_fun<_Result> constant0(const _Result& __val) {
  return constant_void_fun<_Result>(__val);
}

template <class _Result>
inline constant_unary_fun<_Result,_Result> constant1(const _Result& __val) {
  return constant_unary_fun<_Result,_Result>(__val);
}

template <class _Result>
inline constant_binary_fun<_Result,_Result,_Result>
constant2(const _Result& __val) {
  return constant_binary_fun<_Result,_Result,_Result>(__val);
}



class subtractive_rng : public unary_function<unsigned long, unsigned long> {
private:
  unsigned long _M_table[55];
  unsigned long _M_index1;
  unsigned long _M_index2;
public:
  unsigned long operator()(unsigned long __limit) {
    _M_index1 = (_M_index1 + 1) % 55;
    _M_index2 = (_M_index2 + 1) % 55;
    _M_table[_M_index1] = _M_table[_M_index1] - _M_table[_M_index2];
    return _M_table[_M_index1] % __limit;
  }

  void _M_initialize(unsigned long __seed) {
    unsigned long __k = 1;
    _M_table[54] = __seed;
    unsigned long __i;
    for (__i = 0; __i < 54; __i++) {
        unsigned long __ii = (21 * (__i + 1) % 55) - 1;
        _M_table[__ii] = __k;
        __k = __seed - __k;
        __seed = _M_table[__ii];
    }
    for (int __loop = 0; __loop < 4; __loop++) {
        for (__i = 0; __i < 55; __i++)
            _M_table[__i] = _M_table[__i] - _M_table[(1 + __i + 30) % 55];
    }
    _M_index1 = 0;
    _M_index2 = 31;
  }

  subtractive_rng(unsigned int __seed) { _M_initialize(__seed); }
  subtractive_rng() { _M_initialize(161803398ul); }
};



}

# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function_adaptors.h" 1
# 58 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function_adaptors.h"
namespace std {
# 498 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function_adaptors.h"
template <class _Ret, class _Tp>
class mem_fun_t : public unary_function<_Tp*,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(void);
public:
  explicit mem_fun_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(_Tp* __p) const { return (__p->*_M_f)(); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp>
class const_mem_fun_t : public unary_function<const _Tp*,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(void) const;
public:
  explicit const_mem_fun_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(const _Tp* __p) const { return (__p->*_M_f)(); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp>
class mem_fun_ref_t : public unary_function<_Tp,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(void);
public:
  explicit mem_fun_ref_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(_Tp& __r) const { return (__r.*_M_f)(); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp>
class const_mem_fun_ref_t : public unary_function<_Tp,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(void) const;
public:
  explicit const_mem_fun_ref_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(const _Tp& __r) const { return (__r.*_M_f)(); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp, class _Arg>
class mem_fun1_t : public binary_function<_Tp*,_Arg,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(_Arg);
public:
  explicit mem_fun1_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(_Tp* __p, _Arg __x) const { return (__p->*_M_f)(__x); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp, class _Arg>
class const_mem_fun1_t : public binary_function<const _Tp*,_Arg,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(_Arg) const;
public:
  explicit const_mem_fun1_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(const _Tp* __p, _Arg __x) const
    { return (__p->*_M_f)(__x); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp, class _Arg>
class mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(_Arg);
public:
  explicit mem_fun1_ref_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(_Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }
private:
  __fun_type _M_f;
};

template <class _Ret, class _Tp, class _Arg>
class const_mem_fun1_ref_t : public binary_function<_Tp,_Arg,_Ret> {
  typedef _Ret (_Tp::*__fun_type)(_Arg) const;
public:
  explicit const_mem_fun1_ref_t(__fun_type __pf) : _M_f(__pf) {}
  _Ret operator()(const _Tp& __r, _Arg __x) const { return (__r.*_M_f)(__x); }
private:
  __fun_type _M_f;
};

template <class _Arg, class _Result>
class pointer_to_unary_function : public unary_function<_Arg, _Result> {
protected:
  _Result (*_M_ptr)(_Arg);
public:
  pointer_to_unary_function() {}
  explicit pointer_to_unary_function(_Result (*__x)(_Arg)) : _M_ptr(__x) {}
  _Result operator()(_Arg __x) const { return _M_ptr(__x); }
};

template <class _Arg1, class _Arg2, class _Result>
class pointer_to_binary_function :
  public binary_function<_Arg1,_Arg2,_Result> {
protected:
    _Result (*_M_ptr)(_Arg1, _Arg2);
public:
    pointer_to_binary_function() {}
    explicit pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) {}
    _Result operator()(_Arg1 __x, _Arg2 __y) const {
      return _M_ptr(__x, __y);
    }
};
# 718 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function_adaptors.h"
template <class _Result, class _Tp>
inline mem_fun_t<_Result,_Tp>
mem_fun(_Result (_Tp::*__f)()) { return mem_fun_t<_Result,_Tp>(__f); }

template <class _Result, class _Tp>
inline const_mem_fun_t<_Result,_Tp>
mem_fun(_Result (_Tp::*__f)() const) { return const_mem_fun_t<_Result,_Tp>(__f); }

template <class _Result, class _Tp>
inline mem_fun_ref_t<_Result,_Tp>
mem_fun_ref(_Result (_Tp::*__f)()) { return mem_fun_ref_t<_Result,_Tp>(__f); }

template <class _Result, class _Tp>
inline const_mem_fun_ref_t<_Result,_Tp>
mem_fun_ref(_Result (_Tp::*__f)() const) { return const_mem_fun_ref_t<_Result,_Tp>(__f); }

template <class _Result, class _Tp, class _Arg>
inline mem_fun1_t<_Result,_Tp,_Arg>
mem_fun(_Result (_Tp::*__f)(_Arg)) { return mem_fun1_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline const_mem_fun1_t<_Result,_Tp,_Arg>
mem_fun(_Result (_Tp::*__f)(_Arg) const) { return const_mem_fun1_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline mem_fun1_ref_t<_Result,_Tp,_Arg>
mem_fun_ref(_Result (_Tp::*__f)(_Arg)) { return mem_fun1_ref_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline const_mem_fun1_ref_t<_Result,_Tp,_Arg>
mem_fun_ref(_Result (_Tp::*__f)(_Arg) const) { return const_mem_fun1_ref_t<_Result,_Tp,_Arg>(__f); }




template <class _Result, class _Tp, class _Arg>
inline mem_fun1_t<_Result,_Tp,_Arg>
mem_fun1(_Result (_Tp::*__f)(_Arg)) { return mem_fun1_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline const_mem_fun1_t<_Result,_Tp,_Arg>
mem_fun1(_Result (_Tp::*__f)(_Arg) const) { return const_mem_fun1_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline mem_fun1_ref_t<_Result,_Tp,_Arg>
mem_fun1_ref(_Result (_Tp::*__f)(_Arg)) { return mem_fun1_ref_t<_Result,_Tp,_Arg>(__f); }

template <class _Result, class _Tp, class _Arg>
inline const_mem_fun1_ref_t<_Result,_Tp,_Arg>
mem_fun1_ref(_Result (_Tp::*__f)(_Arg) const) { return const_mem_fun1_ref_t<_Result,_Tp,_Arg>(__f); }





template <class _Arg, class _Result>
inline pointer_to_unary_function<_Arg, _Result>
ptr_fun(_Result (*__f)(_Arg))
{ return pointer_to_unary_function<_Arg, _Result>(__f); }

template <class _Arg1, class _Arg2, class _Result>
inline pointer_to_binary_function<_Arg1,_Arg2,_Result>
ptr_fun(_Result (*__f)(_Arg1, _Arg2))
{ return pointer_to_binary_function<_Arg1,_Arg2,_Result>(__f); }

}
# 428 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_function.h" 2
# 37 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.c" 2
# 53 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.c"
namespace std {

namespace priv {


template <class _Traits>
struct _Not_within_traits : public unary_function<typename _Traits::char_type, bool> {
  typedef typename _Traits::char_type _CharT;
  const _CharT* _M_first;
  const _CharT* _M_last;

  _Not_within_traits(const _CharT* __f, const _CharT* __l)
    : _M_first(__f), _M_last(__l) {}

  bool operator()(const _CharT& __x) const {
    return find_if(_M_first, _M_last,
                   ::std::priv:: _Eq_char_bound<_Traits>(__x)) == _M_last;
  }
};

template <class _InputIter, class _CharT, class _Traits>
inline _InputIter __str_find_first_of_aux(_InputIter __first1, _InputIter __last1,
                                          const _CharT* __first2, const _CharT* __last2,
                                          _Traits*, const __true_type& )
{ return __find_first_of(__first1, __last1, __first2, __last2); }

template <class _InputIter, class _CharT, class _Traits>
inline _InputIter __str_find_first_of_aux(_InputIter __first1, _InputIter __last1,
                                          const _CharT* __first2, const _CharT* __last2,
                                          _Traits*, const __false_type& )
{ return __find_first_of(__first1, __last1, __first2, __last2, ::std::priv:: _Eq_traits<_Traits>()); }

template <class _InputIter, class _CharT, class _Traits>
inline _InputIter __str_find_first_of(_InputIter __first1, _InputIter __last1,
                                      const _CharT* __first2, const _CharT* __last2,
                                      _Traits* __traits) {

  typedef typename _IsSTLportClass<_Traits>::_Ret _STLportTraits;




  return __str_find_first_of_aux(__first1, __last1, __first2, __last2, __traits, _STLportTraits());
}

template <class _InputIter, class _CharT, class _Traits>
inline _InputIter __str_find_first_not_of_aux3(_InputIter __first1, _InputIter __last1,
                                               const _CharT* __first2, const _CharT* __last2,
                                               _Traits* , const __true_type& __useStrcspnLikeAlgo)
{ return __find_first_of_aux2(__first1, __last1, __first2, __last2, __first2, not1(_Identity<bool>()), __useStrcspnLikeAlgo); }

template <class _InputIter, class _CharT, class _Traits>
inline _InputIter __str_find_first_not_of_aux3(_InputIter __first1, _InputIter __last1,
                                               const _CharT* __first2, const _CharT* __last2,
                                               _Traits* , const __false_type& )
{ return ::std::find_if(__first1, __last1, ::std::priv:: _Not_within_traits<_Traits>(__first2, __last2)); }

template <class _InputIter, class _CharT, class _Tp, class _Traits>
inline _InputIter __str_find_first_not_of_aux2(_InputIter __first1, _InputIter __last1,
                                               const _CharT* __first2, const _CharT* __last2,
                                               _Tp* __pt, _Traits* __traits) {
  typedef typename _IsIntegral<_Tp>::_Ret _IsIntegral;
  typedef typename _IsCharLikeType<_CharT>::_Ret _IsCharLike;
  typedef typename _Land2<_IsIntegral, _IsCharLike>::_Ret _UseStrcspnLikeAlgo;
  return __str_find_first_not_of_aux3(__first1, __last1, __first2, __last2, __traits, _UseStrcspnLikeAlgo());
}

template <class _InputIter, class _CharT, class _Traits>
inline _InputIter __str_find_first_not_of_aux1(_InputIter __first1, _InputIter __last1,
                                               const _CharT* __first2, const _CharT* __last2,
                                               _Traits* __traits, const __true_type& )
{ return __str_find_first_not_of_aux2(__first1, __last1, __first2, __last2,
                                      (typename ::std::iterator_traits< _InputIter >::value_type*)0, __traits); }

template <class _InputIter, class _CharT, class _Traits>
inline _InputIter __str_find_first_not_of_aux1(_InputIter __first1, _InputIter __last1,
                                               const _CharT* __first2, const _CharT* __last2,
                                               _Traits*, const __false_type& )
{ return ::std::find_if(__first1, __last1, ::std::priv:: _Not_within_traits<_Traits>(__first2, __last2)); }

template <class _InputIter, class _CharT, class _Traits>
inline _InputIter __str_find_first_not_of(_InputIter __first1, _InputIter __last1,
                                          const _CharT* __first2, const _CharT* __last2,
                                          _Traits* __traits) {

  typedef typename _IsSTLportClass<_Traits>::_Ret _STLportTraits;




  return __str_find_first_not_of_aux1(__first1, __last1, __first2, __last2, __traits, _STLportTraits());
}





}






template <class _CharT, class _Traits, class _Alloc>
void basic_string<_CharT,_Traits,_Alloc>::reserve(size_type __res_arg) {
  if (__res_arg > max_size())
    this->_M_throw_length_error();

  size_type __n = (max)(__res_arg, size()) + 1;
  if (__n < this->_M_capacity())
    return;

  _M_reserve(__n);
}

template <class _CharT, class _Traits, class _Alloc>
void basic_string<_CharT,_Traits,_Alloc>::_M_reserve(size_type __n) {
  pointer __new_start = this->_M_start_of_storage.allocate(__n, __n);
  pointer __new_finish = ::std::priv:: __ucopy(this->_M_Start(), this->_M_Finish(), __new_start);
  _M_construct_null(__new_finish);
  this->_M_deallocate_block();
  this->_M_reset(__new_start, __new_finish, __new_start + __n);
}

template <class _CharT, class _Traits, class _Alloc>
basic_string<_CharT,_Traits,_Alloc>&
basic_string<_CharT,_Traits,_Alloc>::append(size_type __n, _CharT __c) {
  if (__n > 0) {
    if (__n > max_size() - size())
      this->_M_throw_length_error();
    if (__n >= this->_M_rest())
      _M_reserve(_M_compute_next_size(__n));
    ::std::priv:: __uninitialized_fill_n(this->_M_finish + 1, __n - 1, __c);
    _M_construct_null(this->_M_finish + __n);
    _Traits::assign(*end(), __c);
    this->_M_finish += __n;
  }
  return *this;
}

template <class _CharT, class _Traits, class _Alloc>
basic_string<_CharT, _Traits, _Alloc>&
basic_string<_CharT, _Traits, _Alloc>::_M_append(const _CharT* __first, const _CharT* __last) {
  if (__first != __last) {
    size_type __n = static_cast<size_type>(__last - __first);
    if (__n >= this->_M_rest()) {
      size_type __len = _M_compute_next_size(__n);
      pointer __new_start = this->_M_start_of_storage.allocate(__len, __len);
      pointer __new_finish = ::std::priv:: __ucopy(this->_M_Start(), this->_M_Finish(), __new_start);
      __new_finish = ::std::priv:: __ucopy(__first, __last, __new_finish);
      _M_construct_null(__new_finish);
      this->_M_deallocate_block();
      this->_M_reset(__new_start, __new_finish, __new_start + __len);
    }
    else {
      const _CharT* __f1 = __first;
      ++__f1;
      ::std::priv:: __ucopy(__f1, __last, this->_M_finish + 1);
      _M_construct_null(this->_M_finish + __n);
      _Traits::assign(*end(), *__first);
      this->_M_finish += __n;
    }
  }
  return *this;
}

template <class _CharT, class _Traits, class _Alloc>
basic_string<_CharT,_Traits,_Alloc>&
basic_string<_CharT,_Traits,_Alloc>::assign(size_type __n, _CharT __c) {
  if (__n <= size()) {
    _Traits::assign(this->_M_Start(), __n, __c);
    erase(begin() + __n, end());
  }
  else {
    if (__n < capacity()) {
      _Traits::assign(this->_M_Start(), size(), __c);
      append(__n - size(), __c);
    }
    else {
      _Self __str(__n, __c);
      this->swap(__str);
    }
  }
  return *this;
}

template <class _CharT, class _Traits, class _Alloc>
basic_string<_CharT,_Traits,_Alloc>&
basic_string<_CharT,_Traits,_Alloc>::_M_assign(const _CharT* __f, const _CharT* __l) {
  ptrdiff_t __n = __l - __f;
  if (static_cast<size_type>(__n) <= size()) {
    _Traits::move(this->_M_Start(), __f, __n);
    erase(begin() + __n, end());
  }
  else {
    _Traits::move(this->_M_Start(), __f, size());
    _M_append(__f + size(), __l);
  }
  return *this;
}

template <class _CharT, class _Traits, class _Alloc>
_CharT* basic_string<_CharT,_Traits,_Alloc> ::_M_insert_aux(_CharT* __p,
                                                            _CharT __c) {
  pointer __new_pos = __p;
  if (this->_M_rest() > 1 ) {
    _M_construct_null(this->_M_finish + 1);
    _Traits::move(__p + 1, __p, this->_M_finish - __p);
    _Traits::assign(*__p, __c);
    ++this->_M_finish;
  }
  else {
    size_type __len = _M_compute_next_size(1);
    pointer __new_start = this->_M_start_of_storage.allocate(__len, __len);
    __new_pos = ::std::priv:: __ucopy(this->_M_Start(), __p, __new_start);
    _Traits::assign(*__new_pos, __c);
    pointer __new_finish = __new_pos + 1;
    __new_finish = ::std::priv:: __ucopy(__p, this->_M_finish, __new_finish);
    _M_construct_null(__new_finish);
    this->_M_deallocate_block();
    this->_M_reset(__new_start, __new_finish, __new_start + __len);
  }
  return __new_pos;
}

template <class _CharT, class _Traits, class _Alloc>
void basic_string<_CharT,_Traits,_Alloc>::insert(iterator __pos,
                                                 size_t __n, _CharT __c) {
  if (__n != 0) {
    if (this->_M_rest() > __n) {
      const size_type __elems_after = this->_M_finish - __pos;
      pointer __old_finish = this->_M_finish;
      if (__elems_after >= __n) {
        ::std::priv:: __ucopy((this->_M_finish - __n) + 1, this->_M_finish + 1, this->_M_finish + 1);
        this->_M_finish += __n;
        _Traits::move(__pos + __n, __pos, (__elems_after - __n) + 1);
        _Traits::assign(__pos, __n, __c);
      }
      else {
        ::std::priv:: __uninitialized_fill_n(this->_M_finish + 1, __n - __elems_after - 1, __c);
        this->_M_finish += __n - __elems_after;
        ::std::priv:: __ucopy(__pos, __old_finish + 1, this->_M_finish);
        this->_M_finish += __elems_after;
        _Traits::assign(__pos, __elems_after + 1, __c);
      }
    }
    else {
      size_type __len = _M_compute_next_size(__n);
      pointer __new_start = this->_M_start_of_storage.allocate(__len, __len);
      pointer __new_finish = ::std::priv:: __ucopy(this->_M_Start(), __pos, __new_start);
      __new_finish = ::std::priv:: __uninitialized_fill_n(__new_finish, __n, __c);
      __new_finish = ::std::priv:: __ucopy(__pos, this->_M_finish, __new_finish);
      _M_construct_null(__new_finish);
      this->_M_deallocate_block();
      this->_M_reset(__new_start, __new_finish, __new_start + __len);
    }
  }
}

template <class _CharT, class _Traits, class _Alloc>
void basic_string<_CharT,_Traits,_Alloc>::_M_insert(iterator __pos,
                                                    const _CharT* __first, const _CharT* __last,
                                                    bool __self_ref) {

  if (__first != __last) {
    const size_t __n = __last - __first;
    if (this->_M_rest() > __n) {
      const size_t __elems_after = this->_M_finish - __pos;
      pointer __old_finish = this->_M_finish;
      if (__elems_after >= __n) {
        ::std::priv:: __ucopy((this->_M_finish - __n) + 1, this->_M_finish + 1, this->_M_finish + 1);
        this->_M_finish += __n;
        _Traits::move(__pos + __n, __pos, (__elems_after - __n) + 1);
        if (!__self_ref || __last < __pos) {
          _M_copy(__first, __last, __pos);
        }
        else {

          if (__first >= __pos) {

            __first += __n;
            __last += __n;
            _M_copy(__first, __last, __pos);
          }
          else {

            _M_move(__first, __last, __pos);
          }
        }
      }
      else {
        const_iterator __mid = __first;
        __mid += __elems_after + 1;
        ::std::priv:: __ucopy(__mid, __last, this->_M_finish + 1);
        this->_M_finish += __n - __elems_after;
        ::std::priv:: __ucopy(__pos, __old_finish + 1, this->_M_finish);
        this->_M_finish += __elems_after;
        if (!__self_ref)
          _M_copy(__first, __mid, __pos);
        else
          _M_move(__first, __mid, __pos);
      }
    }
    else {
      size_type __len = _M_compute_next_size(__n);
      pointer __new_start = this->_M_start_of_storage.allocate(__len, __len);
      pointer __new_finish = ::std::priv:: __ucopy(this->_M_Start(), __pos, __new_start);
      __new_finish = ::std::priv:: __ucopy(__first, __last, __new_finish);
      __new_finish = ::std::priv:: __ucopy(__pos, this->_M_finish, __new_finish);
      _M_construct_null(__new_finish);
      this->_M_deallocate_block();
      this->_M_reset(__new_start, __new_finish, __new_start + __len);
    }
  }
}

template <class _CharT, class _Traits, class _Alloc>
basic_string<_CharT,_Traits,_Alloc>&
basic_string<_CharT,_Traits,_Alloc> ::replace(iterator __first, iterator __last,
                                              size_type __n, _CharT __c) {
  size_type __len = (size_type)(__last - __first);

  if (__len >= __n) {
    _Traits::assign(__first, __n, __c);
    erase(__first + __n, __last);
  }
  else {
    _Traits::assign(__first, __len, __c);
    insert(__last, __n - __len, __c);
  }
  return *this;
}

template <class _CharT, class _Traits, class _Alloc>
basic_string<_CharT,_Traits,_Alloc>&
basic_string<_CharT,_Traits,_Alloc> ::_M_replace(iterator __first, iterator __last,
                                                 const _CharT* __f, const _CharT* __l,
                                                 bool __self_ref) {
  const ptrdiff_t __n = __l - __f;
  const difference_type __len = __last - __first;
  if (__len >= __n) {
    if (!__self_ref || __l < __first || __f >= __last)
      _M_copy(__f, __l, __first);
    else
      _M_move(__f, __l, __first);
    erase(__first + __n, __last);
  } else if (!__self_ref || (__f >= __last) || (__l <= __first)) {
    const_iterator __m = __f + __len;
    _M_copy(__f, __m, __first);
    _M_insert(__last, __m, __l, __self_ref );
  } else if (__f < __first) {
    const_iterator __m = __f + __len;

    const difference_type __off_dest = __first - this->begin();
    const difference_type __off_src = __f - this->begin();
    _M_insert(__last, __m, __l, true);
    _Traits::move(begin() + __off_dest, begin() + __off_src, __len);
  } else {
    const_iterator __m = __f + __len;
    _Traits::move(__first, __f, __len);
    _M_insert(__last, __m, __l, true);
  }
  return *this;
}

template <class _CharT, class _Traits, class _Alloc>
typename basic_string<_CharT,_Traits,_Alloc>::size_type basic_string<_CharT,_Traits,_Alloc>::find( const _CharT* __s, size_type __pos,
                                                         size_type __n) const
{
  const size_t __len = size();
  if (__pos >= __len || __pos + __n > __len) {
    if ( __n == 0 && __pos <= __len ) {
      return __pos;
    }
    return npos;
  }

  const_pointer __result =
    ::std::search(this->_M_Start() + __pos, this->_M_Finish(),
                      __s, __s + __n, ::std::priv:: _Eq_traits<_Traits>());
  return __result != this->_M_Finish() ? __result - this->_M_Start() : npos;
}

template <class _CharT, class _Traits, class _Alloc>
typename basic_string<_CharT,_Traits,_Alloc>::size_type basic_string<_CharT,_Traits,_Alloc>::find(_CharT __c, size_type __pos) const
{
  if (__pos >= size()) {
    return npos;
  }

  const_pointer __result =
    ::std::find_if(this->_M_Start() + __pos, this->_M_Finish(),
                       ::std::priv:: _Eq_char_bound<_Traits>(__c));
  return __result != this->_M_Finish() ? __result - this->_M_Start() : npos;
}

template <class _CharT, class _Traits, class _Alloc>
typename basic_string<_CharT,_Traits,_Alloc>::size_type basic_string<_CharT,_Traits,_Alloc>::rfind(const _CharT* __s, size_type __pos,
                                                         size_type __n) const
{
  const size_type __len = size();
  if ( __len < __n ) {
    return npos;
  }
  const_pointer __last = this->_M_Start() + (min)( __len - __n, __pos) + __n;
  if ( __n == 0 ) {
    return __last - this->_M_Start();
  }
  const_pointer __result = ::std::find_end(this->_M_Start(), __last,
                                               __s, __s + __n, ::std::priv:: _Eq_traits<_Traits>());
  return __result != __last ? __result - this->_M_Start() : npos;
}

template <class _CharT, class _Traits, class _Alloc>
typename basic_string<_CharT,_Traits,_Alloc>::size_type basic_string<_CharT,_Traits,_Alloc>::rfind(_CharT __c, size_type __pos) const
{
  const size_type __len = size();
  if ( __len < 1 ) {
    return npos;
  }
  const_iterator __last = begin() + (min)(__len - 1, __pos) + 1;
  const_reverse_iterator __rresult =
    ::std::find_if(const_reverse_iterator(__last), rend(),
                       ::std::priv:: _Eq_char_bound<_Traits>(__c));
  return __rresult != rend() ? (__rresult.base() - 1) - begin() : npos;
}

template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find_first_of(const _CharT* __s, size_type __pos,
                                                    size_type __n) const {
  if (__pos >= size())
    return npos;
  else {
    const_iterator __result = ::std::priv:: __str_find_first_of(begin() + __pos, end(),
                                                             __s, __s + __n,
                                                             static_cast<_Traits*>(0));
    return __result != end() ? __result - begin() : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc>
 typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find_last_of(const _CharT* __s, size_type __pos,
                                                   size_type __n) const
{
  const size_type __len = size();
  if ( __len < 1 ) {
    return npos;
  }
  const const_iterator __last = begin() + (min)(__len - 1, __pos) + 1;
  const const_reverse_iterator __rresult =
    ::std::priv:: __str_find_first_of(const_reverse_iterator(__last), rend(),
                                   __s, __s + __n,
                                   static_cast<_Traits*>(0));
  return __rresult != rend() ? (__rresult.base() - 1) - begin() : npos;
}


template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find_first_not_of(const _CharT* __s, size_type __pos,
                                                        size_type __n) const {
  typedef typename _Traits::char_type _CharType;
  if (__pos >= size())
    return npos;
  else {
    const_pointer __result = ::std::priv:: __str_find_first_not_of(this->_M_Start() + __pos, this->_M_Finish(),
                                                                static_cast<const _CharType*>(__s),
                                                                static_cast<const _CharType*>(__s) + __n,
                                                                static_cast<_Traits*>(0));
    return __result != this->_M_finish ? __result - this->_M_Start() : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc> typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc> ::find_first_not_of(_CharT __c, size_type __pos) const {
  if (1 > size())
    return npos;
  else {
    const_pointer __result = ::std::find_if(this->_M_Start() + __pos, this->_M_Finish(),
                                                ::std::priv:: _Neq_char_bound<_Traits>(__c));
    return __result != this->_M_finish ? __result - this->_M_Start() : npos;
  }
}

template <class _CharT, class _Traits, class _Alloc>
typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT,_Traits,_Alloc>::find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
{
  typedef typename _Traits::char_type _CharType;
  const size_type __len = size();
  if ( __len < 1 ) {
    return npos;
  }
  const_iterator __last = begin() + (min)(__len - 1, __pos) + 1;
  const_reverse_iterator __rlast = const_reverse_iterator(__last);
  const_reverse_iterator __rresult =
    ::std::priv:: __str_find_first_not_of(__rlast, rend(),
                                       static_cast<const _CharType*>(__s),
                                       static_cast<const _CharType*>(__s) + __n,
                                       static_cast<_Traits*>(0));
  return __rresult != rend() ? (__rresult.base() - 1) - begin() : npos;
}

template <class _CharT, class _Traits, class _Alloc>
typename basic_string<_CharT,_Traits,_Alloc>::size_type
basic_string<_CharT, _Traits, _Alloc>::find_last_not_of(_CharT __c, size_type __pos) const
{
  const size_type __len = size();
  if ( __len < 1 ) {
    return npos;
  }
  const_iterator __last = begin() + (min)(__len - 1, __pos) + 1;
  const_reverse_iterator __rlast = const_reverse_iterator(__last);
  const_reverse_iterator __rresult =
    ::std::find_if(__rlast, rend(),
                       ::std::priv:: _Neq_char_bound<_Traits>(__c));
  return __rresult != rend() ? (__rresult.base() - 1) - begin() : npos;
}


namespace priv {


template <class _CharT, class _Traits, class _Alloc>
void _S_string_copy(const basic_string<_CharT,_Traits,_Alloc>& __s,
                               _CharT* __buf, size_t __n) {
  if (__n > 0) {
    __n = (min) (__n - 1, __s.size());
    ::std::copy(__s.begin(), __s.begin() + __n, __buf);
    __buf[__n] = _CharT();
  }
}

}

}

# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_range_errors.h" 1
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_range_errors.h"
namespace std {
void __attribute__((noreturn)) __attribute__((visibility("default"))) __stl_throw_runtime_error(const char* __msg);
void __attribute__((noreturn)) __attribute__((visibility("default"))) __stl_throw_range_error(const char* __msg);
void __attribute__((noreturn)) __attribute__((visibility("default"))) __stl_throw_out_of_range(const char* __msg);
void __attribute__((noreturn)) __attribute__((visibility("default"))) __stl_throw_length_error(const char* __msg);
void __attribute__((noreturn)) __attribute__((visibility("default"))) __stl_throw_invalid_argument(const char* __msg);
void __attribute__((noreturn)) __attribute__((visibility("default"))) __stl_throw_overflow_error(const char* __msg);
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_range_errors.h"
}
# 592 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.c" 2

namespace std {

namespace priv {


template <class _Tp, class _Alloc>
void _String_base<_Tp,_Alloc>::_M_throw_length_error() const
{ __stl_throw_length_error("basic_string"); }

template <class _Tp, class _Alloc>
void _String_base<_Tp, _Alloc>::_M_throw_out_of_range() const
{ __stl_throw_out_of_range("basic_string"); }

template <class _Tp, class _Alloc>
void _String_base<_Tp, _Alloc>::_M_allocate_block(size_t __n) {
  if ((__n <= (max_size() + 1)) && (__n > 0)) {

    if (__n > _DEFAULT_SIZE) {
      this->_M_start_of_storage._M_data = _M_start_of_storage.allocate(__n, __n);
      this->_M_finish = this->_M_start_of_storage._M_data;
      this->_M_buffers._M_end_of_storage = this->_M_start_of_storage._M_data + __n;
    }





  } else {
    this->_M_throw_length_error();
  }
}


}
# 638 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.c"
template <class _CharT, class _Traits, class _Alloc>
basic_string<_CharT, _Traits, _Alloc>::basic_string(const _CharT* __s,
                                                    const allocator_type& __a)
  : ::std::priv:: _String_base<_CharT,_Alloc>(__a) {
 
  _M_range_initialize(__s, __s + traits_type::length(__s));
}

template <class _CharT, class _Traits, class _Alloc>
basic_string<_CharT, _Traits, _Alloc>::basic_string(const basic_string<_CharT, _Traits, _Alloc> & __s)
  : ::std::priv:: _String_base<_CharT,_Alloc>(__s.get_allocator())
{ _M_range_initialize(__s._M_Start(), __s._M_Finish()); }







template <class _CharT, class _Traits, class _Alloc>
const size_t basic_string<_CharT, _Traits, _Alloc>::npos;


}
# 1174 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string.h" 2
# 30 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_hash.h" 1
# 23 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_hash.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_hash_fun.h" 1
# 38 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_hash_fun.h"
namespace std {

template <class _Key> struct hash { };

namespace priv {

inline size_t __stl_hash_string(const char* __s) {
 
  unsigned long __h = 0;
  for ( ; *__s; ++__s)
    __h = 5*__h + *__s;

  return size_t(__h);
}

}

template<>
struct hash<char*> {
  size_t operator()(const char* __s) const {
   
    return ::std::priv:: __stl_hash_string(__s);
  }
};

template<>
struct hash<const char*> {
  size_t operator()(const char* __s) const {
   
    return ::std::priv:: __stl_hash_string(__s);
  }
};

template<> struct hash<char> {
  size_t operator()(char __x) const { return __x; }
};
template<> struct hash<unsigned char> {
  size_t operator()(unsigned char __x) const { return __x; }
};

template<> struct hash<signed char> {
  size_t operator()(unsigned char __x) const { return __x; }
};

template<> struct hash<short> {
  size_t operator()(short __x) const { return __x; }
};
template<> struct hash<unsigned short> {
  size_t operator()(unsigned short __x) const { return __x; }
};
template<> struct hash<int> {
  size_t operator()(int __x) const { return __x; }
};


template<> struct hash<unsigned int> {
  size_t operator()(unsigned int __x) const { return __x; }
};
# 108 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_hash_fun.h"
template<> struct hash<long> {
  size_t operator()(long __x) const { return __x; }
};
template<> struct hash<unsigned long> {
  size_t operator()(unsigned long __x) const { return __x; }
};
# 124 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_hash_fun.h"
template<>
struct hash<void *>
{
    union __vp {
        size_t s;
        void *p;
    };

    size_t operator()(void *__x) const
      {
        __vp vp;
        vp.p = __x;
        return vp.s;
      }
};

}
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_hash.h" 2






namespace std {

template <class _CharT, class _Traits, class _Alloc>
inline size_t
__stl_string_hash(const basic_string<_CharT,_Traits,_Alloc>& __s) {
  unsigned long __h = 0;
  size_t __len = __s.size();
  const _CharT* __data = __s.data();
  for ( size_t __i = 0; __i < __len; ++__i)
    __h = (__h << 2) + __h + __data[__i];
  return size_t(__h);
}



template <class _CharT, class _Traits, class _Alloc>
struct hash<basic_string<_CharT,_Traits,_Alloc> > {
  size_t operator()(const basic_string<_CharT,_Traits,_Alloc>& __s) const
    { return __stl_string_hash(__s); }
};
# 69 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_hash.h"
}
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_io.h" 1
# 23 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_io.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.h" 1
# 23 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios_base.h" 1
# 22 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios_base.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_stdexcept_base.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_stdexcept_base.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_exception.h" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_stdexcept_base.h" 2
# 23 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios_base.h" 2







# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_locale.h" 1
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_locale.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h" 1
# 82 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/pthread.h" 1
# 29 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/pthread.h"
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pthread.h" 1 3 4
# 31 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pthread.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/time.h" 1 3 4
# 32 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pthread.h" 2 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/signal.h" 1 3 4
# 33 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pthread.h" 2 3 4
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sched.h" 1 3 4
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sched.h" 3 4
extern "C" {






struct sched_param {
    int sched_priority;
};

extern int sched_setscheduler(pid_t, int, const struct sched_param *);
extern int sched_getscheduler(pid_t);
extern int sched_yield(void);
extern int sched_get_priority_max(int policy);
extern int sched_get_priority_min(int policy);
extern int sched_setparam(pid_t, const struct sched_param *);
extern int sched_getparam(pid_t, struct sched_param *);
extern int sched_rr_get_interval(pid_t pid, struct timespec *tp);
# 73 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\sched.h" 3 4
extern int clone(int (*fn)(void *), void *child_stack, int flags, void* arg, ...);


}
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pthread.h" 2 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/limits.h" 1 3 4
# 35 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pthread.h" 2 3 4





typedef struct
{
    int volatile value;
} pthread_mutex_t;
# 53 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pthread.h" 3 4
enum {
    PTHREAD_MUTEX_NORMAL = 0,
    PTHREAD_MUTEX_RECURSIVE = 1,
    PTHREAD_MUTEX_ERRORCHECK = 2,

    PTHREAD_MUTEX_ERRORCHECK_NP = PTHREAD_MUTEX_ERRORCHECK,
    PTHREAD_MUTEX_RECURSIVE_NP = PTHREAD_MUTEX_RECURSIVE,

    PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL
};



typedef struct
{
    int volatile value;
} pthread_cond_t;

typedef struct
{
    uint32_t flags;
    void * stack_base;
    size_t stack_size;
    size_t guard_size;
    int32_t sched_policy;
    int32_t sched_priority;
} pthread_attr_t;

typedef long pthread_mutexattr_t;
typedef long pthread_condattr_t;

typedef int pthread_key_t;
typedef long pthread_t;

typedef volatile int pthread_once_t;
# 111 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pthread.h" 3 4
extern "C" {


int pthread_attr_init(pthread_attr_t * attr);
int pthread_attr_destroy(pthread_attr_t * attr);

int pthread_attr_setdetachstate(pthread_attr_t * attr, int state);
int pthread_attr_getdetachstate(pthread_attr_t const * attr, int * state);

int pthread_attr_setschedpolicy(pthread_attr_t * attr, int policy);
int pthread_attr_getschedpolicy(pthread_attr_t const * attr, int * policy);

int pthread_attr_setschedparam(pthread_attr_t * attr, struct sched_param const * param);
int pthread_attr_getschedparam(pthread_attr_t const * attr, struct sched_param * param);

int pthread_attr_setstacksize(pthread_attr_t * attr, size_t stack_size);
int pthread_attr_getstacksize(pthread_attr_t const * attr, size_t * stack_size);

int pthread_attr_setstackaddr(pthread_attr_t * attr, void * stackaddr);
int pthread_attr_getstackaddr(pthread_attr_t const * attr, void ** stackaddr);

int pthread_attr_setstack(pthread_attr_t * attr, void * stackaddr, size_t stack_size);
int pthread_attr_getstack(pthread_attr_t const * attr, void ** stackaddr, size_t * stack_size);

int pthread_attr_setguardsize(pthread_attr_t * attr, size_t guard_size);
int pthread_attr_getguardsize(pthread_attr_t const * attr, size_t * guard_size);

int pthread_attr_setscope(pthread_attr_t *attr, int scope);
int pthread_attr_getscope(pthread_attr_t const *attr);

int pthread_getattr_np(pthread_t thid, pthread_attr_t * attr);

int pthread_create(pthread_t *thread, pthread_attr_t const * attr,
                   void *(*start_routine)(void *), void * arg);

__attribute__((__noreturn__)) void pthread_exit(void * retval);

int pthread_join(pthread_t thid, void ** ret_val);
int pthread_detach(pthread_t thid);

pthread_t pthread_self(void);
int pthread_equal(pthread_t one, pthread_t two);

int pthread_getschedparam(pthread_t thid, int * policy,
                          struct sched_param * param);
int pthread_setschedparam(pthread_t thid, int poilcy,
                          struct sched_param const * param);

int pthread_mutexattr_init(pthread_mutexattr_t *attr);
int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
int pthread_mutexattr_gettype(const pthread_mutexattr_t *attr, int *type);
int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type);
int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared);
int pthread_mutexattr_getpshared(pthread_mutexattr_t *attr, int *pshared);

int pthread_mutex_init(pthread_mutex_t *mutex,
                       const pthread_mutexattr_t *attr);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
int pthread_mutex_trylock(pthread_mutex_t *mutex);




int pthread_condattr_init(pthread_condattr_t *attr);
int pthread_condattr_getpshared(pthread_condattr_t *attr, int *pshared);
int pthread_condattr_setpshared(pthread_condattr_t* attr, int pshared);
int pthread_condattr_destroy(pthread_condattr_t *attr);

int pthread_cond_init(pthread_cond_t *cond,
                      const pthread_condattr_t *attr);
int pthread_cond_destroy(pthread_cond_t *cond);
int pthread_cond_broadcast(pthread_cond_t *cond);
int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
int pthread_cond_timedwait(pthread_cond_t *cond,
                           pthread_mutex_t * mutex,
                           const struct timespec *abstime);





int pthread_cond_timedwait_monotonic_np(pthread_cond_t *cond,
                                        pthread_mutex_t *mutex,
                                        const struct timespec *abstime);




int pthread_cond_timedwait_monotonic(pthread_cond_t *cond,
                                     pthread_mutex_t *mutex,
                                     const struct timespec *abstime);






int pthread_cond_timedwait_relative_np(pthread_cond_t *cond,
                                     pthread_mutex_t *mutex,
                                     const struct timespec *reltime);





int pthread_cond_timeout_np(pthread_cond_t *cond,
                            pthread_mutex_t * mutex,
                            unsigned msecs);






int pthread_mutex_lock_timeout_np(pthread_mutex_t *mutex, unsigned msecs);



typedef int pthread_rwlockattr_t;

typedef struct {
    pthread_mutex_t lock;
    pthread_cond_t cond;
    int numLocks;
    int writerThreadId;
    int pendingReaders;
    int pendingWriters;
    void* reserved[4];
} pthread_rwlock_t;



int pthread_rwlockattr_init(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared);
int pthread_rwlockattr_getpshared(pthread_rwlockattr_t *attr, int *pshared);

int pthread_rwlock_init(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr);
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);

int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_timedrdlock(pthread_rwlock_t *rwlock, const struct timespec *abs_timeout);

int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_timedwrlock(pthread_rwlock_t *rwlock, const struct timespec *abs_timeout);

int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);


int pthread_key_create(pthread_key_t *key, void (*destructor_function)(void *));
int pthread_key_delete (pthread_key_t);
int pthread_setspecific(pthread_key_t key, const void *value);
void *pthread_getspecific(pthread_key_t key);

int pthread_kill(pthread_t tid, int sig);
int pthread_sigmask(int how, const sigset_t *set, sigset_t *oset);

int pthread_getcpuclockid(pthread_t tid, clockid_t *clockid);

int pthread_once(pthread_once_t *once_control, void (*init_routine)(void));

int pthread_setname_np(pthread_t thid, const char *thname);

typedef void (*__pthread_cleanup_func_t)(void*);

typedef struct __pthread_cleanup_t {
    struct __pthread_cleanup_t* __cleanup_prev;
    __pthread_cleanup_func_t __cleanup_routine;
    void* __cleanup_arg;
} __pthread_cleanup_t;

extern void __pthread_cleanup_push(__pthread_cleanup_t* c,
                                    __pthread_cleanup_func_t routine,
                                    void* arg);

extern void __pthread_cleanup_pop(__pthread_cleanup_t* c,
                                   int execute);
# 312 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\pthread.h" 3 4
}
# 30 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/pthread.h" 2
# 83 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h" 2
# 101 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
inline long _STLP_atomic_increment_gcc_x86(long volatile* p) {
  long result;
  __asm__ __volatile__
    ("lock; xaddl  %1, %0;"
    :"=m" (*p), "=r" (result)
    :"m" (*p), "1" (1)
    :"cc");
  return result + 1;
}




inline long _STLP_atomic_decrement_gcc_x86(long volatile* p) {
  long result;
  __asm__ __volatile__
    ("lock; xaddl  %1, %0;"
    :"=m" (*p), "=r" (result)
    :"m" (*p), "1" (-1)
    :"cc");
  return result - 1;
}


typedef long __stl_atomic_t;
# 245 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
namespace std {




template <int __inst>
struct _STLP_mutex_spin {
  enum { __low_max = 30, __high_max = 1000 };

  static unsigned __max;
  static unsigned __last;
  static void _M_do_lock(volatile __stl_atomic_t* __lock);
  static void _S_nsec_sleep(int __log_nsec, unsigned int& __iteration);
};
# 275 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
struct __attribute__((visibility("default"))) _STLP_mutex_base {
# 338 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
  pthread_mutex_t _M_lock;
  inline void _M_initialize()
  { pthread_mutex_init(&_M_lock,0); }
  inline void _M_destroy()
  { pthread_mutex_destroy(&_M_lock); }
  inline void _M_acquire_lock() {



    pthread_mutex_lock(&_M_lock);
  }
  inline void _M_release_lock() { pthread_mutex_unlock(&_M_lock); }
# 403 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
};




class __attribute__((visibility("default"))) _STLP_mutex : public _STLP_mutex_base {
  public:
    inline _STLP_mutex () { _M_initialize(); }
    inline ~_STLP_mutex () { _M_destroy(); }
  private:
    _STLP_mutex(const _STLP_mutex&);
    void operator=(const _STLP_mutex&);
};







struct __attribute__((visibility("default"))) _STLP_auto_lock {
  _STLP_auto_lock(_STLP_mutex_base& __lock) : _M_lock(__lock)
  { _M_lock._M_acquire_lock(); }
  ~_STLP_auto_lock()
  { _M_lock._M_release_lock(); }

private:
  _STLP_mutex_base& _M_lock;
  void operator=(const _STLP_auto_lock&);
  _STLP_auto_lock(const _STLP_auto_lock&);
};







class __attribute__((visibility("default"))) _Refcount_Base {




  volatile __stl_atomic_t _M_ref_count;
# 455 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
  public:

  _Refcount_Base(__stl_atomic_t __n) : _M_ref_count(__n) {}







   __stl_atomic_t _M_incr() { return (_STLP_atomic_increment_gcc_x86((long volatile*)&_M_ref_count)); }
   __stl_atomic_t _M_decr() { return (_STLP_atomic_decrement_gcc_x86((long volatile*)&_M_ref_count)); }
# 482 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
};
# 496 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
template <int __use_ptr_atomic_swap>
class _Atomic_swap_struct {
public:





  static _STLP_mutex_base _S_swap_lock;


  static __stl_atomic_t _S_swap(volatile __stl_atomic_t* __p, __stl_atomic_t __q) {




  _S_swap_lock._M_acquire_lock();
  __stl_atomic_t __result = *__p;
  *__p = __q;
  _S_swap_lock._M_release_lock();
  return __result;
# 526 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
  }

  static void* _S_swap_ptr(void* volatile* __p, void* __q) {
# 538 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
  _S_swap_lock._M_acquire_lock();
  void *__result = *__p;
  *__p = __q;
  _S_swap_lock._M_release_lock();
  return __result;
# 552 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
  }
};

template<>
class _Atomic_swap_struct<0> {
public:





  static _STLP_mutex_base _S_swap_lock;


  static __stl_atomic_t _S_swap(volatile __stl_atomic_t* __p, __stl_atomic_t __q) {
# 575 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
  _S_swap_lock._M_acquire_lock();
  __stl_atomic_t __result = *__p;
  *__p = __q;
  _S_swap_lock._M_release_lock();
  return __result;
# 589 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
  }

  static void* _S_swap_ptr(void* volatile* __p, void* __q) {
# 601 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
  _S_swap_lock._M_acquire_lock();
  void *__result = *__p;
  *__p = __q;
  _S_swap_lock._M_release_lock();
  return __result;
# 615 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
  }
};






inline __stl_atomic_t _Atomic_swap(volatile __stl_atomic_t * __p, __stl_atomic_t __q) {
  const int __use_ptr_atomic_swap = sizeof(__stl_atomic_t) == sizeof(void*);
  return _Atomic_swap_struct<__use_ptr_atomic_swap>::_S_swap(__p, __q);
}

inline void* _Atomic_swap_ptr(void* volatile* __p, void* __q) {
  const int __use_ptr_atomic_swap = sizeof(__stl_atomic_t) == sizeof(void*);
  return _Atomic_swap_struct<__use_ptr_atomic_swap>::_S_swap_ptr(__p, __q);
}
# 677 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h"
}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.c" 1
# 39 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.c"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ctime.h" 1
# 28 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ctime.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/time.h" 1
# 29 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ctime.h" 2



namespace std {
using ::size_t;
using ::clock_t;
using ::time_t;
using ::tm;

using ::clock;
using ::asctime;
using ::ctime;
using ::gmtime;


using ::difftime;

using ::mktime;
using ::localtime;
using ::strftime;
using ::time;

}
# 40 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.c" 2







namespace std {


template<int __32bits>
_STLP_mutex_base
_Atomic_swap_struct<__32bits>::_S_swap_lock ;




template <int __inst>
unsigned _STLP_mutex_spin<__inst>::__max = _STLP_mutex_spin<__inst>::__low_max;

template <int __inst>
unsigned _STLP_mutex_spin<__inst>::__last = 0;
# 74 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.c"
template <int __inst>
void
_STLP_mutex_spin<__inst>::_S_nsec_sleep(int __log_nsec, unsigned int& __iteration) {
# 108 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.c"
  timespec __ts;

  __ts.tv_sec = 0;
  __ts.tv_nsec = 1 << __log_nsec;
  nanosleep(&__ts, 0);

}

template <int __inst>
void
_STLP_mutex_spin<__inst>::_M_do_lock(volatile __stl_atomic_t* __lock) {
# 157 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.c"
}


}
# 681 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_threads.h" 2
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_locale.h" 2
# 44 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_locale.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_facets_fwd.h" 1






namespace std {




template <class _CharT, class _InputIter = istreambuf_iterator<_CharT, char_traits<_CharT> > >

class money_get;




template <class _CharT, class _OutputIter = ostreambuf_iterator<_CharT, char_traits<_CharT> > >

class money_put;




template <class _CharT, class _InputIter = istreambuf_iterator<_CharT, char_traits<_CharT> > >

class num_get;




template <class _CharT, class _OutputIter = ostreambuf_iterator<_CharT, char_traits<_CharT> > >

class num_put;




template <class _Ch, class _InIt = istreambuf_iterator<_Ch, char_traits<_Ch> > >

class time_get;




template <class _Ch, class _OutIt = ostreambuf_iterator<_Ch, char_traits<_Ch> > >

class time_put;

}
# 45 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_locale.h" 2

namespace std {

class _Locale_impl;
class locale;

template <class _CharT, class _Traits, class _Alloc>
bool __locale_do_operator_call(const locale& __loc,
                               const basic_string<_CharT, _Traits, _Alloc>& __x,
                               const basic_string<_CharT, _Traits, _Alloc>& __y);

__attribute__((visibility("default"))) _Locale_impl * _get_Locale_impl( _Locale_impl *locimpl );
__attribute__((visibility("default"))) _Locale_impl * _copy_Nameless_Locale_impl( _Locale_impl *locimpl );

namespace priv {

template <class _Facet>
bool _HasFacet(const locale& __loc, const _Facet* __facet) ;

template <class _Facet>
_Facet* _UseFacet(const locale& __loc, const _Facet* __facet);

template <class _Facet>
void _InsertFacet(locale& __loc, _Facet* __facet);

}






class __attribute__((visibility("default"))) locale {
public:

  class __attribute__((visibility("default"))) facet : protected _Refcount_Base {
  protected:




    explicit facet(size_t __init_count = 0) : _Refcount_Base( __init_count == 0 ? 0 : 1 ) {}
    virtual ~facet();
    friend class locale;
    friend class _Locale_impl;
    friend facet * _get_facet( facet * );
    friend void _release_facet( facet *& );

  private:
    facet(const facet& ) ;
    void operator=(const facet&);
  };




  class

  __attribute__((visibility("default"))) id {
  public:
    size_t _M_index;
    static size_t _S_max;
  };

  typedef int category;
  static const category none = 0x000;
  static const category collate = 0x010;
  static const category ctype = 0x020;
  static const category monetary = 0x040;
  static const category numeric = 0x100;
  static const category time = 0x200;
  static const category messages = 0x400;
  static const category all = collate | ctype | monetary | numeric | time | messages;


  locale() ;
  locale(const locale&) ;
  explicit locale(const char *);
  locale(const locale&, const char*, category);


  template <class _Facet>
  locale(const locale& __loc, _Facet* __f) {
    if ( __f != 0 ) {
      this->_M_impl = _get_Locale_impl( _copy_Nameless_Locale_impl( __loc._M_impl ) );
      ::std::priv:: _InsertFacet(*this, __f);
    } else {
      this->_M_impl = _get_Locale_impl( __loc._M_impl );
    }
  }


protected:

  locale(_Locale_impl*);

public:
  locale(const locale&, const locale&, category);
  const locale& operator=(const locale&) ;




   ~locale() ;

public:


  template <class _Facet>
  locale combine(const locale& __loc) const {
    _Facet *__facet = 0;
    if (!::std::priv:: _HasFacet(__loc, __facet))
      _M_throw_on_combine_error(__loc.name());

    return locale(*this, ::std::priv:: _UseFacet(__loc, __facet));
  }



  string name() const;

  bool operator==(const locale&) const;
  bool operator!=(const locale&) const;







  template <class _CharT, class _Traits, class _Alloc>
  bool operator()(const basic_string<_CharT, _Traits, _Alloc>& __x,
                  const basic_string<_CharT, _Traits, _Alloc>& __y) const
  { return __locale_do_operator_call(*this, __x, __y); }




  static locale global(const locale&);



  static const locale& classic();


  facet* _M_get_facet(const id&) const;

  facet* _M_use_facet(const id&) const;
  static void __attribute__((noreturn)) _M_throw_on_combine_error(const string& name);
  static void __attribute__((noreturn)) _M_throw_on_null_name();
  static void __attribute__((noreturn)) _M_throw_on_creation_failure(int __err_code,
                                                                            const char* name, const char* facet);


  void _M_insert(facet* __f, id& __id);


  friend class _Locale_impl;

protected:
  _Locale_impl* _M_impl;
  _Locale_impl* _M_get_impl() const { return _M_impl; }
};
# 287 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_locale.h"
template <class _Facet>
inline const _Facet&



use_facet(const locale& __loc)

{
  _Facet *__facet = 0;
  return *(::std::priv:: _UseFacet(__loc, __facet));
}

template <class _Facet>






inline bool has_facet(const locale& __loc)

{
  _Facet *__facet = 0;
  return ::std::priv:: _HasFacet(__loc, __facet);
}





namespace priv {







template <class _Facet>
inline locale::id& _GetFacetId(const _Facet*)
{ return _Facet::id; }

__attribute__((visibility("default"))) locale::id& _GetFacetId(const money_get<char, istreambuf_iterator<char, char_traits<char> > >*);
__attribute__((visibility("default"))) locale::id& _GetFacetId(const money_put<char, ostreambuf_iterator<char, char_traits<char> > >*);
__attribute__((visibility("default"))) locale::id& _GetFacetId(const num_get<char, istreambuf_iterator<char, char_traits<char> > >*);
__attribute__((visibility("default"))) locale::id& _GetFacetId(const num_put<char, ostreambuf_iterator<char, char_traits<char> > >*);
__attribute__((visibility("default"))) locale::id& _GetFacetId(const time_get<char, istreambuf_iterator<char, char_traits<char> > >*);
__attribute__((visibility("default"))) locale::id& _GetFacetId(const time_put<char, ostreambuf_iterator<char, char_traits<char> > >*);


__attribute__((visibility("default"))) locale::id& _GetFacetId(const money_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >*);
__attribute__((visibility("default"))) locale::id& _GetFacetId(const money_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >*);
__attribute__((visibility("default"))) locale::id& _GetFacetId(const num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >*);
__attribute__((visibility("default"))) locale::id& _GetFacetId(const num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >*);
__attribute__((visibility("default"))) locale::id& _GetFacetId(const time_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >*);
__attribute__((visibility("default"))) locale::id& _GetFacetId(const time_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >*);


template <class _Facet>
inline bool _HasFacet(const locale& __loc, const _Facet* __facet)
{ return (__loc._M_get_facet(_GetFacetId(__facet)) != 0); }

template <class _Facet>
inline _Facet* _UseFacet(const locale& __loc, const _Facet* __facet)
{ return static_cast<_Facet*>(__loc._M_use_facet(_GetFacetId(__facet))); }

template <class _Facet>
inline void _InsertFacet(locale& __loc, _Facet* __facet)
{ __loc._M_insert(__facet, _GetFacetId(__facet)); }

}

}
# 31 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios_base.h" 2






namespace std {
# 48 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios_base.h"
class __attribute__((visibility("default"))) ios_base {
public:
# 59 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios_base.h"
  typedef int fmtflags;
  typedef int iostate;
  typedef int openmode;
  typedef int seekdir;


  typedef fmtflags fmt_flags;



  static const int left = 0x0001;
  static const int right = 0x0002;
  static const int internal = 0x0004;
  static const int dec = 0x0008;
  static const int hex = 0x0010;
  static const int oct = 0x0020;
  static const int fixed = 0x0040;
  static const int scientific = 0x0080;
  static const int boolalpha = 0x0100;
  static const int showbase = 0x0200;
  static const int showpoint = 0x0400;
  static const int showpos = 0x0800;
  static const int skipws = 0x1000;
  static const int unitbuf = 0x2000;
  static const int uppercase = 0x4000;
  static const int adjustfield = left | right | internal;
  static const int basefield = dec | hex | oct;
  static const int floatfield = scientific | fixed;


  static const int goodbit = 0x00;
  static const int badbit = 0x01;
  static const int eofbit = 0x02;
  static const int failbit = 0x04;


  static const int __default_mode = 0x0;
  static const int app = 0x01;
  static const int ate = 0x02;
  static const int binary = 0x04;
  static const int in = 0x08;
  static const int out = 0x10;
  static const int trunc = 0x20;


  static const int beg = 0x01;
  static const int cur = 0x02;
  static const int end = 0x04;

public:
  fmtflags flags() const { return _M_fmtflags; }
  fmtflags flags(fmtflags __flags) {
    fmtflags __tmp = _M_fmtflags;
    _M_fmtflags = __flags;
    return __tmp;
  }

  fmtflags setf(fmtflags __flag) {
    fmtflags __tmp = _M_fmtflags;
    _M_fmtflags |= __flag;
    return __tmp;
  }
  fmtflags setf(fmtflags __flag, fmtflags __mask) {
    fmtflags __tmp = _M_fmtflags;
    _M_fmtflags &= ~__mask;
    _M_fmtflags |= __flag & __mask;
    return __tmp;
  }
  void unsetf(fmtflags __mask) { _M_fmtflags &= ~__mask; }

  streamsize precision() const { return _M_precision; }
  streamsize precision(streamsize __newprecision) {
    streamsize __tmp = _M_precision;
    _M_precision = __newprecision;
    return __tmp;
  }

  streamsize width() const { return _M_width; }
  streamsize width(streamsize __newwidth) {
    streamsize __tmp = _M_width;
    _M_width = __newwidth;
    return __tmp;
  }

public:
  locale imbue(const locale&);
  locale getloc() const { return _M_locale; }

public:
  static int xalloc();
  long& iword(int __index);
  void*& pword(int __index);

public:
  virtual ~ios_base();

public:
  enum event { erase_event, imbue_event, copyfmt_event };
  typedef void (*event_callback)(event, ios_base&, int __index);
  void register_callback(event_callback __fn, int __index);

public:


  static bool sync_with_stdio(bool __sync = true);

public:



  operator void*() const { return !fail() ? (void*) const_cast<ios_base*>(this) : (void*) 0; }
  bool operator!() const { return fail(); }

  iostate rdstate() const { return _M_iostate; }

  bool good() const { return _M_iostate == 0; }
  bool eof() const { return (_M_iostate & eofbit) != 0; }
  bool fail() const { return (_M_iostate & (failbit | badbit)) != 0; }
  bool bad() const { return (_M_iostate & badbit) != 0; }

protected:





  void _M_copy_state(const ios_base& __x);

  void _M_setstate_nothrow(iostate __state) { _M_iostate |= __state; }
  void _M_clear_nothrow(iostate __state) { _M_iostate = __state; }
  iostate _M_get_exception_mask() const { return _M_exception_mask; }
  void _M_set_exception_mask(iostate __mask) { _M_exception_mask = __mask; }
  void _M_check_exception_mask() {
    if (_M_iostate & _M_exception_mask)
      _M_throw_failure();
  }

  void _M_invoke_callbacks(event);
  void __attribute__((noreturn)) _M_throw_failure();

  ios_base();

protected:
  static void _S_initialize();
  static void _S_uninitialize();
  static bool _S_is_synced;

private:

  ios_base(const ios_base&);
  void operator=(const ios_base&);

private:

  fmtflags _M_fmtflags;
  iostate _M_iostate;
  openmode _M_openmode;
  seekdir _M_seekdir;
  iostate _M_exception_mask;

  streamsize _M_precision;
  streamsize _M_width;

  locale _M_locale;

  pair<event_callback, int>* _M_callbacks;
  size_t _M_num_callbacks;
  size_t _M_callback_index;


  long* _M_iwords;
  size_t _M_num_iwords;

  void** _M_pwords;
  size_t _M_num_pwords;

public:





  class __attribute__((visibility("default"))) Init
  {
    public:
      Init();
      ~Init();
    private:
      static long _S_count;
      friend class ios_base;
  };

  friend class Init;

public:


  typedef iostate io_state;
  typedef openmode open_mode;
  typedef seekdir seek_dir;
  typedef ::std::streamoff streamoff;
  typedef ::std::streampos streampos;

};






inline ios_base& boolalpha(ios_base& __s)
  { __s.setf(ios_base::boolalpha); return __s;}

inline ios_base& noboolalpha(ios_base& __s)
  { __s.unsetf(ios_base::boolalpha); return __s;}

inline ios_base& showbase(ios_base& __s)
  { __s.setf(ios_base::showbase); return __s;}

inline ios_base& noshowbase(ios_base& __s)
  { __s.unsetf(ios_base::showbase); return __s;}

inline ios_base& showpoint(ios_base& __s)
  { __s.setf(ios_base::showpoint); return __s;}

inline ios_base& noshowpoint(ios_base& __s)
  { __s.unsetf(ios_base::showpoint); return __s;}

inline ios_base& showpos(ios_base& __s)
  { __s.setf(ios_base::showpos); return __s;}

inline ios_base& noshowpos(ios_base& __s)
  { __s.unsetf(ios_base::showpos); return __s;}

inline ios_base& skipws(ios_base& __s)
  { __s.setf(ios_base::skipws); return __s;}

inline ios_base& noskipws(ios_base& __s)
  { __s.unsetf(ios_base::skipws); return __s;}

inline ios_base& uppercase(ios_base& __s)
  { __s.setf(ios_base::uppercase); return __s;}

inline ios_base& nouppercase(ios_base& __s)
  { __s.unsetf(ios_base::uppercase); return __s;}

inline ios_base& unitbuf(ios_base& __s)
  { __s.setf(ios_base::unitbuf); return __s;}

inline ios_base& nounitbuf(ios_base& __s)
  { __s.unsetf(ios_base::unitbuf); return __s;}



inline ios_base& internal(ios_base& __s)
  { __s.setf(ios_base::internal, ios_base::adjustfield); return __s; }

inline ios_base& left(ios_base& __s)
  { __s.setf(ios_base::left, ios_base::adjustfield); return __s; }

inline ios_base& right(ios_base& __s)
  { __s.setf(ios_base::right, ios_base::adjustfield); return __s; }


inline ios_base& dec(ios_base& __s)
  { __s.setf(ios_base::dec, ios_base::basefield); return __s; }

inline ios_base& hex(ios_base& __s)
  { __s.setf(ios_base::hex, ios_base::basefield); return __s; }

inline ios_base& oct(ios_base& __s)
  { __s.setf(ios_base::oct, ios_base::basefield); return __s; }



inline ios_base& fixed(ios_base& __s)
  { __s.setf(ios_base::fixed, ios_base::floatfield); return __s; }

inline ios_base& scientific(ios_base& __s)
  { __s.setf(ios_base::scientific, ios_base::floatfield); return __s; }

}
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ctype.h" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ctype.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/c_locale.h" 1
# 88 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/c_locale.h"
struct _Locale_ctype;
struct _Locale_codecvt;
struct _Locale_numeric;
struct _Locale_time;
struct _Locale_collate;
struct _Locale_monetary;
struct _Locale_messages;
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ctype.h" 2
# 37 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ctype.h"
namespace std {

class __attribute__((visibility("default"))) ctype_base {
public:
  enum mask {
    space = 0x0001,
    print = 0x0002,
    cntrl = 0x0004,
    upper = 0x0008,
    lower = 0x0010,
    alpha = 0x0020,
    digit = 0x0040,
    punct = 0x0080,
    xdigit = 0x0100,
    alnum = alpha | digit,
    graph = alnum | punct
  };
};



template <class charT> class ctype {};
template <class charT> class ctype_byname {};



template<>
class __attribute__((visibility("default"))) ctype<char> : public locale::facet, public ctype_base {





    friend class ctype<wchar_t>;


public:

  typedef char char_type;

  explicit ctype(const mask* __tab = 0, bool __del = false, size_t __refs = 0);
  bool is(mask __m, char __c) const
  { return ((*(_M_ctype_table+(unsigned char)__c)) & __m) != 0; }

  const char* is(const char* __low, const char* __high, mask* __vec) const {
    for (const char* __p = __low;__p != __high; ++__p, ++__vec) {
      *__vec = _M_ctype_table[(unsigned char)*__p];
    }
    return __high;
  }

  const char* scan_is(mask __m, const char* __low, const char* __high) const;
  const char* scan_not(mask __m, const char* __low, const char* __high) const;

  char (toupper)(char __c) const { return do_toupper(__c); }
  const char* (toupper)(char* __low, const char* __high) const {
    return do_toupper(__low, __high);
  }

  char (tolower)(char __c) const { return do_tolower(__c); }
  const char* (tolower)(char* __low, const char* __high) const {
    return do_tolower(__low, __high);
  }

  char widen(char __c) const { return do_widen(__c); }
  const char* widen(const char* __low, const char* __high, char* __to) const {
    return do_widen(__low, __high, __to);
  }

  char narrow(char __c, char __dfault) const {
    return do_narrow(__c, __dfault);
  }
  const char* narrow(const char* __low, const char* __high,
                     char __dfault, char* __to) const {
    return do_narrow(__low, __high, __dfault, __to);
  }

  static locale::id id;
  static const size_t table_size = 256;

protected:
  const mask* table() const { return _M_ctype_table; }
  static const mask* classic_table() ;

  ~ctype();

  virtual char do_toupper(char __c) const;
  virtual char do_tolower(char __c) const;
  virtual const char* do_toupper(char* __low, const char* __high) const;
  virtual const char* do_tolower(char* __low, const char* __high) const;
  virtual char do_widen(char __c) const;
  virtual const char* do_widen(const char* __low, const char* __high,
                               char* __to) const;
  virtual char do_narrow(char __c, char ) const;
  virtual const char* do_narrow(const char* __low, const char* __high,
                                char , char* __to) const;
private:
  struct _Is_mask {
    mask __m;
    _Is_mask(mask __x): __m(__x) {}
   bool operator()(char __c) {return (__m & (unsigned char) __c) != 0;}
  };

protected:
  const mask* _M_ctype_table;
private:
  bool _M_delete;
};

template<>
class __attribute__((visibility("default"))) ctype_byname<char>: public ctype<char> {
  friend class _Locale_impl;
public:
  explicit ctype_byname(const char*, size_t = 0);
  ~ctype_byname();

  virtual char do_toupper(char __c) const;
  virtual char do_tolower(char __c) const;

  virtual const char* do_toupper(char*, const char*) const;
  virtual const char* do_tolower(char*, const char*) const;

private:
  ctype_byname(_Locale_ctype* __ctype)
    : _M_ctype(__ctype)
  { _M_init(); }

  void _M_init();


  typedef ctype_byname<char> _Self;
  ctype_byname(_Self const&);
  _Self& operator = (_Self const&);

  mask _M_byname_table[table_size];
  _Locale_ctype* _M_ctype;
};


template<>
class __attribute__((visibility("default"))) ctype<wchar_t> : public locale::facet, public ctype_base {
public:
  typedef wchar_t char_type;

  explicit ctype(size_t __refs = 0) : locale::facet(__refs) {}

  bool is(mask __m, wchar_t __c) const
    { return do_is(__m, __c); }

  const wchar_t* is(const wchar_t* __low, const wchar_t* __high,
                    mask* __vec) const
    { return do_is(__low, __high, __vec); }

  const wchar_t* scan_is(mask __m,
                         const wchar_t* __low, const wchar_t* __high) const
    { return do_scan_is(__m, __low, __high); }

  const wchar_t* scan_not (mask __m,
                           const wchar_t* __low, const wchar_t* __high) const
    { return do_scan_not(__m, __low, __high); }

  wchar_t (toupper)(wchar_t __c) const { return do_toupper(__c); }
  const wchar_t* (toupper)(wchar_t* __low, const wchar_t* __high) const
    { return do_toupper(__low, __high); }

  wchar_t (tolower)(wchar_t __c) const { return do_tolower(__c); }
  const wchar_t* (tolower)(wchar_t* __low, const wchar_t* __high) const
    { return do_tolower(__low, __high); }

  wchar_t widen(char __c) const { return do_widen(__c); }
  const char* widen(const char* __low, const char* __high,
                    wchar_t* __to) const
    { return do_widen(__low, __high, __to); }

  char narrow(wchar_t __c, char __dfault) const
    { return do_narrow(__c, __dfault); }
  const wchar_t* narrow(const wchar_t* __low, const wchar_t* __high,
                        char __dfault, char* __to) const
    { return do_narrow(__low, __high, __dfault, __to); }

  static locale::id id;

protected:
  ~ctype();

  virtual bool do_is(mask __m, wchar_t __c) const;
  virtual const wchar_t* do_is(const wchar_t*, const wchar_t*, mask*) const;
  virtual const wchar_t* do_scan_is(mask,
                                    const wchar_t*, const wchar_t*) const;
  virtual const wchar_t* do_scan_not(mask,
                                     const wchar_t*, const wchar_t*) const;
  virtual wchar_t do_toupper(wchar_t __c) const;
  virtual const wchar_t* do_toupper(wchar_t*, const wchar_t*) const;
  virtual wchar_t do_tolower(wchar_t c) const;
  virtual const wchar_t* do_tolower(wchar_t*, const wchar_t*) const;
  virtual wchar_t do_widen(char c) const;
  virtual const char* do_widen(const char*, const char*, wchar_t*) const;
  virtual char do_narrow(wchar_t __c, char __dfault) const;
  virtual const wchar_t* do_narrow(const wchar_t*, const wchar_t*,
                                   char, char*) const;
};

template<>
class __attribute__((visibility("default"))) ctype_byname<wchar_t>: public ctype<wchar_t> {
  friend class _Locale_impl;
public:
  explicit ctype_byname(const char* __name, size_t __refs = 0);

protected:
  ~ctype_byname();

  virtual bool do_is(mask __m, wchar_t __c) const;
  virtual const wchar_t* do_is(const wchar_t*, const wchar_t*, mask*) const;
  virtual const wchar_t* do_scan_is(mask,
                                    const wchar_t*, const wchar_t*) const;
  virtual const wchar_t* do_scan_not(mask,
                                     const wchar_t*, const wchar_t*) const;
  virtual wchar_t do_toupper(wchar_t __c) const;
  virtual const wchar_t* do_toupper(wchar_t*, const wchar_t*) const;
  virtual wchar_t do_tolower(wchar_t c) const;
  virtual const wchar_t* do_tolower(wchar_t*, const wchar_t*) const;

private:
  ctype_byname(_Locale_ctype* __ctype)
    : _M_ctype(__ctype) {}


  typedef ctype_byname<wchar_t> _Self;
  ctype_byname(_Self const&);
  _Self& operator = (_Self const&);

  _Locale_ctype* _M_ctype;
};



}
# 28 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_numpunct.h" 1
# 38 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_numpunct.h"
namespace std {




template <class _CharT> class numpunct {};
template <class _CharT> class numpunct_byname {};
template <class _Ch, class _InIt> class num_get;

template<>
class __attribute__((visibility("default"))) numpunct<char> : public locale::facet {
public:
  typedef char char_type;
  typedef string string_type;

  explicit numpunct(size_t __refs = 0)
    : locale::facet(__refs) {}

  char decimal_point() const { return do_decimal_point(); }
  char thousands_sep() const { return do_thousands_sep(); }
  string grouping() const { return do_grouping(); }
  string truename() const { return do_truename(); }
  string falsename() const { return do_falsename(); }

  static locale::id id;

protected:
  ~numpunct();

  virtual char do_decimal_point() const;
  virtual char do_thousands_sep() const;
  virtual string do_grouping() const;
  virtual string do_truename() const;
  virtual string do_falsename() const;
};



template<>
class __attribute__((visibility("default"))) numpunct<wchar_t> : public locale::facet {
public:
  typedef wchar_t char_type;
  typedef wstring string_type;

  explicit numpunct(size_t __refs = 0)
    : locale::facet(__refs) {}

  wchar_t decimal_point() const { return do_decimal_point(); }
  wchar_t thousands_sep() const { return do_thousands_sep(); }
  string grouping() const { return do_grouping(); }
  wstring truename() const { return do_truename(); }
  wstring falsename() const { return do_falsename(); }

  static locale::id id;

protected:
  ~numpunct();

  virtual wchar_t do_decimal_point() const;
  virtual wchar_t do_thousands_sep() const;
  virtual string do_grouping() const;
  virtual wstring do_truename() const;
  virtual wstring do_falsename() const;
};



template<>
class __attribute__((visibility("default"))) numpunct_byname<char> : public numpunct<char> {
  friend class _Locale_impl;
public:
  typedef char char_type;
  typedef string string_type;

  explicit numpunct_byname(const char* __name, size_t __refs = 0);

protected:

  ~numpunct_byname();

  virtual char do_decimal_point() const;
  virtual char do_thousands_sep() const;
  virtual string do_grouping() const;
  virtual string do_truename() const;
  virtual string do_falsename() const;

private:
  numpunct_byname(_Locale_numeric *__numeric)
    : _M_numeric(__numeric) {}


  typedef numpunct_byname<char> _Self;
  numpunct_byname(_Self const&);
  _Self& operator = (_Self const&);

  _Locale_numeric* _M_numeric;
};


template<>
class __attribute__((visibility("default"))) numpunct_byname<wchar_t>: public numpunct<wchar_t> {
  friend class _Locale_impl;
public:
  typedef wchar_t char_type;
  typedef wstring string_type;

  explicit numpunct_byname(const char* __name, size_t __refs = 0);

protected:
  ~numpunct_byname();

  virtual wchar_t do_decimal_point() const;
  virtual wchar_t do_thousands_sep() const;
  virtual string do_grouping() const;
  virtual wstring do_truename() const;
  virtual wstring do_falsename() const;

private:
  numpunct_byname(_Locale_numeric *__numeric)
    : _M_numeric(__numeric) {}


  typedef numpunct_byname<wchar_t> _Self;
  numpunct_byname(_Self const&);
  _Self& operator = (_Self const&);

  _Locale_numeric* _M_numeric;
};



}
# 32 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.h" 2


namespace std {
# 47 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.h"
template <class _CharT, class _Traits>
class basic_ios : public ios_base {
  friend class ios_base;
public:
  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;

public:
  explicit basic_ios(basic_streambuf<_CharT, _Traits>* __streambuf);
  virtual ~basic_ios() {}

public:
  basic_ostream<_CharT, _Traits>* tie() const {
    return _M_tied_ostream;
  }
  basic_ostream<_CharT, _Traits>*
  tie(basic_ostream<char_type, traits_type>* __new_tied_ostream) {
    basic_ostream<char_type, traits_type>* __tmp = _M_tied_ostream;
    _M_tied_ostream = __new_tied_ostream;
    return __tmp;
  }

  basic_streambuf<_CharT, _Traits>* rdbuf() const
    { return _M_streambuf; }

  basic_streambuf<_CharT, _Traits>*
  rdbuf(basic_streambuf<char_type, traits_type>*);


  basic_ios<_CharT, _Traits>& copyfmt(const basic_ios<_CharT, _Traits>& __x);

  char_type fill() const { return _M_fill; }
  char_type fill(char_type __fill) {
    char_type __tmp(_M_fill);
    _M_fill = __fill;
    return __tmp;
  }

public:


  void clear(iostate __state = goodbit) {
    _M_clear_nothrow(this->rdbuf() ? __state : iostate(__state|ios_base::badbit));
    _M_check_exception_mask();
  }
  void setstate(iostate __state) { this->clear(rdstate() | __state); }

  iostate exceptions() const { return this->_M_get_exception_mask(); }
  void exceptions(iostate __mask) {
    this->_M_set_exception_mask(__mask);
    this->clear(this->rdstate());
  }

public:
  locale imbue(const locale&);

  inline char narrow(_CharT, char) const ;
  inline _CharT widen(char) const;


  static bool _S_eof(int_type __c) {
    const int_type __eof = _Traits::eof();
    return _Traits::eq_int_type(__c, __eof);
  }

protected:

  const ctype<char_type>* _M_cached_ctype;

public:

  const ctype<char_type>* _M_ctype_facet() const { return _M_cached_ctype; }

protected:
  basic_ios();

  void init(basic_streambuf<_CharT, _Traits>* __streambuf);

public:



  void _M_handle_exception(ios_base::iostate __flag);

private:
  char_type _M_fill;

  basic_streambuf<_CharT, _Traits>* _M_streambuf;
  basic_ostream<_CharT, _Traits>* _M_tied_ostream;

};


template <class _CharT, class _Traits>
inline char
basic_ios<_CharT, _Traits>::narrow(_CharT __c, char __default) const
{ return _M_ctype_facet()->narrow(__c, __default); }

template <class _CharT, class _Traits>
inline _CharT
basic_ios<_CharT, _Traits>::widen(char __c) const
{ return _M_ctype_facet()->widen(__c); }


template<>
inline char
basic_ios<char, char_traits<char> >::narrow(char __c, char) const
{
  return __c;
}

template<>
inline char
basic_ios<char, char_traits<char> >::widen(char __c) const
{
  return __c;
}
# 176 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.h"
}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.c" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.c"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_streambuf.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_streambuf.h"
namespace std {
# 47 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_streambuf.h"
template <class _CharT, class _Traits>
class basic_streambuf {
  friend class basic_istream<_CharT, _Traits>;
  friend class basic_ostream<_CharT, _Traits>;

public:
  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;

private:

  char_type* _M_gbegin;
  char_type* _M_gnext;
  char_type* _M_gend;

  char_type* _M_pbegin;
  char_type* _M_pnext;
  char_type* _M_pend;

  locale _M_locale;

public:
  virtual ~basic_streambuf();

protected:
  basic_streambuf()







  ;


protected:
  char_type* eback() const { return _M_gbegin; }
  char_type* gptr() const { return _M_gnext; }
  char_type* egptr() const { return _M_gend; }

  void gbump(int __n) { _M_gnext += __n; }
  void setg(char_type* __gbegin, char_type* __gnext, char_type* __gend) {
    _M_gbegin = __gbegin;
    _M_gnext = __gnext;
    _M_gend = __gend;
  }

public:



  char_type* _M_eback() const { return eback(); }
  char_type* _M_gptr() const { return gptr(); }
  char_type* _M_egptr() const { return egptr(); }
  void _M_gbump(int __n) { gbump(__n); }
  void _M_setg(char_type* __gbegin, char_type* __gnext, char_type* __gend)
  { this->setg(__gbegin, __gnext, __gend); }

protected:

  char_type* pbase() const { return _M_pbegin; }
  char_type* pptr() const { return _M_pnext; }
  char_type* epptr() const { return _M_pend; }

  void pbump(int __n) { _M_pnext += __n; }
  void setp(char_type* __pbegin, char_type* __pend) {
    _M_pbegin = __pbegin;
    _M_pnext = __pbegin;
    _M_pend = __pend;
  }

protected:

  virtual basic_streambuf<_CharT, _Traits>* setbuf(char_type*, streamsize);



  virtual pos_type seekoff(off_type, ios_base::seekdir,
                           ios_base::openmode = ios_base::in | ios_base::out);



  virtual pos_type
  seekpos(pos_type, ios_base::openmode = ios_base::in | ios_base::out);



  virtual int sync();


public:
  basic_streambuf<_CharT, _Traits>* pubsetbuf(char_type* __s, streamsize __n)
  { return this->setbuf(__s, __n); }

  pos_type pubseekoff(off_type __offset, ios_base::seekdir __way,
                      ios_base::openmode __mod = ios_base::in | ios_base::out)
  { return this->seekoff(__offset, __way, __mod); }

  pos_type pubseekpos(pos_type __sp,
                      ios_base::openmode __mod = ios_base::in | ios_base::out)
  { return this->seekpos(__sp, __mod); }

  int pubsync() { return this->sync(); }

protected:





  virtual streamsize showmanyc();



  virtual streamsize xsgetn(char_type* __s, streamsize __n);




  virtual int_type underflow();



  virtual int_type uflow();




  virtual int_type pbackfail(int_type = traits_type::eof());

protected:




  virtual streamsize xsputn(const char_type* __s, streamsize __n);



  virtual streamsize _M_xsputnc(char_type __c, streamsize __n);



  virtual int_type overflow(int_type = traits_type::eof());

public:

  int_type sputc(char_type __c) {
    return ((_M_pnext < _M_pend) ? _Traits::to_int_type(*_M_pnext++ = __c)
      : this->overflow(_Traits::to_int_type(__c)));
  }


  streamsize sputn(const char_type* __s, streamsize __n)
  { return this->xsputn(__s, __n); }


  streamsize _M_sputnc(char_type __c, streamsize __n)
  { return this->_M_xsputnc(__c, __n); }

private:
  int_type _M_snextc_aux();

public:
  streamsize in_avail() {
    return (_M_gnext < _M_gend) ? (_M_gend - _M_gnext) : this->showmanyc();
  }


  int_type snextc() {
  return ( _M_gend - _M_gnext > 1 ?
             _Traits::to_int_type(*++_M_gnext) :
             this->_M_snextc_aux());
  }


  int_type sbumpc() {
    return _M_gnext < _M_gend ? _Traits::to_int_type(*_M_gnext++)
      : this->uflow();
  }


  int_type sgetc() {
    return _M_gnext < _M_gend ? _Traits::to_int_type(*_M_gnext)
      : this->underflow();
  }

  streamsize sgetn(char_type* __s, streamsize __n)
  { return this->xsgetn(__s, __n); }

  int_type sputbackc(char_type __c) {
    return ((_M_gbegin < _M_gnext) && _Traits::eq(__c, *(_M_gnext - 1)))
      ? _Traits::to_int_type(*--_M_gnext)
      : this->pbackfail(_Traits::to_int_type(__c));
  }

  int_type sungetc() {
    return (_M_gbegin < _M_gnext)
      ? _Traits::to_int_type(*--_M_gnext)
      : this->pbackfail();
  }

protected:





  virtual void imbue(const locale&);

public:
  locale pubimbue(const locale&);
  locale getloc() const { return _M_locale; }


  void stossc() { this->sbumpc(); }

};
# 277 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_streambuf.h"
}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_streambuf.c" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_streambuf.c"
namespace std {




template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>::basic_streambuf()
  : _M_gbegin(0), _M_gnext(0), _M_gend(0),
    _M_pbegin(0), _M_pnext(0), _M_pend(0),
    _M_locale() {

}


template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>::~basic_streambuf()
{}

template <class _CharT, class _Traits>
locale
basic_streambuf<_CharT, _Traits>::pubimbue(const locale& __loc) {
  this->imbue(__loc);
  locale __tmp = _M_locale;
  _M_locale = __loc;
  return __tmp;
}

template <class _CharT, class _Traits>
streamsize
basic_streambuf<_CharT, _Traits>::xsgetn(_CharT* __s, streamsize __n) {
  streamsize __result = 0;
  const int_type __eof = _Traits::eof();

  while (__result < __n) {
    if (_M_gnext < _M_gend) {
      size_t __chunk = (min) (static_cast<size_t>(_M_gend - _M_gnext),
                              static_cast<size_t>(__n - __result));
      _Traits::copy(__s, _M_gnext, __chunk);
      __result += __chunk;
      __s += __chunk;
      _M_gnext += __chunk;
    }
    else {
      int_type __c = this->sbumpc();
      if (!_Traits::eq_int_type(__c, __eof)) {
        *__s = _Traits::to_char_type(__c);
        ++__result;
        ++__s;
      }
      else
        break;
    }
  }

  return __result;
}

template <class _CharT, class _Traits>
streamsize
basic_streambuf<_CharT, _Traits>::xsputn(const _CharT* __s, streamsize __n)
{
  streamsize __result = 0;
  const int_type __eof = _Traits::eof();

  while (__result < __n) {
    if (_M_pnext < _M_pend) {
      size_t __chunk = (min) (static_cast<size_t>(_M_pend - _M_pnext),
                           static_cast<size_t>(__n - __result));
      _Traits::copy(_M_pnext, __s, __chunk);
      __result += __chunk;
      __s += __chunk;
      _M_pnext += __chunk;
    }

    else if (!_Traits::eq_int_type(this->overflow(_Traits::to_int_type(*__s)),
                                   __eof)) {
      ++__result;
      ++__s;
    }
    else
      break;
  }
  return __result;
}

template <class _CharT, class _Traits>
streamsize
basic_streambuf<_CharT, _Traits>::_M_xsputnc(_CharT __c, streamsize __n)
{
  streamsize __result = 0;
  const int_type __eof = _Traits::eof();

  while (__result < __n) {
    if (_M_pnext < _M_pend) {
      size_t __chunk = (min) (static_cast<size_t>(_M_pend - _M_pnext),
                           static_cast<size_t>(__n - __result));
      _Traits::assign(_M_pnext, __chunk, __c);
      __result += __chunk;
      _M_pnext += __chunk;
    }

    else if (!_Traits::eq_int_type(this->overflow(_Traits::to_int_type(__c)),
                                   __eof))
      ++__result;
    else
      break;
  }
  return __result;
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type
basic_streambuf<_CharT, _Traits>::_M_snextc_aux()
{
  int_type __eof = _Traits::eof();
  if (_M_gend == _M_gnext)
    return _Traits::eq_int_type(this->uflow(), __eof) ? __eof : this->sgetc();
  else {
    _M_gnext = _M_gend;
    return this->underflow();
  }
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type
basic_streambuf<_CharT, _Traits>::pbackfail(int_type) {
 return _Traits::eof();
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type
basic_streambuf<_CharT, _Traits>::overflow(int_type) {
  return _Traits::eof();
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type
basic_streambuf<_CharT, _Traits>::uflow() {
    return ( _Traits::eq_int_type(this->underflow(),_Traits::eof()) ?
             _Traits::eof() :
             _Traits::to_int_type(*_M_gnext++));
}

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::int_type
basic_streambuf<_CharT, _Traits>::underflow()
{ return _Traits::eof(); }

template <class _CharT, class _Traits>
streamsize
basic_streambuf<_CharT, _Traits>::showmanyc()
{ return 0; }

template <class _CharT, class _Traits>
void
basic_streambuf<_CharT, _Traits>::imbue(const locale&) {}

template <class _CharT, class _Traits>
int
basic_streambuf<_CharT, _Traits>::sync() { return 0; }

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::pos_type
basic_streambuf<_CharT, _Traits>::seekpos(pos_type, ios_base::openmode)
{ return pos_type(-1); }

template <class _CharT, class _Traits>
typename basic_streambuf<_CharT, _Traits>::pos_type
basic_streambuf<_CharT, _Traits>::seekoff(off_type, ios_base::seekdir,
                                          ios_base::openmode)
{ return pos_type(-1); }

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>*
basic_streambuf<_CharT, _Traits>:: setbuf(char_type*, streamsize)
{ return this; }

}
# 281 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_streambuf.h" 2
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.c" 2






namespace std {




template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>
  ::basic_ios(basic_streambuf<_CharT, _Traits>* __streambuf)
    : ios_base(), _M_cached_ctype(0),
      _M_fill(_CharT()), _M_streambuf(0), _M_tied_ostream(0) {
  basic_ios<_CharT, _Traits>::init(__streambuf);
}

template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>*
basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __buf) {
  basic_streambuf<_CharT, _Traits>* __tmp = _M_streambuf;
  _M_streambuf = __buf;
  this->clear();
  return __tmp;
}

template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>&
basic_ios<_CharT, _Traits>::copyfmt(const basic_ios<_CharT, _Traits>& __x) {
  _M_invoke_callbacks(erase_event);
  _M_copy_state(__x);
  _M_cached_ctype = __x._M_cached_ctype;
  _M_fill = __x._M_fill;
  _M_tied_ostream = __x._M_tied_ostream;
  _M_invoke_callbacks(copyfmt_event);
  this->_M_set_exception_mask(__x.exceptions());
  return *this;
}

template <class _CharT, class _Traits>
locale basic_ios<_CharT, _Traits>::imbue(const locale& __loc) {
  locale __tmp = ios_base::imbue(__loc);
  {
    if (_M_streambuf)
      _M_streambuf->pubimbue(__loc);


    _M_cached_ctype = &use_facet<ctype<char_type> >(__loc);
  }
  if (false) {
    __tmp = ios_base::imbue(__tmp);
    _M_handle_exception(ios_base::failbit);
  }
  return __tmp;
}





template <class _CharT, class _Traits>
basic_ios<_CharT, _Traits>::basic_ios()
  : ios_base(),
    _M_fill(_CharT()), _M_streambuf(0), _M_tied_ostream(0)
{}

template <class _CharT, class _Traits>
void
basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
{
  this->rdbuf(__sb);
  this->imbue(locale());
  this->tie(0);
  this->_M_set_exception_mask(ios_base::goodbit);
  this->_M_clear_nothrow(__sb != 0 ? ios_base::goodbit : ios_base::badbit);
  ios_base::flags(ios_base::skipws | ios_base::dec);
  ios_base::width(0);
  ios_base::precision(6);
  this->fill(widen(' '));


}


template <class _CharT, class _Traits>
void basic_ios<_CharT, _Traits>::_M_handle_exception(ios_base::iostate __flag)
{
  this->_M_setstate_nothrow(__flag);
  if (this->_M_get_exception_mask() & __flag)
    {};
}

}
# 180 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ios.h" 2
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostreambuf_iterator.h" 1
# 30 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostreambuf_iterator.h"
namespace std {

namespace priv {

template<class _CharT, class _Traits>
extern basic_streambuf<_CharT, _Traits>* __get_ostreambuf(basic_ostream<_CharT, _Traits>&);

}


template <class _CharT, class _Traits>
class ostreambuf_iterator :
  public iterator<output_iterator_tag, void, void, void, void> {
public:
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename _Traits::int_type int_type;
  typedef basic_streambuf<_CharT, _Traits> streambuf_type;
  typedef basic_ostream<_CharT, _Traits> ostream_type;

  typedef output_iterator_tag iterator_category;
  typedef void value_type;
  typedef void difference_type;
  typedef void pointer;
  typedef void reference;

public:
  ostreambuf_iterator(streambuf_type* __buf) : _M_buf(__buf), _M_ok(__buf!=0) {}

  inline ostreambuf_iterator(ostream_type& __o) ;

  ostreambuf_iterator<_CharT, _Traits>& operator=(char_type __c) {
    _M_ok = _M_ok && !traits_type::eq_int_type(_M_buf->sputc(__c),
                                               traits_type::eof());
    return *this;
  }

  ostreambuf_iterator<_CharT, _Traits>& operator*() { return *this; }
  ostreambuf_iterator<_CharT, _Traits>& operator++() { return *this; }
  ostreambuf_iterator<_CharT, _Traits>& operator++(int) { return *this; }

  bool failed() const { return !_M_ok; }

private:
  streambuf_type* _M_buf;
  bool _M_ok;
};

template <class _CharT, class _Traits>
inline ostreambuf_iterator<_CharT, _Traits>::ostreambuf_iterator(basic_ostream<_CharT, _Traits>& __o)
  : _M_buf(::std::priv:: __get_ostreambuf(__o)), _M_ok(_M_buf != 0) {}
# 95 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostreambuf_iterator.h"
}
# 29 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.h" 2






namespace std {






namespace priv {

template <class _CharT, class _Traits>
bool __init_bostr(basic_ostream<_CharT, _Traits>& __str);

}




template <class _CharT, class _Traits>
class basic_ostream : virtual public basic_ios<_CharT, _Traits> {
  typedef basic_ostream<_CharT, _Traits> _Self;







public:
  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;
  typedef basic_ios<_CharT, _Traits> _Basic_ios;

public:
  explicit basic_ostream(basic_streambuf<_CharT, _Traits>* __buf);
  ~basic_ostream();

public:
  typedef basic_ios<_CharT, _Traits>& ( *__ios_fn)(basic_ios<_CharT, _Traits>&);
  typedef ios_base& ( *__ios_base_fn)(ios_base&);
  typedef _Self& ( *__ostream_fn)(_Self&);
  _Self& operator<< (__ostream_fn __f) { return __f(*this); }
  _Self & operator<< (__ios_base_fn __f) { __f(*this); return *this; }
  _Self& operator<< (__ios_fn __ff) { __ff(*this); return *this; }

private:
  bool _M_copy_buffered(basic_streambuf<_CharT, _Traits>* __from,
                        basic_streambuf<_CharT, _Traits>* __to);
  bool _M_copy_unbuffered(basic_streambuf<_CharT, _Traits>* __from,
                          basic_streambuf<_CharT, _Traits>* __to);

public:
  void _M_put_char(_CharT __c);

  void _M_put_nowiden(const _CharT* __s);
  void _M_put_widen(const char* __s);
  bool _M_put_widen_aux(const char* __s, streamsize __n);

public:
  _Self& put(char_type __c);
  _Self& write(const char_type* __s, streamsize __n);

public:

  _Self& operator<<(basic_streambuf<_CharT, _Traits>* __buf);


  _Self& operator<<(unsigned char __x) { _M_put_char(__x); return *this; }

  _Self& operator<<(short __x);
  _Self& operator<<(unsigned short __x);
  _Self& operator<<(int __x);

  _Self& operator<<(unsigned int __x);






  _Self& operator<<(long __x);
  _Self& operator<<(unsigned long __x);




  _Self& operator<<(float __x);
  _Self& operator<<(double __x);

  _Self& operator<<(long double __x);

  _Self& operator<<(const void* __x);

  _Self& operator<<(bool __x);


public:
  _Self& flush() {
    if (this->rdbuf())
      if (this->rdbuf()->pubsync() == -1)
        this->setstate(ios_base::badbit);
    return *this;
  }

  pos_type tellp() {
    return this->rdbuf() && !this->fail()
      ? this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out)
      : pos_type(-1);
  }

  _Self& seekp(pos_type __pos) {
    if (this->rdbuf() && !this->fail()) {
      if (this->rdbuf()->pubseekpos(__pos, ios_base::out) == pos_type(-1)) {
        this->setstate(ios_base::failbit);
      }
    }
    return *this;
  }

  _Self& seekp(off_type __off, ios_base::seekdir __dir) {
    if (this->rdbuf() && !this->fail())
      this->rdbuf()->pubseekoff(__off, __dir, ios_base::out);
    return *this;
  }
# 172 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.h"
    class sentry {
      typedef sentry _Self;

    private:
      basic_ostream<_CharT, _Traits>& _M_str;

      bool _M_ok;
    public:
      explicit sentry(basic_ostream<_CharT, _Traits>& __str)
        : _M_str(__str), _M_ok(::std::priv:: __init_bostr(__str))
      {}

      ~sentry() {
        if (_M_str.flags() & ios_base::unitbuf)

          if (!uncaught_exception())

            _M_str.flush();
      }

      operator bool() const { return _M_ok; }
    private:

      sentry(const _Self& __s) : _M_str(__s._M_str) {}
      _Self& operator=(const _Self&) { return *this; }
    };




};
# 214 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.h"
namespace priv {


template <class _CharT, class _Traits>
bool __init_bostr(basic_ostream<_CharT, _Traits>& __str) {
  if (__str.good()) {

    if (!__str.rdbuf())
      __str.setstate(ios_base::badbit);
    if (__str.tie())
      __str.tie()->flush();
    return __str.good();
  }
  else
    return false;
}

template <class _CharT, class _Traits>
inline basic_streambuf<_CharT, _Traits>*
__get_ostreambuf(basic_ostream<_CharT, _Traits>& __St)
{ return __St.rdbuf(); }

}


template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, _CharT __c){
  __os._M_put_char(__c);
  return __os;
}

template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const _CharT* __s) {
  __os._M_put_nowiden(__s);
  return __os;
}
# 295 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.h"
template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, char __c) {
  __os._M_put_char(__os.widen(__c));
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, char __c) {
  __os._M_put_char(__c);
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, signed char __c) {
  __os._M_put_char(__c);
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, unsigned char __c) {
  __os._M_put_char(__c);
  return __os;
}

template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os, const char* __s) {
  __os._M_put_widen(__s);
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, const char* __s) {
  __os._M_put_nowiden(__s);
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, const signed char* __s) {
  __os._M_put_nowiden(reinterpret_cast<const char*>(__s));
  return __os;
}

template <class _Traits>
inline basic_ostream<char, _Traits>&
operator<<(basic_ostream<char, _Traits>& __os, const unsigned char* __s) {
  __os._M_put_nowiden(reinterpret_cast<const char*>(__s));
  return __os;
}





template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
endl(basic_ostream<_CharT, _Traits>& __os) {
  __os.put(__os.widen('\n'));
  __os.flush();
  return __os;
}

template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
ends(basic_ostream<_CharT, _Traits>& __os) {
  __os.put(_CharT());
  return __os;
}

template <class _CharT, class _Traits>
inline basic_ostream<_CharT, _Traits>&
flush(basic_ostream<_CharT, _Traits>& __os) {
  __os.flush();
  return __os;
}

}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.c" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.c"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.h" 1
# 39 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iostream_string.h" 1
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iostream_string.h"
namespace std {

namespace priv {

template <class _CharT>
class __iostring_allocator : public allocator<_CharT> {
public:
  enum { _STR_SIZE = 256 };

private:
  enum { _BUF_SIZE = _STR_SIZE + 1 };
  typedef allocator<_CharT> _Base;
  _CharT _M_static_buf[_BUF_SIZE];

public:
  typedef typename _Base::size_type size_type;
  typedef typename _Base::pointer pointer;

  template <class _Tp1> struct rebind {

    typedef __iostring_allocator<_Tp1> other;



  };


  _CharT* allocate(size_type __n, const void* __ptr = 0) {
    if (__n > _BUF_SIZE) {
      return _Base::allocate(__n, __ptr);
    }
    return _M_static_buf;
  }
  void deallocate(pointer __p, size_type __n) {
    if (__p != _M_static_buf) _Base::deallocate(__p, __n);
  }
};
# 96 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iostream_string.h"
template <class _CharT>
struct __basic_iostring : public basic_string<_CharT, char_traits<_CharT>, __iostring_allocator<_CharT> > {






  typedef __basic_iostring<_CharT> _Self;
  typedef basic_string<_CharT, char_traits<_CharT>, __iostring_allocator<_CharT> > _Base;
  typedef typename _Base::_Reserve_t _Reserve_t;

  __basic_iostring() : _Base(_Reserve_t(), __iostring_allocator<_CharT>::_STR_SIZE)
  {}

  _Self& operator=(const _CharT* __s) {
    _Base::operator=(__s);
    return *this;
  }
};

typedef __basic_iostring<char> __iostring;


typedef __basic_iostring<wchar_t> __iowstring;
# 136 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_iostream_string.h"
}

}
# 40 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.h" 2






namespace std {




template <class _CharT, class _OutputIter>
class num_put: public locale::facet {
public:
  typedef _CharT char_type;
  typedef _OutputIter iter_type;

  explicit num_put(size_t __refs = 0) : locale::facet(__refs) {}


  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                bool __val) const {
    return do_put(__s, __f, __fill, __val);
  }

  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
               long __val) const {
    return do_put(__s, __f, __fill, __val);
  }

  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                unsigned long __val) const {
    return do_put(__s, __f, __fill, __val);
  }
# 87 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.h"
  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                double __val) const {
    return do_put(__s, __f, __fill, (double)__val);
  }


  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                long double __val) const {
    return do_put(__s, __f, __fill, __val);
  }


  iter_type put(iter_type __s, ios_base& __f, char_type __fill,
                const void * __val) const {
    return do_put(__s, __f, __fill, __val);
  }

  static locale::id id;

protected:
  ~num_put() {}

  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, bool __val) const;

  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, long __val) const;
  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, unsigned long __val) const;
  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, double __val) const;

  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, long double __val) const;







  virtual _OutputIter do_put(_OutputIter __s, ios_base& __f, _CharT __fill, const void* __val) const;
};
# 135 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.h"
namespace priv {

template <class _Integer>
char*
__write_integer_backward(char* __buf, ios_base::fmtflags __flags, _Integer __x);





extern size_t __write_float(__iostring&, ios_base::fmtflags, int, double);

extern size_t __write_float(__iostring&, ios_base::fmtflags, int, long double);





void __get_floor_digits(__iostring&, long double);

template <class _CharT>
void __get_money_digits(::std::priv:: __basic_iostring<_CharT>&, ios_base&, long double);


extern void __convert_float_buffer(__iostring const&, __iowstring&, const ctype<wchar_t>&, wchar_t, bool = true);

extern void __adjust_float_buffer(__iostring&, char);

extern char*
__write_integer(char* buf, ios_base::fmtflags flags, long x);

extern ptrdiff_t __insert_grouping(char* first, char* last, const string&, char, char, char, int);
extern void __insert_grouping(__iostring&, size_t, const string&, char, char, char, int);

extern ptrdiff_t __insert_grouping(wchar_t*, wchar_t*, const string&, wchar_t, wchar_t, wchar_t, int);
extern void __insert_grouping(__iowstring&, size_t, const string&, wchar_t, wchar_t, wchar_t, int);


}



}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.c" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.c"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.h" 1
# 32 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cfloat" 1
# 33 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cfloat"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/float.h" 1
# 32 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/float.h"
# 1 "d:\\android-ndk-r12b\\toolchains\\x86-4.9\\prebuilt\\windows-x86_64\\lib\\gcc\\i686-linux-android\\4.9.x\\include\\float.h" 1 3 4
# 33 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/float.h" 2
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cfloat" 2
# 33 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.h" 2






namespace std {

enum float_round_style {
  round_indeterminate = -1,
  round_toward_zero = 0,
  round_to_nearest = 1,
  round_toward_infinity = 2,
  round_toward_neg_infinity = 3
};

enum float_denorm_style {
  denorm_indeterminate = -1,
  denorm_absent = 0,
  denorm_present = 1
};

namespace priv {


template <class __number>
class _Numeric_limits_base {
public:

  static __number ( min)() { return __number(); }
  static __number ( max)() { return __number(); }

  static const int digits = 0;
  static const int digits10 = 0;
  static const int radix = 0;
  static const int min_exponent = 0;
  static const int min_exponent10 = 0;
  static const int max_exponent = 0;
  static const int max_exponent10 = 0;

  static const float_denorm_style has_denorm = denorm_absent;
  static const float_round_style round_style = round_toward_zero;

  static const bool is_specialized = false;
  static const bool is_signed = false;
  static const bool is_integer = false;
  static const bool is_exact = false;
  static const bool has_infinity = false;
  static const bool has_quiet_NaN = false;
  static const bool has_signaling_NaN = false;
  static const bool has_denorm_loss = false;
  static const bool is_iec559 = false;
  static const bool is_bounded = false;
  static const bool is_modulo = false;
  static const bool traps = false;
  static const bool tinyness_before = false;

  static __number epsilon() { return __number(); }
  static __number round_error() { return __number(); }

  static __number infinity() { return __number(); }
  static __number quiet_NaN() { return __number(); }
  static __number signaling_NaN() { return __number(); }
  static __number denorm_min() { return __number(); }
};
# 114 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.h"
template <class _Int,
          _Int __imin,
          _Int __imax,
          int __idigits, bool __ismod>
class _Integer_limits : public _Numeric_limits_base<_Int> {
public:

  static _Int ( min) () { return (_Int)__imin; }
  static _Int ( max) () { return (_Int)__imax; }

  static const int digits = (__idigits < 0) ? ((int)((sizeof(_Int) * (8))) - ((__imin == 0) ? 0 : 1)) : (__idigits);
  static const int digits10 = (digits * 301UL) / 1000;
  static const int radix = 2;
  static const bool is_specialized = true;
  static const bool is_signed = (__imin != 0);
  static const bool is_integer = true;
  static const bool is_exact = true;
  static const bool is_bounded = true;
  static const bool is_modulo = __ismod;
};


template <class __number,
         int __Digits, int __Digits10,
         int __MinExp, int __MaxExp,
         int __MinExp10, int __MaxExp10,
         bool __IsIEC559,
         float_denorm_style __DenormStyle,
         float_round_style __RoundStyle>
class _Floating_limits : public _Numeric_limits_base<__number> {
public:

  static const int digits = __Digits;
  static const int digits10 = __Digits10;
  static const int radix = 2;
  static const int min_exponent = __MinExp;
  static const int max_exponent = __MaxExp;
  static const int min_exponent10 = __MinExp10;
  static const int max_exponent10 = __MaxExp10;

  static const float_denorm_style has_denorm = __DenormStyle;
  static const float_round_style round_style = __RoundStyle;

  static const bool is_specialized = true;
  static const bool is_signed = true;

  static const bool has_infinity = true;



  static const bool has_quiet_NaN = true;
  static const bool has_signaling_NaN = true;





  static const bool is_iec559 = __IsIEC559 && has_infinity && has_quiet_NaN && has_signaling_NaN && (has_denorm == denorm_present);
  static const bool has_denorm_loss = false;
  static const bool is_bounded = true;
  static const bool traps = true;
  static const bool tinyness_before = false;
};

}





template<class _Tp>
class numeric_limits : public ::std::priv:: _Numeric_limits_base<_Tp> {};




template<>
class numeric_limits<bool>
  : public ::std::priv:: _Integer_limits<bool, false, true, 1, false>
{};


template<>
class numeric_limits<char>
  : public ::std::priv:: _Integer_limits<char, (-0x7f-1), 0x7f, -1, true>
{};


template<>
class numeric_limits<signed char>
  : public ::std::priv:: _Integer_limits<signed char, (-0x7f-1), 0x7f, -1, true>
{};


template<>
class numeric_limits<unsigned char>
  : public ::std::priv:: _Integer_limits<unsigned char, 0, 0xffU, -1, true>
{};



template<>
class numeric_limits<wchar_t>
  : public ::std::priv:: _Integer_limits<wchar_t, (-(2147483647L) - 1), 2147483647L, -1, true>
{};



template<>
class numeric_limits<short>
  : public ::std::priv:: _Integer_limits<short, (-0x7fff-1), 0x7fff, -1, true>
{};

template<>
class numeric_limits<unsigned short>
  : public ::std::priv:: _Integer_limits<unsigned short, 0, 0xffffU, -1, true>
{};






template<>
class numeric_limits<int>
  : public ::std::priv:: _Integer_limits<int, (-0x7fffffff-1), 0x7fffffff, -1, true>
{};

template<>
class numeric_limits<unsigned int>
  : public ::std::priv:: _Integer_limits<unsigned int, 0, 0xffffffffU, -1, true>
{};

template<>
class numeric_limits<long>
  : public ::std::priv:: _Integer_limits<long, (-0x7fffffffL-1), 0x7fffffffL, -1, true>
{};

template<>
class numeric_limits<unsigned long>
  : public ::std::priv:: _Integer_limits<unsigned long, 0, 0xffffffffUL, -1, true>
{};
# 337 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.h"
namespace priv {


template <class __dummy>
class _LimG {
public:
  static float get_F_inf();
  static float get_F_qNaN();
  static float get_F_sNaN();
  static float get_F_denormMin();
  static double get_D_inf();
  static double get_D_qNaN();
  static double get_D_sNaN();
  static double get_D_denormMin();


  static long double get_LD_inf();
  static long double get_LD_qNaN();
  static long double get_LD_sNaN();
  static long double get_LD_denormMin();

};
# 397 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.h"
}

template<>
class numeric_limits<float>
  : public ::std::priv:: _Floating_limits<float,
                                       24,
                                       6,
                                       (-125),
                                       128,
                                       (-37),
                                       38,
                                       true,
                                       denorm_present,
                                       round_to_nearest> {
public:
  static float ( min) () { return 1.1754943508222875e-38F; }
  static float denorm_min()

  { return 1.4012984643248171e-45F; }



  static float ( max) () { return 3.4028234663852886e+38F; }
  static float epsilon() { return 1.1920928955078125e-7F; }
  static float round_error() { return 0.5f; }
  static float infinity() { return ::std::priv:: _LimG<bool>::get_F_inf(); }
  static float quiet_NaN() { return ::std::priv:: _LimG<bool>::get_F_qNaN(); }
  static float signaling_NaN() { return ::std::priv:: _LimG<bool>::get_F_sNaN(); }
};




template<>
class numeric_limits<double>
  : public ::std::priv:: _Floating_limits<double,
                                       53,
                                       15,
                                       (-1021),
                                       1024,
                                       (-307),
                                       308,
                                       true,
                                       denorm_present,
                                       round_to_nearest> {
public:
  static double ( min)() { return double(2.2250738585072014e-308L); }
  static double denorm_min()

  { return double(4.9406564584124654e-324L); }



  static double ( max)() { return double(1.7976931348623157e+308L); }
  static double epsilon() { return double(2.2204460492503131e-16L); }
  static double round_error() { return 0.5; }
  static double infinity() { return ::std::priv:: _LimG<bool>::get_D_inf(); }
  static double quiet_NaN() { return ::std::priv:: _LimG<bool>::get_D_qNaN(); }
  static double signaling_NaN() { return ::std::priv:: _LimG<bool>::get_D_sNaN(); }
};



template<>
class numeric_limits<long double>
  : public ::std::priv:: _Floating_limits<long double,
                                       53,
                                       15,
                                       (-1021),
                                       1024,
                                       (-307),
                                       308,
                                       false,
                                       denorm_present,
                                       round_to_nearest> {
public:
  static long double ( min) () { return 2.2250738585072014e-308L; }
  static long double denorm_min()

  { return 4.9406564584124654e-324L; }



  static const bool is_iec559 = false;
  static long double ( max) () { return 1.7976931348623157e+308L; }
  static long double epsilon() { return 2.2204460492503131e-16L; }
  static long double round_error() { return 0.5l; }
  static long double infinity()


  { return ::std::priv:: _LimG<bool>::get_LD_inf(); }



  static long double quiet_NaN()

  { return ::std::priv:: _LimG<bool>::get_LD_qNaN(); }



  static long double signaling_NaN()

  { return ::std::priv:: _LimG<bool>::get_LD_sNaN(); }



};





}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.c" 1
# 30 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.c"
namespace std {

namespace priv {







template <class __number> const bool _Numeric_limits_base<__number>:: is_specialized;
template <class __number> const int _Numeric_limits_base<__number>:: digits;
template <class __number> const int _Numeric_limits_base<__number>:: digits10;
template <class __number> const bool _Numeric_limits_base<__number>:: is_signed;
template <class __number> const bool _Numeric_limits_base<__number>:: is_integer;
template <class __number> const bool _Numeric_limits_base<__number>:: is_exact;
template <class __number> const int _Numeric_limits_base<__number>:: radix;
template <class __number> const int _Numeric_limits_base<__number>:: min_exponent;
template <class __number> const int _Numeric_limits_base<__number>:: max_exponent;
template <class __number> const int _Numeric_limits_base<__number>:: min_exponent10;
template <class __number> const int _Numeric_limits_base<__number>:: max_exponent10;
template <class __number> const bool _Numeric_limits_base<__number>:: has_infinity;
template <class __number> const bool _Numeric_limits_base<__number>:: has_quiet_NaN;
template <class __number> const bool _Numeric_limits_base<__number>:: has_signaling_NaN;
template <class __number> const float_denorm_style _Numeric_limits_base<__number>:: has_denorm;
template <class __number> const bool _Numeric_limits_base<__number>:: has_denorm_loss;
template <class __number> const bool _Numeric_limits_base<__number>:: is_iec559;
template <class __number> const bool _Numeric_limits_base<__number>:: is_bounded;
template <class __number> const bool _Numeric_limits_base<__number>:: is_modulo;
template <class __number> const bool _Numeric_limits_base<__number>:: traps;
template <class __number> const bool _Numeric_limits_base<__number>:: tinyness_before;
template <class __number> const float_round_style _Numeric_limits_base<__number>:: round_style;







template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_specialized;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const int _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: digits;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const int _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: digits10;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_signed;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_integer;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_exact;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const int _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: radix;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_bounded;
template <class _Int, _Int __imin, _Int __imax, int __idigits, bool __ismod> const bool _Integer_limits<_Int, __imin, __imax, __idigits, __ismod>:: is_modulo;
# 115 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.c"
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: is_specialized;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: digits;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: digits10;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: is_signed;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: radix;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: min_exponent;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: max_exponent;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: min_exponent10;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const int _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: max_exponent10;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: has_infinity;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: has_quiet_NaN;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: has_signaling_NaN;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const float_denorm_style _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: has_denorm;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: has_denorm_loss;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: is_iec559;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: is_bounded;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: traps;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const bool _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: tinyness_before;
template <class __number, int __Digits, int __Digits10, int __MinExp, int __MaxExp, int __MinExp10, int __MaxExp10, bool __IsIEC559, float_denorm_style __DenormStyle, float_round_style __RoundStyle> const float_round_style _Floating_limits< __number, __Digits, __Digits10, __MinExp, __MaxExp, __MinExp10, __MaxExp10, __IsIEC559, __DenormStyle, __RoundStyle>:: round_style;
# 154 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.c"
template<class _Number, unsigned short _Word>
struct float_helper {
  union _WordsNumber {
    unsigned short _Words[8];
    _Number _num;
  };
  static _Number get_word_higher() {
    _WordsNumber __tmp = { { _Word, 0, 0, 0, 0, 0, 0, 0 } };
    return __tmp._num;
  }
  static _Number get_word_lower() {
    _WordsNumber __tmp = { { 0, 0, 0, 0, 0, 0, 0, 0 } };
    __tmp._Words[(sizeof(_Number) >= 12 ? 10 : sizeof(_Number)) / sizeof(unsigned short) - 1] = _Word;
    return __tmp._num;
  }
  static _Number get_from_last_word() {



    return get_word_lower();

  }
  static _Number get_from_first_word() {



    return get_word_higher();

  }
};


template<class _Number, unsigned short _Word1, unsigned short _Word2>
struct float_helper2 {
  union _WordsNumber {
    unsigned short _Words[8];
    _Number _num;
  };




  static _Number get_word_lower() {
    _WordsNumber __tmp = { { 0, 0, 0, 0, 0, 0, 0, 0 } };
    __tmp._Words[(sizeof(_Number) >= 12 ? 10 : sizeof(_Number)) / sizeof(unsigned short) - 2] = _Word1;
    __tmp._Words[(sizeof(_Number) >= 12 ? 10 : sizeof(_Number)) / sizeof(unsigned short) - 1] = _Word2;
    return __tmp._num;
  }
  static _Number get_from_last_word() {



    return get_word_lower();

  }
};
# 288 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.c"
template <class __dummy>
float _LimG<__dummy>::get_F_inf() {
  typedef float_helper<float, 0x7f80u> _FloatHelper;
  return _FloatHelper::get_from_last_word();
}
template <class __dummy>
float _LimG<__dummy>::get_F_qNaN() {
  typedef float_helper<float, 0x7f81u> _FloatHelper;
  return _FloatHelper::get_from_last_word();
}
template <class __dummy>
float _LimG<__dummy>::get_F_sNaN() {
  typedef float_helper<float, 0x7fc1u> _FloatHelper;
  return _FloatHelper::get_from_last_word();
}
template <class __dummy>
float _LimG<__dummy>::get_F_denormMin() {
  typedef float_helper<float, 0x0001u> _FloatHelper;
  return _FloatHelper::get_from_first_word();
}

template <int __use_double_limits>
class _NumericLimitsAccess;

template<>
class _NumericLimitsAccess<1> {
public:
  static double get_inf() {
    typedef float_helper<double, 0x7ff0u> _FloatHelper;
    return _FloatHelper::get_from_last_word();
  }
  static double get_qNaN() {
    typedef float_helper<double, 0x7ff1u> _FloatHelper;
    return _FloatHelper::get_from_last_word();
  }
  static double get_sNaN() {
    typedef float_helper<double, 0x7ff9u> _FloatHelper;
    return _FloatHelper::get_from_last_word();
  }
};

template <class __dummy>
double _LimG<__dummy>::get_D_inf()
{ return _NumericLimitsAccess<1>::get_inf(); }
template <class __dummy>
double _LimG<__dummy>::get_D_qNaN()
{ return _NumericLimitsAccess<1>::get_qNaN(); }
template <class __dummy>
double _LimG<__dummy>::get_D_sNaN()
{ return _NumericLimitsAccess<1>::get_sNaN(); }
template <class __dummy>
double _LimG<__dummy>::get_D_denormMin() {
  typedef float_helper<double, 0x0001u> _FloatHelper;
  return _FloatHelper::get_from_first_word();
}


template<>
class _NumericLimitsAccess<0> {
public:
  static long double get_inf() {



    typedef float_helper2<long double, 0x8000u, 0x7fffu> _FloatHelper;

    return _FloatHelper::get_from_last_word();
  }
  static long double get_qNaN() {



    typedef float_helper2<long double, 0xc000u, 0x7fffu> _FloatHelper;

    return _FloatHelper::get_from_last_word();
  }
  static long double get_sNaN() {



    typedef float_helper2<long double, 0x9000u, 0x7fffu> _FloatHelper;

    return _FloatHelper::get_from_last_word();
  }
};

template <class __dummy>
long double _LimG<__dummy>::get_LD_inf() {
  const int __use_double_limits = sizeof(double) == sizeof(long double) ? 1 : 0;
  return _NumericLimitsAccess<__use_double_limits>::get_inf();
}
template <class __dummy>
long double _LimG<__dummy>::get_LD_qNaN() {
  const int __use_double_limits = sizeof(double) == sizeof(long double) ? 1 : 0;
  return _NumericLimitsAccess<__use_double_limits>::get_qNaN();
}
template <class __dummy>
long double _LimG<__dummy>::get_LD_sNaN() {
  const int __use_double_limits = sizeof(double) == sizeof(long double) ? 1 : 0;
  return _NumericLimitsAccess<__use_double_limits>::get_sNaN();
}
template <class __dummy>
long double _LimG<__dummy>::get_LD_denormMin() {
  typedef float_helper<long double, 0x0001u> _FloatHelper;
  return _FloatHelper::get_from_first_word();
}







}

}
# 513 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_limits.h" 2
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.c" 2


namespace std {

namespace priv {
# 40 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.c"
template <class _CharT, class _OutputIter>
_OutputIter
__copy_float_and_fill(const _CharT* __first, const _CharT* __last,
                      _OutputIter __oi,
                      ios_base::fmtflags __flags,
                      streamsize __width, _CharT __fill,
                      _CharT __xplus, _CharT __xminus) {
  if (__width <= __last - __first)
    return ::std::copy(__first, __last, __oi);
  else {
    streamsize __pad = __width - (__last - __first);
    ios_base::fmtflags __dir = __flags & ios_base::adjustfield;

    if (__dir == ios_base::left) {
      __oi = ::std::copy(__first, __last, __oi);
      return ::std::priv:: __fill_n(__oi, __pad, __fill);
    }
    else if (__dir == ios_base::internal && __first != __last &&
             (*__first == __xplus || *__first == __xminus)) {
      *__oi++ = *__first++;
      __oi = ::std::priv:: __fill_n(__oi, __pad, __fill);
      return ::std::copy(__first, __last, __oi);
    }
    else {
      __oi = ::std::priv:: __fill_n(__oi, __pad, __fill);
      return ::std::copy(__first, __last, __oi);
    }
  }
}



template <class _OutputIter>
_OutputIter
__put_float(__iostring &__str, _OutputIter __oi,
            ios_base& __f, wchar_t __fill,
            wchar_t __decimal_point, wchar_t __sep,
            size_t __group_pos, const string& __grouping) {
  const ctype<wchar_t>& __ct = use_facet<ctype<wchar_t> >(__f.getloc());

  __iowstring __wbuf;
  __convert_float_buffer(__str, __wbuf, __ct, __decimal_point);

  if (!__grouping.empty()) {
    __insert_grouping(__wbuf, __group_pos, __grouping,
                      __sep, __ct.widen('+'), __ct.widen('-'), 0);
  }

  return __copy_float_and_fill(__wbuf.data(), __wbuf.data() + __wbuf.size(), __oi,
                               __f.flags(), __f.width(0), __fill, __ct.widen('+'), __ct.widen('-'));
}



template <class _OutputIter>
_OutputIter
__put_float(__iostring &__str, _OutputIter __oi,
            ios_base& __f, char __fill,
            char __decimal_point, char __sep,
            size_t __group_pos, const string& __grouping) {
  if ((__group_pos < __str.size()) && (__str[__group_pos] == '.')) {
    __str[__group_pos] = __decimal_point;
  }

  if (!__grouping.empty()) {
    __insert_grouping(__str, __group_pos,
                      __grouping, __sep, '+', '-', 0);
  }

  return __copy_float_and_fill(__str.data(), __str.data() + __str.size(), __oi,
                               __f.flags(), __f.width(0), __fill, '+', '-');
}

template <class _CharT, class _OutputIter, class _Float>
_OutputIter
__do_put_float(_OutputIter __s, ios_base& __f,
                _CharT __fill, _Float __x) {
  __iostring __buf;

  size_t __group_pos = __write_float(__buf, __f.flags(), (int)__f.precision(), __x);

  const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__f.getloc());
  return __put_float(__buf, __s, __f, __fill,
                     __np.decimal_point(), __np.thousands_sep(),
                     __group_pos, __np.grouping());
}

inline void __get_money_digits_aux (__iostring &__buf, ios_base &, long double __x)
{ __get_floor_digits(__buf, __x); }


inline void __get_money_digits_aux (__iowstring &__wbuf, ios_base &__f, long double __x) {
  __iostring __buf;
  __get_floor_digits(__buf, __x);

  const ctype<wchar_t>& __ct = use_facet<ctype<wchar_t> >(__f.getloc());
  __convert_float_buffer(__buf, __wbuf, __ct, wchar_t(0), false);
}


template <class _CharT>
void __get_money_digits(::std::priv:: __basic_iostring<_CharT> &__buf, ios_base& __f, long double __x)
{ __get_money_digits_aux(__buf, __f, __x); }



template <class _CharT, class _OutputIter>
_OutputIter
__copy_integer_and_fill(const _CharT* __buf, ptrdiff_t __len,
                        _OutputIter __oi,
                        ios_base::fmtflags __flg, streamsize __wid, _CharT __fill,
                        _CharT __xplus, _CharT __xminus) {
  if (__len >= __wid)
    return ::std::copy(__buf, __buf + __len, __oi);
  else {


    typedef char __static_assert[(sizeof(streamsize) > sizeof(ptrdiff_t)) || ((sizeof(streamsize) == sizeof(ptrdiff_t)) && numeric_limits<ptrdiff_t>::is_signed) ? 1 : -1] __attribute__((unused));

    ptrdiff_t __pad = static_cast<ptrdiff_t>((min) (static_cast<streamsize>((numeric_limits<ptrdiff_t>::max)()), static_cast<streamsize>(__wid - __len)))
                                                                                                ;
    ios_base::fmtflags __dir = __flg & ios_base::adjustfield;

    if (__dir == ios_base::left) {
      __oi = ::std::copy(__buf, __buf + __len, __oi);
      return ::std::priv:: __fill_n(__oi, __pad, __fill);
    }
    else if (__dir == ios_base::internal && __len != 0 &&
             (__buf[0] == __xplus || __buf[0] == __xminus)) {
      *__oi++ = __buf[0];
      __oi = __fill_n(__oi, __pad, __fill);
      return ::std::copy(__buf + 1, __buf + __len, __oi);
    }
    else if (__dir == ios_base::internal && __len >= 2 &&
             (__flg & ios_base::showbase) &&
             (__flg & ios_base::basefield) == ios_base::hex) {
      *__oi++ = __buf[0];
      *__oi++ = __buf[1];
      __oi = __fill_n(__oi, __pad, __fill);
      return ::std::copy(__buf + 2, __buf + __len, __oi);
    }
    else {
      __oi = __fill_n(__oi, __pad, __fill);
      return ::std::copy(__buf, __buf + __len, __oi);
    }
  }
}



template <class _OutputIter>
_OutputIter
__put_integer(char* __buf, char* __iend, _OutputIter __s,
              ios_base& __f,
              ios_base::fmtflags __flags, wchar_t __fill) {
  locale __loc = __f.getloc();
  const ctype<wchar_t>& __ct = use_facet<ctype<wchar_t> >(__loc);

  wchar_t __xplus = __ct.widen('+');
  wchar_t __xminus = __ct.widen('-');

  wchar_t __wbuf[64];
  __ct.widen(__buf, __iend, __wbuf);
  ptrdiff_t __len = __iend - __buf;
  wchar_t* __eend = __wbuf + __len;

  const numpunct<wchar_t>& __np = use_facet<numpunct<wchar_t> >(__loc);
  const string& __grouping = __np.grouping();

  if (!__grouping.empty()) {
    int __basechars;
    if (__flags & ios_base::showbase)
      switch (__flags & ios_base::basefield) {
        case ios_base::hex: __basechars = 2; break;
        case ios_base::oct: __basechars = 1; break;
        default: __basechars = 0;
      }
    else
      __basechars = 0;

    __len = __insert_grouping(__wbuf, __eend, __grouping, __np.thousands_sep(),
                              __xplus, __xminus, __basechars);
  }

  return __copy_integer_and_fill((wchar_t*)__wbuf, __len, __s,
                                 __flags, __f.width(0), __fill, __xplus, __xminus);
}



template <class _OutputIter>
_OutputIter
__put_integer(char* __buf, char* __iend, _OutputIter __s,
              ios_base& __f, ios_base::fmtflags __flags, char __fill) {
  char __grpbuf[64];
  ptrdiff_t __len = __iend - __buf;

  const numpunct<char>& __np = use_facet<numpunct<char> >(__f.getloc());
  const string& __grouping = __np.grouping();

  if (!__grouping.empty()) {
    int __basechars;
    if (__flags & ios_base::showbase)
      switch (__flags & ios_base::basefield) {
        case ios_base::hex: __basechars = 2; break;
        case ios_base::oct: __basechars = 1; break;
        default: __basechars = 0;
      }
    else
      __basechars = 0;



    ::std::copy(__buf, __iend, (char *) __grpbuf);
    __buf = __grpbuf;
    __iend = __grpbuf + __len;
    __len = __insert_grouping(__buf, __iend, __grouping, __np.thousands_sep(),
                              '+', '-', __basechars);
  }

  return __copy_integer_and_fill(__buf, __len, __s, __flags, __f.width(0), __fill, '+', '-');
}





typedef long __max_int_t;
typedef unsigned long __umax_int_t;


__attribute__((visibility("default"))) const char* __hex_char_table_lo();
__attribute__((visibility("default"))) const char* __hex_char_table_hi();

template <class _Integer>
inline char*
__write_decimal_backward(char* __ptr, _Integer __x, ios_base::fmtflags __flags, const __true_type& ) {
  const bool __negative = __x < 0 ;
  __max_int_t __temp = __x;
  __umax_int_t __utemp = __negative?-__temp:__temp;

  for (; __utemp != 0; __utemp /= 10)
    *--__ptr = (char)((int)(__utemp % 10) + '0');

  if (__negative)
    *--__ptr = '-';
  else if (__flags & ios_base::showpos)
    *--__ptr = '+';
  return __ptr;
}

template <class _Integer>
inline char*
__write_decimal_backward(char* __ptr, _Integer __x, ios_base::fmtflags __flags, const __false_type& ) {
  for (; __x != 0; __x /= 10)
    *--__ptr = (char)((int)(__x % 10) + '0');

  if (__flags & ios_base::showpos)
    *--__ptr = '+';
  return __ptr;
}

template <class _Integer>
char*
__write_integer_backward(char* __buf, ios_base::fmtflags __flags, _Integer __x) {
  char* __ptr = __buf;

  if (__x == 0) {
    *--__ptr = '0';
    if ((__flags & ios_base::showpos) && ((__flags & (ios_base::oct | ios_base::hex)) == 0))
      *--__ptr = '+';

  }
  else {
    switch (__flags & ios_base::basefield) {
      case ios_base::oct:
        {
          __umax_int_t __temp = __x;

          if ( sizeof(__x) < 8 && sizeof(__umax_int_t) >= 8 )
            __temp &= 0xFFFFFFFF;

          for (; __temp != 0; __temp >>=3)
            *--__ptr = (char)((((unsigned)__temp)& 0x7) + '0');


          if (__flags & ios_base::showbase)
            *--__ptr = '0';
        }
        break;
      case ios_base::hex:
        {
          const char* __table_ptr = (__flags & ios_base::uppercase) ?
            __hex_char_table_hi() : __hex_char_table_lo();
          __umax_int_t __temp = __x;

          if ( sizeof(__x) < 8 && sizeof(__umax_int_t) >= 8 )
            __temp &= 0xFFFFFFFF;

          for (; __temp != 0; __temp >>=4)
            *--__ptr = __table_ptr[((unsigned)__temp & 0xF)];

          if (__flags & ios_base::showbase) {
            *--__ptr = __table_ptr[16];
            *--__ptr = '0';
          }
        }
        break;

      default:
        {







          typedef typename __bool2type<numeric_limits<_Integer>::is_signed>::_Ret _IsSigned;
          __ptr = __write_decimal_backward(__ptr, __x, __flags, _IsSigned());

        }
        break;
    }
  }


  return __ptr;
}

template <class _CharT, class _OutputIter, class _Integer>
_OutputIter
__do_put_integer(_OutputIter __s, ios_base& __f, _CharT __fill, _Integer __x) {




  char __buf[sizeof(_Integer) * 3 + 2];
  const ptrdiff_t __buf_size = sizeof(__buf) / sizeof(char);
  ios_base::fmtflags __flags = __f.flags();
  char* __ibeg = __write_integer_backward((char*)__buf + __buf_size, __flags, __x);
  return __put_integer(__ibeg, (char*)__buf + __buf_size, __s, __f, __flags, __fill);
}

template <class _CharT, class _OutputIter>
_OutputIter
__do_put_bool(_OutputIter __s, ios_base& __f, _CharT __fill, bool __x) {
  const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__f.getloc());

  basic_string<_CharT, char_traits<_CharT>, allocator<_CharT> > __str = __x ? __np.truename() : __np.falsename();

  streamsize __wid = __f.width(0);
  if (__str.size() >= static_cast<size_t>(__wid))
    return ::std::copy(__str.begin(), __str.end(), __s);
  else {
    streamsize __pad = __wid - __str.size();
    ios_base::fmtflags __dir = __f.flags() & ios_base::adjustfield;

    if (__dir == ios_base::left) {
      __s = ::std::copy(__str.begin(), __str.end(), __s);
      return __fill_n(__s, __pad, __fill);
    }
    else {
      __s = __fill_n(__s, __pad, __fill);
      return ::std::copy(__str.begin(), __str.end(), __s);
    }
  }
}
}





template <class _CharT, class _OutputIterator>
locale::id num_put<_CharT, _OutputIterator>::id;


template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                                     bool __val) const {
  if (!(__f.flags() & ios_base::boolalpha))

    return do_put(__s, __f, __fill, static_cast<long>(__val));

  return ::std::priv:: __do_put_bool(__s, __f, __fill, __val);
}


template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                                     long __val) const
{ return ::std::priv:: __do_put_integer(__s, __f, __fill, __val); }

template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                                     unsigned long __val) const
{ return ::std::priv:: __do_put_integer(__s, __f, __fill, __val); }

template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                                     double __val) const
{ return ::std::priv:: __do_put_float(__s, __f, __fill, __val); }


template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT __fill,
                                     long double __val) const
{ return ::std::priv:: __do_put_float(__s, __f, __fill, __val); }
# 473 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.c"
template <class _CharT, class _OutputIter>
_OutputIter
num_put<_CharT, _OutputIter>::do_put(_OutputIter __s, ios_base& __f, _CharT ,
                                     const void* __val) const {
  const ctype<_CharT>& __c_type = use_facet<ctype<_CharT> >(__f.getloc());
  ios_base::fmtflags __save_flags = __f.flags();

  __f.setf(ios_base::hex, ios_base::basefield);
  __f.setf(ios_base::showbase);
  __f.setf(ios_base::internal, ios_base::adjustfield);
  __f.width((sizeof(void*) * 2) + 2);
  if ( __val == 0 ) {


    const char* __table_ptr = (__save_flags & ios_base::uppercase) ?
            ::std::priv:: __hex_char_table_hi() : ::std::priv:: __hex_char_table_lo();
    __s++ = __c_type.widen( '0' );
    __s++ = __c_type.widen( __table_ptr[16] );
    __f.width((sizeof(void*) * 2));
  } else {
    __f.width((sizeof(void*) * 2) + 2);
  }




  _OutputIter result =



    ::std::priv:: __do_put_integer(__s, __f, __c_type.widen('0'), reinterpret_cast<unsigned long>(__val))




        ;



  __f.flags(__save_flags);
  return result;
}

}
# 181 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_put.h" 2
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.c" 2


namespace std {






template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>::basic_ostream(basic_streambuf<_CharT, _Traits>* __buf)
    : basic_ios<_CharT, _Traits>() {
  this->init(__buf);
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>::~basic_ostream()
{}


template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>&
basic_ostream<_CharT, _Traits>::operator<<(basic_streambuf<_CharT, _Traits>* __from) {
  sentry __sentry(*this);
  if (__sentry) {
    if (__from) {
      bool __any_inserted = __from->gptr() != __from->egptr()
        ? this->_M_copy_buffered(__from, this->rdbuf())
        : this->_M_copy_unbuffered(__from, this->rdbuf());
      if (!__any_inserted)
        this->setstate(ios_base::failbit);
    }
    else
      this->setstate(ios_base::badbit);
  }

  return *this;
}






template <class _CharT, class _Traits>
bool basic_ostream<_CharT, _Traits>
  ::_M_copy_buffered(basic_streambuf<_CharT, _Traits>* __from,
                     basic_streambuf<_CharT, _Traits>* __to) {
  bool __any_inserted = false;

  while (__from->egptr() != __from->gptr()) {
    const ptrdiff_t __avail = __from->egptr() - __from->gptr();

    streamsize __nwritten;
    {
      __nwritten = __to->sputn(__from->gptr(), __avail);
      __from->gbump((int)__nwritten);
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
      return __any_inserted;
    }

    if (__nwritten == __avail) {
      {
        if (this->_S_eof(__from->sgetc()))
          return true;
        else
          __any_inserted = true;
      }
      if (false) {
        this->_M_handle_exception(ios_base::failbit);
        return false;
      }
    }
    else if (__nwritten != 0)
      return true;
    else
      return __any_inserted;
  }



  return __any_inserted || this->_M_copy_unbuffered(__from, __to);
}





template <class _CharT, class _Traits>
struct _SPutBackC {
  typedef basic_streambuf<_CharT, _Traits> _StreamBuf;
  typedef typename _StreamBuf::int_type int_type;
  _SPutBackC(_StreamBuf *pfrom)
    : __pfrom(pfrom), __c(0), __do_guard(false) {}
  ~_SPutBackC() {
    if (__do_guard) {
      __pfrom->sputbackc(_Traits::to_char_type(__c));
    }
  }

  void guard(int_type c) {
    __c = c;
    __do_guard = true;
  }
  void release() {
    __do_guard = false;
  }

private:
  _StreamBuf *__pfrom;
  int_type __c;
  bool __do_guard;
};

template <class _CharT, class _Traits>
bool basic_ostream<_CharT, _Traits>
  ::_M_copy_unbuffered(basic_streambuf<_CharT, _Traits>* __from,
                       basic_streambuf<_CharT, _Traits>* __to) {
  typedef _SPutBackC<_CharT, _Traits> _SPutBackCGuard;
  bool __any_inserted = false;
  int_type __c;

  {
    _SPutBackCGuard __cguard(__from);
    for (;;) {
      {
        __c = __from->sbumpc();
      }
      if (false) {
        this->_M_handle_exception(ios_base::failbit);
        break;
      }

      if (this->_S_eof(__c))
        break;

      __cguard.guard(__c);



      if (this->_S_eof(__to->sputc(_Traits::to_char_type(__c))))
        break;
# 179 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.c"
      __cguard.release();
      __any_inserted = true;
    }
  }
  if (false) {
    this->_M_handle_exception(ios_base::badbit);
  }
  return __any_inserted;
}

namespace priv {


template <class _CharT, class _Traits, class _Number>
basic_ostream<_CharT, _Traits>&
__put_num(basic_ostream<_CharT, _Traits>& __os, _Number __x) {
  typedef typename basic_ostream<_CharT, _Traits>::sentry _Sentry;
  _Sentry __sentry(__os);
  bool __failed = true;

  if (__sentry) {
    {
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> > _NumPut;
      __failed = (use_facet<_NumPut>(__os.getloc())).put(ostreambuf_iterator<_CharT, _Traits>(__os.rdbuf()),
                                                         __os, __os.fill(),
                                                         __x).failed();
    }
    if (false) {
      __os._M_handle_exception(ios_base::badbit);
    }
  }
  if (__failed)
    __os.setstate(ios_base::badbit);
  return __os;
}

}





template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(short __x) {
  typedef char __static_assert[sizeof(short) <= sizeof(long) ? 1 : -1] __attribute__((unused));
  long __tmp = ((this->flags() & _Basic_ios::basefield) != ios_base::dec) ?
                  static_cast<long>(static_cast<unsigned short>(__x)): __x;
  return ::std::priv:: __put_num(*this, __tmp);
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned short __x) {
  typedef char __static_assert[sizeof(unsigned short) <= sizeof(unsigned long) ? 1 : -1] __attribute__((unused));
  return ::std::priv:: __put_num(*this, static_cast<unsigned long>(__x));
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(int __x) {
  typedef char __static_assert[sizeof(int) <= sizeof(long) ? 1 : -1] __attribute__((unused));
  long __tmp = ((this->flags() & _Basic_ios::basefield) != ios_base::dec) ?
                  static_cast<long>(static_cast<unsigned int>(__x)): __x;
  return ::std::priv:: __put_num(*this, __tmp);
}

template <class _CharT, class _Traits>

basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned int __x) {
  typedef char __static_assert[sizeof(unsigned int) <= sizeof(unsigned long) ? 1 : -1] __attribute__((unused));







  return ::std::priv:: __put_num(*this, static_cast<unsigned long>(__x));
}

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long __x)
{ return ::std::priv:: __put_num(*this, __x); }

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(unsigned long __x)
{ return ::std::priv:: __put_num(*this, __x); }
# 275 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.c"
template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(float __x)
{ return ::std::priv:: __put_num(*this, static_cast<double>(__x)); }

template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(double __x)
{ return ::std::priv:: __put_num(*this, __x); }


template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(long double __x)
{ return ::std::priv:: __put_num(*this, __x); }


template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(const void* __x)
{ return ::std::priv:: __put_num(*this, __x); }


template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>& basic_ostream<_CharT, _Traits>::operator<<(bool __x)
{ return ::std::priv:: __put_num(*this, __x); }


template <class _CharT, class _Traits>
void basic_ostream<_CharT, _Traits>::_M_put_char(_CharT __c) {
  sentry __sentry(*this);
  if (__sentry) {
    bool __failed = true;
    {
      streamsize __npad = this->width() > 0 ? this->width() - 1 : 0;

      if (__npad == 0)
        __failed = this->_S_eof(this->rdbuf()->sputc(__c));
      else if ((this->flags() & ios_base::adjustfield) == ios_base::left) {
        __failed = this->_S_eof(this->rdbuf()->sputc(__c));
        __failed = __failed ||
                   this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
      }
      else {
        __failed = this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
        __failed = __failed || this->_S_eof(this->rdbuf()->sputc(__c));
      }

      this->width(0);
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }

    if (__failed)
      this->setstate(ios_base::badbit);
  }
}

template <class _CharT, class _Traits>
void basic_ostream<_CharT, _Traits>::_M_put_nowiden(const _CharT* __s) {
  sentry __sentry(*this);
  if (__sentry) {
    bool __failed = true;
    streamsize __n = _Traits::length(__s);
    streamsize __npad = this->width() > __n ? this->width() - __n : 0;

    {
      if (__npad == 0)
        __failed = this->rdbuf()->sputn(__s, __n) != __n;
      else if ((this->flags() & ios_base::adjustfield) == ios_base::left) {
        __failed = this->rdbuf()->sputn(__s, __n) != __n;
        __failed = __failed ||
                   this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
      }
      else {
        __failed = this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
        __failed = __failed || this->rdbuf()->sputn(__s, __n) != __n;
      }

      this->width(0);
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }

    if (__failed)
      this->setstate(ios_base::failbit);
  }
}

template <class _CharT, class _Traits>
void basic_ostream<_CharT, _Traits>::_M_put_widen(const char* __s) {
  sentry __sentry(*this);
  if (__sentry) {
    bool __failed = true;
    streamsize __n = char_traits<char>::length(__s);
    streamsize __npad = this->width() > __n ? this->width() - __n : 0;

    {
      if (__npad == 0)
        __failed = !this->_M_put_widen_aux(__s, __n);
      else if ((this->flags() & ios_base::adjustfield) == ios_base::left) {
        __failed = !this->_M_put_widen_aux(__s, __n);
        __failed = __failed ||
                   this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
      }
      else {
        __failed = this->rdbuf()->_M_sputnc(this->fill(), __npad) != __npad;
        __failed = __failed || !this->_M_put_widen_aux(__s, __n);
      }

      this->width(0);
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }

    if (__failed)
      this->setstate(ios_base::failbit);
  }
}

template <class _CharT, class _Traits>
bool basic_ostream<_CharT, _Traits>::_M_put_widen_aux(const char* __s,
                                                      streamsize __n) {
  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();

  for ( ; __n > 0 ; --__n)
    if (this->_S_eof(__buf->sputc(this->widen(*__s++))))
      return false;
  return true;
}


template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>&
basic_ostream<_CharT, _Traits>::put(char_type __c) {
  sentry __sentry(*this);
  bool __failed = true;

  if (__sentry) {
    {
      __failed = this->_S_eof(this->rdbuf()->sputc(__c));
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }
  }

  if (__failed)
    this->setstate(ios_base::badbit);

  return *this;
}


template <class _CharT, class _Traits>
basic_ostream<_CharT, _Traits>&
basic_ostream<_CharT, _Traits>::write(const char_type* __s, streamsize __n) {
  sentry __sentry(*this);
  bool __failed = true;

  if (__sentry) {
    {
      __failed = this->rdbuf()->sputn(__s, __n) != __n;
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }
  }

  if (__failed)
    this->setstate(ios_base::badbit);

  return *this;
}

}
# 381 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ostream.h" 2
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_io.h" 2



# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.h" 1
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istreambuf_iterator.h" 1
# 34 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istreambuf_iterator.h"
namespace std {


template <class _CharT, class _Traits>
extern basic_streambuf<_CharT, _Traits>* _M_get_istreambuf(basic_istream<_CharT, _Traits>& ) ;





template<class _CharT, class _Traits>
class istreambuf_iterator :
  public iterator<input_iterator_tag, _CharT, typename _Traits::off_type, _CharT*, _CharT&>
{
public:
  typedef _CharT char_type;
  typedef _Traits traits_type;
  typedef typename _Traits::int_type int_type;
  typedef basic_streambuf<_CharT, _Traits> streambuf_type;
  typedef basic_istream<_CharT, _Traits> istream_type;

  typedef input_iterator_tag iterator_category;
  typedef _CharT value_type;
  typedef typename _Traits::off_type difference_type;
  typedef const _CharT* pointer;
  typedef const _CharT& reference;

public:
  istreambuf_iterator(streambuf_type* __p = 0) { this->_M_init(__p); }

  inline istreambuf_iterator(basic_istream<_CharT, _Traits>& __is);

  char_type operator*() const { this->_M_getc(); return _M_c; }
  istreambuf_iterator<_CharT, _Traits>& operator++() {
    _M_buf->sbumpc();
    _M_have_c = false;
    return *this;
  }
  istreambuf_iterator<_CharT, _Traits> operator++(int);

  bool equal(const istreambuf_iterator<_CharT, _Traits>& __i) const {
    if (this->_M_buf)
      this->_M_getc();
    if (__i._M_buf)
      __i._M_getc();
    return this->_M_eof == __i._M_eof;
  }

private:
  void _M_init(streambuf_type* __p) {
    _M_buf = __p;
    _M_eof = (__p == 0);
    _M_have_c = false;
  }

  void _M_getc() const {
    if (_M_have_c)
      return;
    int_type __c = _M_buf->sgetc();
    _M_c = traits_type::to_char_type(__c);
    _M_eof = traits_type::eq_int_type(__c, traits_type::eof());
    _M_have_c = true;
  }

private:
  streambuf_type* _M_buf;
  mutable _CharT _M_c;
  mutable bool _M_eof;
  mutable bool _M_have_c;
};

template<class _CharT, class _Traits>
inline istreambuf_iterator<_CharT, _Traits>::istreambuf_iterator(basic_istream<_CharT, _Traits>& __is)
{ this->_M_init(_M_get_istreambuf(__is)); }

template<class _CharT, class _Traits>
inline bool operator==(const istreambuf_iterator<_CharT, _Traits>& __x,
                                  const istreambuf_iterator<_CharT, _Traits>& __y) {
  return __x.equal(__y);
}



template<class _CharT, class _Traits>
inline bool operator!=(const istreambuf_iterator<_CharT, _Traits>& __x,
                                  const istreambuf_iterator<_CharT, _Traits>& __y) {
  return !__x.equal(__y);
}
# 142 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istreambuf_iterator.h"
template <class _CharT, class _Traits>
istreambuf_iterator<_CharT, _Traits>
istreambuf_iterator<_CharT, _Traits>::operator++(int) {
  _M_getc();


  istreambuf_iterator<_CharT, _Traits> __tmp = *this;
  _M_buf->sbumpc();
  _M_have_c = false;
  return __tmp;
}

}
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.h" 2




namespace std {






struct _No_Skip_WS {};

template <class _CharT, class _Traits>
bool _M_init_skip(basic_istream<_CharT, _Traits>& __istr);
template <class _CharT, class _Traits>
bool _M_init_noskip(basic_istream<_CharT, _Traits>& __istr);
# 62 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.h"
template <class _CharT, class _Traits>
class basic_istream : virtual public basic_ios<_CharT, _Traits> {
  typedef basic_istream<_CharT, _Traits> _Self;







public:

  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;
  typedef basic_ios<_CharT, _Traits> _Basic_ios;

  typedef basic_ios<_CharT, _Traits>& ( *__ios_fn)(basic_ios<_CharT, _Traits>&);
  typedef ios_base& ( *__ios_base_fn)(ios_base&);
  typedef _Self& ( *__istream_fn)(_Self&);

public:
  explicit basic_istream(basic_streambuf<_CharT, _Traits>* __buf) :
    basic_ios<_CharT, _Traits>(), _M_gcount(0) {
    this->init(__buf);
  }
  ~basic_istream() {};

public:

public:

  _Self& operator>> (__istream_fn __f) { return __f(*this); }
  _Self& operator>> (__ios_fn __f) { __f(*this); return *this; }
  _Self& operator>> (__ios_base_fn __f) { __f(*this); return *this; }

public:
  _Self& operator>> (short& __val);
  _Self& operator>> (int& __val);
  _Self& operator>> (unsigned short& __val);
  _Self& operator>> (unsigned int& __val);
  _Self& operator>> (long& __val);
  _Self& operator>> (unsigned long& __val);




  _Self& operator>> (float& __val);
  _Self& operator>> (double& __val);

  _Self& operator>> (long double& __val);


  _Self& operator>> (bool& __val);

  _Self& operator>> (void*& __val);

public:
  _Self& operator>>(basic_streambuf<_CharT, _Traits>*);

public:
  streamsize gcount() const { return _M_gcount; }
  int_type peek();

public:
  int_type get();
  _Self& get(char_type& __c);

public:
  _Self& get(char_type* __s, streamsize __n, char_type __delim);
  _Self& get(char_type* __s, streamsize __n)
    { return get(__s, __n, this->widen('\n')); }

public:
  _Self& get(basic_streambuf<_CharT, _Traits>& __buf,
                     char_type __delim);
  _Self& get(basic_streambuf<_CharT, _Traits>& __buf)
    { return get(__buf, this->widen('\n')); }

public:
  _Self& getline(char_type* __s, streamsize __n, char_type delim);
  _Self& getline(char_type* __s, streamsize __n)
    { return getline(__s, __n, this->widen('\n')); }

public:
  _Self& ignore();
  _Self& ignore(streamsize __n);
  _Self& ignore(streamsize __n, int_type __delim);

  _Self& read(char_type* __s, streamsize __n);
  streamsize readsome(char_type* __s, streamsize __n);

public:
  _Self& putback(char_type __c);
  _Self& unget();

public:
  int sync();

  pos_type tellg();
  _Self& seekg(pos_type __pos);
  _Self& seekg(off_type, ios_base::seekdir);

public:
  void _M_formatted_get(_CharT& __c);
  void _M_formatted_get(_CharT* __s);
  void _M_skip_whitespace(bool __set_failbit);

private:
  streamsize _M_gcount;

public:
# 187 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.h"
  class sentry {
    typedef sentry _Self;


  private:
    const bool _M_ok;


  public:
    typedef _Traits traits_type;

    explicit sentry(basic_istream<_CharT, _Traits>& __istr,
                    bool __noskipws = false) :
      _M_ok((__noskipws || !(__istr.flags() & ios_base::skipws)) ? _M_init_noskip(__istr) : _M_init_skip(__istr) )

      {}



    sentry(basic_istream<_CharT, _Traits>& __istr, _No_Skip_WS) :
      _M_ok(_M_init_noskip(__istr)) {}

    ~sentry() {}

    operator bool() const { return _M_ok; }

  private:

    sentry(const _Self&) : _M_ok(false) {}
    _Self& operator=(const _Self&) { return *this; }
  };





};
# 236 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.h"
template <class _CharT, class _Traits>
inline basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __in_str, _CharT& __c) {
  __in_str._M_formatted_get(__c);
  return __in_str;
}

template <class _Traits>
inline basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __in_str, unsigned char& __c) {
  __in_str._M_formatted_get(reinterpret_cast<char&>(__c));
  return __in_str;
}

template <class _Traits>
inline basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __in_str, signed char& __c) {
  __in_str._M_formatted_get(reinterpret_cast<char&>(__c));
  return __in_str;
}

template <class _CharT, class _Traits>
inline basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __in_str, _CharT* __s) {
  __in_str._M_formatted_get(__s);
  return __in_str;
}

template <class _Traits>
inline basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __in_str, unsigned char* __s) {
  __in_str._M_formatted_get(reinterpret_cast<char*>(__s));
  return __in_str;
}

template <class _Traits>
inline basic_istream<char, _Traits>&
operator>>(basic_istream<char, _Traits>& __in_str, signed char* __s) {
  __in_str._M_formatted_get(reinterpret_cast<char*>(__s));
  return __in_str;
}



template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
ws(basic_istream<_CharT, _Traits>& __istr) {
  if (!__istr.eof()) {
    typedef typename basic_istream<_CharT, _Traits>::sentry _Sentry;
    _Sentry __sentry(__istr, _No_Skip_WS());
    if (__sentry)
      __istr._M_skip_whitespace(false);
  }
  return __istr;
}


template <class _CharT, class _Traits>
inline bool _M_init_skip(basic_istream<_CharT, _Traits>& __istr) {
  if (__istr.good()) {
    if (__istr.tie())
      __istr.tie()->flush();

    __istr._M_skip_whitespace(true);
  }

  if (!__istr.good()) {
    __istr.setstate(ios_base::failbit);
    return false;
  } else
    return true;
}

template <class _CharT, class _Traits>
inline bool _M_init_noskip(basic_istream<_CharT, _Traits>& __istr) {
  if (__istr.good()) {
    if (__istr.tie())
      __istr.tie()->flush();

    if (!__istr.rdbuf())
      __istr.setstate(ios_base::badbit);
  }
  else
    __istr.setstate(ios_base::failbit);
  return __istr.good();
}



template <class _CharT, class _Traits>
class basic_iostream
  : public basic_istream<_CharT, _Traits>,
    public basic_ostream<_CharT, _Traits>
{
public:
  typedef basic_ios<_CharT, _Traits> _Basic_ios;

  explicit basic_iostream(basic_streambuf<_CharT, _Traits>* __buf);
  virtual ~basic_iostream();
};
# 345 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.h"
template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>* _M_get_istreambuf(basic_istream<_CharT, _Traits>& __istr)
{ return __istr.rdbuf(); }

}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.c" 1
# 30 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.c"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.h" 1
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.h"
namespace std {




template <class _CharT, class _InputIter>
class num_get: public locale::facet {
public:
  typedef _CharT char_type;
  typedef _InputIter iter_type;

  explicit num_get(size_t __refs = 0): locale::facet(__refs) {}


  _InputIter get(_InputIter __ii, _InputIter __end, ios_base& __str,
                 ios_base::iostate& __err, bool& __val) const
  { return do_get(__ii, __end, __str, __err, __val); }
# 79 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.h"
  _InputIter get(_InputIter __ii, _InputIter __end, ios_base& __str,
                 ios_base::iostate& __err, long& __val) const
  { return do_get(__ii, __end, __str, __err, __val); }

  _InputIter get(_InputIter __ii, _InputIter __end, ios_base& __str,
                 ios_base::iostate& __err, unsigned short& __val) const
  { return do_get(__ii, __end, __str, __err, __val); }

  _InputIter get(_InputIter __ii, _InputIter __end, ios_base& __str,
                 ios_base::iostate& __err, unsigned int& __val) const
  { return do_get(__ii, __end, __str, __err, __val); }

  _InputIter get(_InputIter __ii, _InputIter __end, ios_base& __str,
                 ios_base::iostate& __err, unsigned long& __val) const
  { return do_get(__ii, __end, __str, __err, __val); }
# 105 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.h"
  _InputIter get(_InputIter __ii, _InputIter __end, ios_base& __str,
                 ios_base::iostate& __err, float& __val) const
  { return do_get(__ii, __end, __str, __err, __val); }

  _InputIter get(_InputIter __ii, _InputIter __end, ios_base& __str,
                 ios_base::iostate& __err, double& __val) const
  { return do_get(__ii, __end, __str, __err, __val); }


  _InputIter get(_InputIter __ii, _InputIter __end, ios_base& __str,
                 ios_base::iostate& __err, long double& __val) const
  { return do_get(__ii, __end, __str, __err, __val); }


  _InputIter get(_InputIter __ii, _InputIter __end, ios_base& __str,
                 ios_base::iostate& __err, void*& __val) const
  { return do_get(__ii, __end, __str, __err, __val); }

  static locale::id id;

protected:
  ~num_get() {}

  typedef string string_type;
  typedef ctype<_CharT> _Ctype;
  typedef numpunct<_CharT> _Numpunct;


  virtual _InputIter do_get(_InputIter __ii, _InputIter __end, ios_base& __str,
                            ios_base::iostate& __err, bool& __val) const;


  virtual _InputIter do_get(_InputIter __ii, _InputIter __end, ios_base& __str,
                            ios_base::iostate& __err, long& __val) const;
  virtual _InputIter do_get(_InputIter __ii, _InputIter __end, ios_base& __str,
                            ios_base::iostate& __err, unsigned short& __val) const;
  virtual _InputIter do_get(_InputIter __ii, _InputIter __end, ios_base& __str,
                            ios_base::iostate& __err, unsigned int& __val) const;
  virtual _InputIter do_get(_InputIter __ii, _InputIter __end, ios_base& __str,
                            ios_base::iostate& __err, unsigned long& __val) const;
# 154 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.h"
  virtual _InputIter do_get(_InputIter __ii, _InputIter __end, ios_base& __str,
                            ios_base::iostate& __err, float& __val) const;
  virtual _InputIter do_get(_InputIter __ii, _InputIter __end, ios_base& __str,
                            ios_base::iostate& __err, double& __val) const;
  virtual _InputIter do_get(_InputIter __ii, _InputIter __end, ios_base& __str,
                            ios_base::iostate& __err, void*& __p) const;


  virtual _InputIter do_get(_InputIter __ii, _InputIter __end, ios_base& __str,
                            ios_base::iostate& __err, long double& __val) const;
# 173 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.h"
};
# 187 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.h"
namespace priv {

__attribute__((visibility("default"))) bool __valid_grouping(const char*, const char*, const char*, const char*);

template <class _InputIter, class _Integer, class _CharT>
bool
__get_decimal_integer(_InputIter& __first, _InputIter& __last, _Integer& __val, _CharT*);


bool __attribute__((visibility("default"))) __get_fdigit(wchar_t&, const wchar_t*);
bool __attribute__((visibility("default"))) __get_fdigit_or_sep(wchar_t&, wchar_t, const wchar_t*);


inline void
_Initialize_get_float(const ctype<char>&,
                       char& Plus, char& Minus,
                       char& pow_e, char& pow_E,
                       char*) {
  Plus = '+';
  Minus = '-';
  pow_e = 'e';
  pow_E = 'E';
}


void __attribute__((visibility("default"))) _Initialize_get_float(const ctype<wchar_t>&,
                                                     wchar_t&, wchar_t&, wchar_t&, wchar_t&, wchar_t*);

void __attribute__((visibility("default"))) __string_to_float(const __iostring&, float&);
void __attribute__((visibility("default"))) __string_to_float(const __iostring&, double&);

void __attribute__((visibility("default"))) __string_to_float(const __iostring&, long double&);


}




}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.c" 1
# 29 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.c"
namespace std {

namespace priv {

__attribute__((visibility("default"))) unsigned char __digit_val_table(unsigned);
__attribute__((visibility("default"))) const char* __narrow_atoms();



inline bool __get_fdigit(char __c, const char*)
{ return __c >= '0' && __c <= '9'; }

inline bool __get_fdigit_or_sep(char& __c, char __sep, const char *__digits) {
  if (__c == __sep) {
    __c = ',' ;
    return true ;
  }
  else
    return __get_fdigit(__c, __digits);
}

inline int
__get_digit_from_table(unsigned __index)
{ return (__index > 127 ? 0xFF : __digit_val_table(__index)); }

template <class _InputIter, class _CharT>
int
__get_base_or_zero(_InputIter& __in_ite, _InputIter& __end,
                   ios_base::fmtflags __flags, const ctype<_CharT>& __c_type) {
  _CharT __atoms[5];
  __c_type.widen(__narrow_atoms(), __narrow_atoms() + 5, __atoms);

  bool __negative = false;
  _CharT __c = *__in_ite;

  if (__c == __atoms[1] ) {
    __negative = true;
    ++__in_ite;
  }
  else if (__c == __atoms[0] )
    ++__in_ite;

  int __base;
  int __valid_zero = 0;

  ios_base::fmtflags __basefield = __flags & ios_base::basefield;

  switch (__basefield) {
  case ios_base::oct:
    __base = 8;
    break;
  case ios_base::dec:
    __base = 10;
    break;
  case ios_base::hex:
    __base = 16;
    if (__in_ite != __end && *__in_ite == __atoms[2] ) {
      ++__in_ite;
      if (__in_ite != __end &&
          (*__in_ite == __atoms[3] || *__in_ite == __atoms[4] ))
        ++__in_ite;
      else
        __valid_zero = 1;
    }
    break;
  default:
    if (__in_ite != __end && *__in_ite == __atoms[2] ) {
      ++__in_ite;
      if (__in_ite != __end &&
          (*__in_ite == __atoms[3] || *__in_ite == __atoms[4] )) {
        ++__in_ite;
        __base = 16;
      }
      else
        {
          __base = 8;
          __valid_zero = 1;
        }
    }
    else
      __base = 10;
    break;
  }
  return (__base << 2) | ((int)__negative << 1) | __valid_zero;
}


template <class _InputIter, class _Integer, class _CharT>
bool
__get_integer(_InputIter& __first, _InputIter& __last,
              int __base, _Integer& __val,
              int __got, bool __is_negative, _CharT __separator, const string& __grouping, const __true_type& ) {
  bool __ovflow = false;
  _Integer __result = 0;
  bool __is_group = !__grouping.empty();
  char __group_sizes[64];
  char __current_group_size = 0;
  char* __group_sizes_end = __group_sizes;

  _Integer __over_base = (numeric_limits<_Integer>::min)() / static_cast<_Integer>(__base);

   for ( ; __first != __last ; ++__first) {

     const _CharT __c = *__first;

     if (__is_group && __c == __separator) {
       *__group_sizes_end++ = __current_group_size;
       __current_group_size = 0;
       continue;
     }

     int __n = __get_digit_from_table(__c);

     if (__n >= __base)
       break;

     ++__got;
     ++__current_group_size;

     if (__result < __over_base)
       __ovflow = true;
     else {
       _Integer __next = static_cast<_Integer>(__base * __result - __n);
       if (__result != 0)
         __ovflow = __ovflow || __next >= __result;
       __result = __next;
     }
   }

   if (__is_group && __group_sizes_end != __group_sizes) {
     *__group_sizes_end++ = __current_group_size;
   }


   if (__got > 0) {
       __val = __ovflow ? __is_negative ? (numeric_limits<_Integer>::min)()
                                        : (numeric_limits<_Integer>::max)()
                        : __is_negative ? __result
                                        : static_cast<_Integer>(-__result);
   }

  return ((__got > 0) && !__ovflow) &&
          (__is_group == 0 ||
           __valid_grouping(__group_sizes, __group_sizes_end,
                            __grouping.data(), __grouping.data()+ __grouping.size()));
}

template <class _InputIter, class _Integer, class _CharT>
bool
__get_integer(_InputIter& __first, _InputIter& __last,
              int __base, _Integer& __val,
              int __got, bool __is_negative, _CharT __separator, const string& __grouping, const __false_type& ) {
  bool __ovflow = false;
  _Integer __result = 0;
  bool __is_group = !__grouping.empty();
  char __group_sizes[64];
  char __current_group_size = 0;
  char* __group_sizes_end = __group_sizes;

  _Integer __over_base = (numeric_limits<_Integer>::max)() / static_cast<_Integer>(__base);

  for ( ; __first != __last ; ++__first) {

    const _CharT __c = *__first;

    if (__is_group && __c == __separator) {
      *__group_sizes_end++ = __current_group_size;
      __current_group_size = 0;
      continue;
    }

    int __n = __get_digit_from_table(__c);

    if (__n >= __base)
      break;

    ++__got;
    ++__current_group_size;

    if (__result > __over_base)
      __ovflow = true;
    else {
      _Integer __next = static_cast<_Integer>(__base * __result + __n);
      if (__result != 0)
        __ovflow = __ovflow || __next <= __result;
        __result = __next;
      }
  }

  if (__is_group && __group_sizes_end != __group_sizes) {
      *__group_sizes_end++ = __current_group_size;
  }


  if (__got > 0) {
      __val = __ovflow ? (numeric_limits<_Integer>::max)()
                       : (__is_negative ? static_cast<_Integer>(-__result)
                                        : __result);
  }


  return ((__got > 0) && !__ovflow) &&
          (__is_group == 0 ||
           __valid_grouping(__group_sizes, __group_sizes_end,
                            __grouping.data(), __grouping.data()+ __grouping.size()));
}


template <class _InputIter, class _Integer, class _CharT>
bool
__get_decimal_integer(_InputIter& __first, _InputIter& __last, _Integer& __val, _CharT* ) {
  string __grp;

  return __get_integer(__first, __last, 10, __val, 0, false, _CharT() , __grp, __false_type());
}

template <class _InputIter, class _Integer, class _CharT>
_InputIter
__do_get_integer(_InputIter& __in_ite, _InputIter& __end, ios_base& __str,
                 ios_base::iostate& __err, _Integer& __val, _CharT* ) {
  locale __loc = __str.getloc();
  const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);




  typedef typename __bool2type<numeric_limits<_Integer>::is_signed>::_Ret _IsSigned;


  const int __base_or_zero = __get_base_or_zero(__in_ite, __end, __str.flags(), __ctype);
  int __got = __base_or_zero & 1;

  bool __result;

  if (__in_ite == __end) {

    if (__got > 0) {
      __val = 0;
      __result = true;
    }
    else
      __result = false;
  }
  else {
    const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);
    const bool __negative = (__base_or_zero & 2) != 0;
    const int __base = __base_or_zero >> 2;







    __result = __get_integer(__in_ite, __end, __base, __val, __got, __negative, __np.thousands_sep(), __np.grouping(), _IsSigned());

  }

  __err = static_cast<ios_base::iostate>(__result ? ios_base::goodbit : ios_base::failbit);

  if (__in_ite == __end)
    __err |= ios_base::eofbit;
  return __in_ite;
}


template <class _InputIter, class _CharT>
_InputIter
__copy_sign(_InputIter __first, _InputIter __last, __iostring& __v,
            _CharT __xplus, _CharT __xminus) {
  if (__first != __last) {
    _CharT __c = *__first;
    if (__c == __xplus)
      ++__first;
    else if (__c == __xminus) {
      __v.push_back('-');
      ++__first;
    }
  }
  return __first;
}


template <class _InputIter, class _CharT>
bool
__copy_digits(_InputIter& __first, _InputIter __last,
              __iostring& __v, const _CharT* __digits) {
  bool __ok = false;

  for ( ; __first != __last; ++__first) {
    _CharT __c = *__first;
    if (__get_fdigit(__c, __digits)) {
      __v.push_back((char)__c);
      __ok = true;
    }
    else
      break;
  }
  return __ok;
}

template <class _InputIter, class _CharT>
bool
__copy_grouped_digits(_InputIter& __first, _InputIter __last,
                      __iostring& __v, const _CharT * __digits,
                      _CharT __sep, const string& __grouping,
                      bool& __grouping_ok) {
  bool __ok = false;
  char __group_sizes[64];
  char*__group_sizes_end = __group_sizes;
  char __current_group_size = 0;

  for ( ; __first != __last; ++__first) {
    _CharT __c = *__first;
    bool __tmp = __get_fdigit_or_sep(__c, __sep, __digits);
    if (__tmp) {
      if (__c == ',') {
        *__group_sizes_end++ = __current_group_size;
        __current_group_size = 0;
      }
      else {
        __ok = true;
        __v.push_back((char)__c);
        ++__current_group_size;
      }
    }
    else
      break;
  }

  if (__group_sizes_end != __group_sizes)
    *__group_sizes_end++ = __current_group_size;
  __grouping_ok = __valid_grouping(__group_sizes, __group_sizes_end, __grouping.data(), __grouping.data() + __grouping.size());
  return __ok;
}


template <class _InputIter, class _CharT>
bool
__read_float(__iostring& __buf, _InputIter& __in_ite, _InputIter& __end,
             const ctype<_CharT> &__ct, const numpunct<_CharT> &__numpunct) {



  string __grouping = __numpunct.grouping();
  bool __digits_before_dot ;
  bool __digits_after_dot = false;
  bool __ok;

  bool __grouping_ok = true;

  _CharT __dot = __numpunct.decimal_point();
  _CharT __sep = __numpunct.thousands_sep();

  _CharT __digits[10];
  _CharT __xplus;
  _CharT __xminus;

  _CharT __pow_e;
  _CharT __pow_E;

  _Initialize_get_float(__ct, __xplus, __xminus, __pow_e, __pow_E, __digits);


  __in_ite = __copy_sign(__in_ite, __end, __buf, __xplus, __xminus);


  if (!__grouping.empty())
    __digits_before_dot = __copy_grouped_digits(__in_ite, __end, __buf, __digits,
                                                __sep, __grouping, __grouping_ok);
  else
    __digits_before_dot = __copy_digits(__in_ite, __end, __buf, __digits);


  if (__in_ite != __end && *__in_ite == __dot) {
    __buf.push_back('.');
    ++__in_ite;
    __digits_after_dot = __copy_digits(__in_ite, __end, __buf, __digits);
  }


  __ok = __digits_before_dot || __digits_after_dot;


  if (__ok && __in_ite != __end && (*__in_ite == __pow_e || *__in_ite == __pow_E)) {
    __buf.push_back('e');
    ++__in_ite;
    __in_ite = __copy_sign(__in_ite, __end, __buf, __xplus, __xminus);
    __ok = __copy_digits(__in_ite, __end, __buf, __digits);


  }

  return __ok;
}

template <class _InputIter, class _Float, class _CharT>
_InputIter
__do_get_float(_InputIter& __in_ite, _InputIter& __end, ios_base& __str,
               ios_base::iostate& __err, _Float& __val, _CharT* ) {
  locale __loc = __str.getloc();
  const ctype<_CharT> &__ctype = use_facet<ctype<_CharT> >(__loc);
  const numpunct<_CharT> &__numpunct = use_facet<numpunct<_CharT> >(__loc);

  __iostring __buf ;
  bool __ok = __read_float(__buf, __in_ite, __end, __ctype, __numpunct);
  if (__ok) {
    __string_to_float(__buf, __val);
    __err = ios_base::goodbit;
  }
  else {
    __err = ios_base::failbit;
  }
  if (__in_ite == __end)
    __err |= ios_base::eofbit;
  return __in_ite;
}

template <class _InputIter, class _CharT>
_InputIter
__do_get_alphabool(_InputIter& __in_ite, _InputIter& __end, ios_base& __str,
                   ios_base::iostate& __err, bool& __x, _CharT* ) {
  const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__str.getloc());
  const basic_string<_CharT, char_traits<_CharT>, allocator<_CharT> > __truename = __np.truename();
  const basic_string<_CharT, char_traits<_CharT>, allocator<_CharT> > __falsename = __np.falsename();
  bool __true_ok = true;
  bool __false_ok = true;

  size_t __n = 0;
  for ( ; __in_ite != __end; ++__in_ite) {
    _CharT __c = *__in_ite;
    __true_ok = __true_ok && (__c == __truename[__n]);
    __false_ok = __false_ok && (__c == __falsename[__n]);
    ++__n;

    if ((!__true_ok && !__false_ok) ||
        (__true_ok && __n >= __truename.size()) ||
        (__false_ok && __n >= __falsename.size())) {
      ++__in_ite;
      break;
    }
  }
  if (__true_ok && __n < __truename.size()) __true_ok = false;
  if (__false_ok && __n < __falsename.size()) __false_ok = false;

  if (__true_ok || __false_ok) {
    __err = ios_base::goodbit;
    __x = __true_ok;
  }
  else
    __err = ios_base::failbit;

  if (__in_ite == __end)
    __err |= ios_base::eofbit;

  return __in_ite;
}

}





template <class _CharT, class _InputIterator>
locale::id num_get<_CharT, _InputIterator>::id;


template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in_ite, _InputIter __end,
                                    ios_base& __s, ios_base::iostate& __err, bool& __x) const {
  if (__s.flags() & ios_base::boolalpha) {
    return ::std::priv:: __do_get_alphabool(__in_ite, __end, __s, __err, __x, (_CharT*)0);
  }
  else {
    long __lx;
    _InputIter __tmp = ::std::priv:: __do_get_integer(__in_ite, __end, __s, __err, __lx, (_CharT*)0 );
    if (!(__err & ios_base::failbit)) {
      if (__lx == 0)
        __x = false;
      else if (__lx == 1)
        __x = true;
      else
        __err |= ios_base::failbit;
    }
    return __tmp;
  }
}
# 535 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.c"
template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in_ite, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err, long& __val) const
{ return ::std::priv:: __do_get_integer(__in_ite, __end, __str, __err, __val, (_CharT*)0 ); }

template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in_ite, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    unsigned short& __val) const
{ return ::std::priv:: __do_get_integer(__in_ite, __end, __str, __err, __val, (_CharT*)0 ); }

template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in_ite, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    unsigned int& __val) const
{ return ::std::priv:: __do_get_integer(__in_ite, __end, __str, __err, __val, (_CharT*)0 ); }

template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in_ite, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    unsigned long& __val) const
{ return ::std::priv:: __do_get_integer(__in_ite, __end, __str, __err, __val, (_CharT*)0 ); }

template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in_ite, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    float& __val) const
{ return ::std::priv:: __do_get_float(__in_ite, __end, __str, __err, __val, (_CharT*)0 ); }

template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in_ite, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    double& __val) const
{ return ::std::priv:: __do_get_float(__in_ite, __end, __str, __err, __val, (_CharT*)0 ); }


template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in_ite, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    long double& __val) const
{ return ::std::priv:: __do_get_float(__in_ite, __end, __str, __err, __val, (_CharT*)0 ); }


template <class _CharT, class _InputIter>
_InputIter
num_get<_CharT, _InputIter>::do_get(_InputIter __in_ite, _InputIter __end, ios_base& __str,
                                    ios_base::iostate& __err,
                                    void*& __p) const {



  unsigned long __val;

  iter_type __tmp = ::std::priv:: __do_get_integer(__in_ite, __end, __str, __err, __val, (_CharT*)0 );
  if (!(__err & ios_base::failbit))
    __p = reinterpret_cast<void*>(__val);
  return __tmp;
}
# 617 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.c"
}
# 230 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_num_get.h" 2
# 31 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.c" 2
# 44 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.c"
namespace std {




namespace priv {

template <class _Traits>
struct _Is_not_wspace {
  typedef typename _Traits::char_type argument_type;
  typedef bool result_type;

  const ctype<argument_type>* _M_ctype;

  _Is_not_wspace(const ctype<argument_type>* __c_type) : _M_ctype(__c_type) {}
  bool operator()(argument_type __c) const
    { return !_M_ctype->is(ctype_base::space, __c); }
};

template <class _Traits>
struct _Is_wspace_null {
  typedef typename _Traits::char_type argument_type;
  typedef bool result_type;

  const ctype<argument_type>* _M_ctype;

  _Is_wspace_null(const ctype<argument_type>* __c_type) : _M_ctype(__c_type) {}
  bool operator()(argument_type __c) const {
    return _Traits::eq(__c, argument_type()) ||
           _M_ctype->is(ctype_base::space, __c);
  }
};

template <class _Traits>
struct _Scan_for_wspace {
  typedef typename _Traits::char_type char_type;
  typedef char_type* first_argument_type;
  typedef char_type* second_argument_type;
  typedef char_type* result_type;

  const ctype<char_type>* _M_ctype;

  _Scan_for_wspace(const ctype<char_type>* __ctype) : _M_ctype(__ctype) {}
  const char_type*
  operator()(const char_type* __first, const char_type* __last) const {
    return _M_ctype->scan_is(ctype_base::space, __first, __last);
  }
};

template <class _Traits>
struct _Scan_wspace_null {
  typedef typename _Traits::char_type char_type;
  typedef char_type* first_argument_type;
  typedef char_type* second_argument_type;
  typedef char_type* result_type;

  const ctype<char_type>* _M_ctype;

  _Scan_wspace_null(const ctype<char_type>* __c_type) : _M_ctype(__c_type) {}
  const char_type*
  operator()(const char_type* __first, const char_type* __last) const {
    __last = find_if(__first, __last,
                     _Eq_char_bound<_Traits>(char_type()));
    return _M_ctype->scan_is(ctype_base::space, __first, __last);
  }
};

template <class _Traits>
struct _Scan_for_not_wspace {
  typedef typename _Traits::char_type char_type;
  typedef char_type* first_argument_type;
  typedef char_type* second_argument_type;
  typedef char_type* result_type;

  const ctype<char_type>* _M_ctype;

  _Scan_for_not_wspace(const ctype<char_type>* __c_type) : _M_ctype(__c_type) {}
  const char_type*
  operator()(const char_type* __first, const char_type* __last) const {
    return _M_ctype->scan_not(ctype_base::space, __first, __last);
  }
};

template <class _Traits>
struct _Scan_for_char_val {
  typedef typename _Traits::char_type char_type;
  typedef char_type* first_argument_type;
  typedef char_type* second_argument_type;
  typedef char_type* result_type;

  char_type _M_val;

  _Scan_for_char_val(char_type __val) : _M_val(__val) {}

  const char_type*
  operator()(const char_type* __first, const char_type* __last) const {
    return find_if(__first, __last, _Eq_char_bound<_Traits>(_M_val));
  }
};

template <class _Traits>
struct _Scan_for_int_val {
  typedef typename _Traits::char_type char_type;
  typedef typename _Traits::int_type int_type;
  typedef char_type* first_argument_type;
  typedef char_type* second_argument_type;
  typedef char_type* result_type;

  int_type _M_val;

  _Scan_for_int_val(int_type __val) : _M_val(__val) {}

  const char_type*
  operator()(const char_type* __first, const char_type* __last) const {
    return find_if(__first, __last,
                   _Eq_int_bound<_Traits>(_M_val));
  }
};




template <class _CharT, class _Traits>
bool
__pushback(basic_streambuf<_CharT, _Traits>* __buf, _CharT __c) {
  bool ret;
  {
    const typename _Traits::int_type __eof = _Traits::eof();
    ret = !_Traits::eq_int_type(__buf->sputbackc(__c), __eof);
  }
  if (false) {
    ret = false;
  }
  return ret;
}





template <class _CharT, class _Traits, class _Number>
ios_base::iostate
__get_num(basic_istream<_CharT, _Traits>& __that, _Number& __val) {
  typedef typename basic_istream<_CharT, _Traits>::sentry _Sentry;
  ios_base::iostate __err = 0;
  _Sentry __sentry( __that );
  if (__sentry) {
    typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> > _Num_get;
    {


      (use_facet<_Num_get>(__that.getloc())).get(istreambuf_iterator<_CharT, _Traits>(__that.rdbuf()),
                                               0, __that, __err, __val);
    }
    if (false) {
      __that._M_handle_exception(ios_base::badbit);
    }
    if (__err) __that.setstate(__err);
  }
  return __err;
}

}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (short& __val) {
  long __lval;
  ::std::priv:: __get_num(*this, __lval);
  if ( this->fail() ) {
    return *this;
  }
  short __tmp = static_cast<short>(__lval);
  unsigned short __uval = static_cast<unsigned short>(__lval);


  if ((__tmp != __lval) && ((long)__uval != __lval))
    this->setstate(ios_base::failbit);
  else
    __val = __tmp;
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (int& __val) {
  long __lval;
  ::std::priv:: __get_num(*this, __lval);
  if ( this->fail() ) {
    return *this;
  }
  int __tmp = __lval;
  unsigned int __uval = __lval;


  if ((__tmp != __lval) && ((long)__uval != __lval))
    this->setstate(ios_base::failbit);
  else
    __val = __tmp;
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (unsigned short& __val) {
  ::std::priv:: __get_num(*this, __val);
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (unsigned int& __val) {
  ::std::priv:: __get_num(*this, __val);
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (long& __val) {
  ::std::priv:: __get_num(*this, __val);
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (unsigned long& __val) {
  ::std::priv:: __get_num(*this, __val);
  return *this;
}
# 281 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.c"
template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (float& __val) {
  ::std::priv:: __get_num(*this, __val);
  return *this;
}
template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (double& __val) {
  ::std::priv:: __get_num(*this, __val);
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (long double& __val) {
  ::std::priv:: __get_num(*this, __val);
  return *this;
}


template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (bool& __val) {
  ::std::priv:: __get_num(*this, __val);
  return *this;
}


template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::operator>> (void*& __val) {
  ::std::priv:: __get_num(*this, __val);
  return *this;
}



template <class _CharT, class _Traits>
typename basic_istream<_CharT, _Traits>::int_type
basic_istream<_CharT, _Traits>::peek() {
  typename _Traits::int_type __tmp = _Traits::eof();

  this->_M_gcount = 0;
  sentry __sentry(*this, _No_Skip_WS());

  if (__sentry) {
    {
      __tmp = this->rdbuf()->sgetc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }
    if (this->_S_eof(__tmp))
      this->setstate(ios_base::eofbit);
  }

  return __tmp;
}


template <class _CharT, class _Traits>
typename basic_istream<_CharT, _Traits>::int_type
basic_istream<_CharT, _Traits>::get() {
  typename _Traits::int_type __tmp = _Traits::eof();
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    {
      __tmp = this->rdbuf()->sbumpc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }

    if (!this->_S_eof(__tmp))
      this->_M_gcount = 1;
  }

  if (_M_gcount == 0)
    this->setstate(ios_base::eofbit | ios_base::failbit);

  return __tmp;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::get(_CharT& __c) {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    typename _Traits::int_type __tmp = _Traits::eof();
    {
      __tmp = this->rdbuf()->sbumpc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
    }

    if (!this->_S_eof(__tmp)) {
      this->_M_gcount = 1;
      __c = _Traits::to_char_type(__tmp);
    }
  }

  if (this->_M_gcount == 0)
    this->setstate(ios_base::eofbit | ios_base::failbit);

  return *this;
}






template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::ignore() {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    int_type __c;
    {
      __c = this->rdbuf()->sbumpc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
      return *this;
    }

    if (!this->_S_eof(__c))
      this->_M_gcount = 1;
    else
      this->setstate(ios_base::eofbit);
  }

  return *this;
}



template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::putback(_CharT __c) {
  this->_M_gcount = 0;
  sentry __sentry(*this, _No_Skip_WS());

  if (__sentry) {
    typename _Traits::int_type __tmp = _Traits::eof();
    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();

    if (__buf) {
      {
        __tmp = __buf->sputbackc(__c);
      }
      if (false) {
        this->_M_handle_exception(ios_base::badbit);
      }
    }
    if (this->_S_eof(__tmp))
      this->setstate(ios_base::badbit);
  }
  else
    this->setstate(ios_base::failbit);

  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>& basic_istream<_CharT, _Traits>::unget() {
  this->_M_gcount = 0;

  sentry __sentry(*this, _No_Skip_WS());

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();

    if (__buf) {
      {
        if (this->_S_eof(__buf->sungetc()))
          this->setstate(ios_base::badbit);
      }
      if (false) {
        this->_M_handle_exception(ios_base::badbit);
      }
    } else
      this->setstate(ios_base::badbit);
  }
  else
    this->setstate(ios_base::failbit);

  return *this;
}



template <class _CharT, class _Traits>
int basic_istream<_CharT, _Traits>::sync() {
  sentry __sentry(*this, _No_Skip_WS());

  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
  if (__buf) {
    if (__buf->pubsync() == -1) {
      this->setstate(ios_base::badbit);
      return -1;
    }
    else
      return 0;
  }
  else
    return -1;
}

template <class _CharT, class _Traits>
typename basic_istream<_CharT, _Traits>::pos_type
basic_istream<_CharT, _Traits>::tellg() {
  sentry __sentry(*this, _No_Skip_WS());

  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
  return (__buf && !this->fail()) ? __buf->pubseekoff(0, ios_base::cur, ios_base::in)
    : pos_type(-1);
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::seekg(pos_type __pos) {
  sentry __sentry(*this, _No_Skip_WS());

  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
  if (!this->fail() && __buf) {
    if (__buf->pubseekpos(__pos, ios_base::in) == pos_type(-1)) {
      this->setstate(ios_base::failbit);
    }
  }
  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::seekg(off_type __off, ios_base::seekdir __dir) {
  sentry __sentry(*this, _No_Skip_WS());

  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
  if (!this->fail() && __buf)
    __buf->pubseekoff(__off, __dir, ios_base::in);
  return *this;
}



template <class _CharT, class _Traits>
void basic_istream<_CharT, _Traits>::_M_formatted_get(_CharT& __c) {


  sentry __sentry(*this);

  if (__sentry) {
    typename _Traits::int_type __tmp;

    {
      __tmp = this->rdbuf()->sbumpc();
    }
    if (false) {
      this->_M_handle_exception(ios_base::badbit);
      return;
    }

    if (!this->_S_eof(__tmp))
      __c = _Traits::to_char_type(__tmp);
    else
      this->setstate(ios_base::eofbit | ios_base::failbit);
  }
}
# 575 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.c"
namespace priv {

template < class _CharT, class _Traits, class _Is_Delim>
streamsize
__read_unbuffered(basic_istream<_CharT, _Traits>* __that, basic_streambuf<_CharT, _Traits>* __buf,
                  streamsize _Num, _CharT* __s,
                  _Is_Delim __is_delim,
                  bool __extract_delim, bool __append_null,
                  bool __is_getline)
{
  streamsize __n = 0;
  ios_base::iostate __status = 0;

  typedef typename basic_istream<_CharT, _Traits>::int_type int_type;

  {
    for (;;) {
      if (__n == _Num) {
        if (__is_getline)
          __status |= ios_base::failbit;
        break;
      }
      int_type __c = __buf->sbumpc();

      if (__that->_S_eof(__c)) {
        if (__n < _Num || __is_getline)
          __status |= ios_base::eofbit;
        break;
      } else if (__is_delim(_Traits::to_char_type(__c))) {
        if (__extract_delim) {
          ++__n;
        } else if ( !__pushback(__buf, _Traits::to_char_type(__c)) ) {
          __status |= ios_base::failbit;
        }
        break;
      }

      *__s++ = _Traits::to_char_type(__c);
      ++__n;
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
    *__s = _CharT();
    return __n;
  }

  if (__append_null)
    *__s = _CharT();
  if (__status)
    __that->setstate(__status);
  return __n;
}





template < class _CharT, class _Traits, class _Is_Delim, class _Scan_Delim>
streamsize
__read_buffered(basic_istream<_CharT, _Traits>* __that, basic_streambuf<_CharT, _Traits>* __buf,
                 streamsize _Num, _CharT* __s,
                 _Is_Delim __is_delim, _Scan_Delim __scan_delim,
                 bool __extract_delim, bool __append_null,
                 bool __is_getline) {
  streamsize __n = 0;
  ios_base::iostate __status = 0;
  bool __done = false;

  {
    while (__buf->_M_egptr() != __buf->_M_gptr() && !__done) {
      const _CharT* __first = __buf->_M_gptr();
      const _CharT* __last = __buf->_M_egptr();


      typedef char __static_assert[(sizeof(streamsize) > sizeof(ptrdiff_t)) || ((sizeof(streamsize) == sizeof(ptrdiff_t)) && numeric_limits<ptrdiff_t>::is_signed) ? 1 : -1] __attribute__((unused));

      ptrdiff_t __request = static_cast<ptrdiff_t>((min) (static_cast<streamsize>((numeric_limits<ptrdiff_t>::max)()), _Num - __n));

      const _CharT* __p = __scan_delim(__first, __last);
      ptrdiff_t __chunk = (min) (ptrdiff_t(__p - __first), __request);
      _Traits::copy(__s, __first, __chunk);
      __s += __chunk;
      __n += __chunk;
      __buf->_M_gbump((int)__chunk);


      if (__p != __last && __p - __first <= __request) {
        if (__extract_delim) {
          __n += 1;
          __buf->_M_gbump(1);
        }
        __done = true;
      }


      else if (__n == _Num) {


        if (__is_getline) {
          if (__chunk == __last - __first) {
            if (__that->_S_eof(__buf->sgetc()))
              __status |= ios_base::eofbit;
          }
          else
            __status |= ios_base::failbit;
        }
        __done = true;
      }



      else {
        if (__that->_S_eof(__buf->sgetc())) {
          __status |= ios_base::eofbit;
          __done = true;
        }
      }
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
    __done = true;
  }

  if (__done) {
    if (__append_null)
        *__s = _CharT();
    if (__status != 0)
      __that->setstate(__status);
    return __n;
  }






  return __n + __read_unbuffered(__that, __buf, _Num - __n, __s, __is_delim,
                                 __extract_delim,__append_null,__is_getline);
}

}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::get(_CharT* __s, streamsize __n,
                                    _CharT __delim) {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    if (__n > 0) {
      basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();

      if (__buf->egptr() != __buf->gptr())
        this->_M_gcount =
          ::std::priv:: __read_buffered(this, __buf, __n - 1, __s,
                                     ::std::priv:: _Eq_char_bound<_Traits>(__delim),
                                     ::std::priv:: _Scan_for_char_val<_Traits>(__delim),
                                     false, true, false);
      else
        this->_M_gcount =
          ::std::priv:: __read_unbuffered(this, __buf, __n - 1, __s,
                                       ::std::priv:: _Eq_char_bound<_Traits>(__delim),
                                       false, true, false);
    }
  }

  if (this->_M_gcount == 0)
    this->setstate(ios_base::failbit);

  return *this;
}



template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::getline(_CharT* __s, streamsize __n,
                                        _CharT __delim) {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    if (__n > 0) {
      basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
      this->_M_gcount = __buf->egptr() != __buf->gptr()
        ? ::std::priv:: __read_buffered(this, __buf, __n - 1, __s,
                                     ::std::priv:: _Eq_char_bound<_Traits>(__delim),
                                     ::std::priv:: _Scan_for_char_val<_Traits>(__delim),
                                     true, true, true)
        : ::std::priv:: __read_unbuffered(this, __buf, __n - 1, __s,
                                       ::std::priv:: _Eq_char_bound<_Traits>(__delim),
                                       true, true, true);
    }
  }

  if (this->_M_gcount == 0)
    this->setstate(ios_base::failbit);

  return *this;
}



template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::read(char_type* __s, streamsize __n) {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry && !this->eof()) {
    basic_streambuf<_CharT, _Traits>*__buf = this->rdbuf();
    if (__buf->gptr() != __buf->egptr())
      _M_gcount
        = ::std::priv:: __read_buffered(this, __buf, __n, __s,
                                     ::std::priv:: _Constant_unary_fun<bool, int_type>(false),
                                     ::std::priv:: _Project2nd<const _CharT*, const _CharT*>(),
                                     false, false, false);
    else
      _M_gcount
        = ::std::priv:: __read_unbuffered(this, __buf, __n, __s,
                                       ::std::priv:: _Constant_unary_fun<bool, int_type>(false),
                                       false, false, false);
  }
  else
    this->setstate(ios_base::failbit);

  if (this->eof())
    this->setstate(ios_base::eofbit | ios_base::failbit);

  return *this;
}




template <class _CharT, class _Traits>
streamsize
basic_istream<_CharT, _Traits>::readsome(char_type* __s, streamsize __nmax) {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry && !this->eof() && __nmax >= 0) {

    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
    streamsize __avail = __buf->in_avail();


    if (__avail == -1)
      this->_M_setstate_nothrow(ios_base::eofbit);

    else if (__avail != 0) {

      if (__buf->gptr() != __buf->egptr())
        _M_gcount
          = ::std::priv:: __read_buffered(this, __buf, (min) (__avail, __nmax), __s,
                                       ::std::priv:: _Constant_unary_fun<bool, int_type>(false),
                                       ::std::priv:: _Project2nd<const _CharT*, const _CharT*>(),
                                       false, false, false);
      else
        _M_gcount
          = ::std::priv:: __read_unbuffered(this, __buf, (min) (__avail, __nmax), __s,
                                         ::std::priv:: _Constant_unary_fun<bool, int_type>(false),
                                         false, false, false);
    }
  }
  else {

    if (this->eof())
      this->setstate(ios_base::eofbit | ios_base::failbit);
    else
      this->setstate(ios_base::failbit);
  }




  return _M_gcount;
}

template <class _CharT, class _Traits>
void basic_istream<_CharT, _Traits>::_M_formatted_get(_CharT* __s) {
  sentry __sentry(*this);

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
    streamsize __nmax = this->width() > 0
      ? this->width() - 1
      : ((numeric_limits<streamsize>::max)() / sizeof(_CharT)) - 1;

    streamsize __n = __buf->gptr() != __buf->egptr()
      ? ::std::priv:: __read_buffered(this, __buf, __nmax, __s,
                                   ::std::priv:: _Is_wspace_null<_Traits>(this->_M_ctype_facet()),
                                   ::std::priv:: _Scan_wspace_null<_Traits>(this->_M_ctype_facet()),
                                   false, true, false)
      : ::std::priv:: __read_unbuffered(this, __buf, __nmax, __s,
                                     ::std::priv:: _Is_wspace_null<_Traits>(this->_M_ctype_facet()),
                                     false, true, false);
    if (__n == 0)
      this->setstate(ios_base::failbit);
  }
  this->width(0);
}






template < class _CharT, class _Traits, class _Is_Delim>
void
_M_ignore_unbuffered(basic_istream<_CharT, _Traits>* __that,
                     basic_streambuf<_CharT, _Traits>* __buf,
                     _Is_Delim __is_delim,
                     bool __extract_delim, bool __set_failbit) {
  bool __done = false;
  ios_base::iostate __status = 0;
  typedef typename basic_istream<_CharT, _Traits>::int_type int_type;

  {
    while (!__done) {
      int_type __c = __buf->sbumpc();

      if (__that->_S_eof(__c)) {
        __done = true;
        __status |= __set_failbit ? ios_base::eofbit | ios_base::failbit
                                  : ios_base::eofbit;
      }

      else if (__is_delim(_Traits::to_char_type(__c))) {
        __done = true;
        if (!__extract_delim)
          if (__that->_S_eof(__buf->sputbackc(_Traits::to_char_type(__c))))
            __status |= ios_base::failbit;
      }
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
  }

  __that->setstate(__status);
}






template < class _CharT, class _Traits, class _Is_Delim, class _Scan_Delim>
void
_M_ignore_buffered(basic_istream<_CharT, _Traits>* __that,
                   basic_streambuf<_CharT, _Traits>* __buf,
                   _Is_Delim __is_delim, _Scan_Delim __scan_delim,
                   bool __extract_delim, bool __set_failbit) {
  bool __at_eof = false;
  bool __found_delim = false;

  {
    while (__buf->_M_egptr() != __buf->_M_gptr() && !__at_eof && !__found_delim) {
      const _CharT* __p = __scan_delim(__buf->_M_gptr(), __buf->_M_egptr());
      __buf->_M_gbump((int)(__p - __buf->_M_gptr()));

      if (__p != __buf->_M_egptr()) {
        if (__extract_delim)
          __buf->_M_gbump(1);
        __found_delim = true;
      }

      else
        __at_eof = __that->_S_eof(__buf->sgetc());
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
    return;
  }

  if (__at_eof) {
    __that->setstate(__set_failbit ? ios_base::eofbit | ios_base::failbit
                                   : ios_base::eofbit);
    return;
  }
  if (__found_delim)
    return;





  _M_ignore_unbuffered(__that, __buf, __is_delim, __extract_delim, __set_failbit);
}
# 981 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.c"
template < class _CharT, class _Traits, class _Max_Chars, class _Is_Delim>
streamsize
_M_ignore_unbuffered(basic_istream<_CharT, _Traits>* __that,
                     basic_streambuf<_CharT, _Traits>* __buf,
                     streamsize _Num, _Max_Chars __max_chars,
                     _Is_Delim __is_delim,
                     bool __extract_delim, bool __set_failbit) {
  streamsize __n = 0;
  ios_base::iostate __status = 0;
  typedef typename basic_istream<_CharT, _Traits>::int_type int_type;

  {
    while (__max_chars(_Num, __n) > 0) {
      int_type __c = __buf->sbumpc();

      if (__that->_S_eof(__c)) {
        __status |= __set_failbit ? ios_base::eofbit | ios_base::failbit
                                  : ios_base::eofbit;
        break;
      }

      else if (__is_delim(_Traits::to_char_type(__c))) {
        if (__extract_delim)
          ++__n;
        else if (__that->_S_eof(__buf->sputbackc(_Traits::to_char_type(__c))))
          __status |= ios_base::failbit;

        break;
      }

      ++__n;
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
  }

  if (__status)
    __that->setstate(__status);
  return __n;
}

template < class _CharT, class _Traits, class _Max_Chars, class _Is_Delim, class _Scan_Delim>
streamsize
_M_ignore_buffered(basic_istream<_CharT, _Traits>* __that,
                   basic_streambuf<_CharT, _Traits>* __buf,
                   streamsize _Num,
                   _Max_Chars __max_chars,
                   _Is_Delim __is_delim, _Scan_Delim __scan_delim,
                   bool __extract_delim, bool __set_failbit) {
  streamsize __n = 0;
  bool __at_eof = false;
  bool __done = false;

  {
    while (__buf->_M_egptr() != __buf->_M_gptr() && !__done) {
      ptrdiff_t __avail = __buf->_M_egptr() - __buf->_M_gptr();
      streamsize __m = __max_chars(_Num, __n);

      if (__avail >= __m) {
        const _CharT* __last = __buf->_M_gptr() + static_cast<ptrdiff_t>(__m);
        const _CharT* __p = __scan_delim(__buf->_M_gptr(), __last);
        ptrdiff_t __chunk = __p - __buf->_M_gptr();
        __n += __chunk;
        __buf->_M_gbump((int)__chunk);

        if (__extract_delim && __p != __last) {
          __n += 1;
          __buf->_M_gbump(1);
        }

        __done = true;
      }

      else {
        const _CharT* __p = __scan_delim(__buf->_M_gptr(), __buf->_M_egptr());
        ptrdiff_t __chunk = __p - __buf->_M_gptr();
        __n += __chunk;
        __buf->_M_gbump((int)__chunk);

        if (__p != __buf->_M_egptr()) {
          if (__extract_delim) {
            __n += 1;
            __buf->_M_gbump(1);
          }

          __done = true;
        }


        else if (__that->_S_eof(__buf->sgetc())) {
          __done = true;
          __at_eof = true;
        }
      }
    }
  }
  if (false) {
    __that->_M_handle_exception(ios_base::badbit);
    return __n;
  }

  if (__at_eof)
    __that->setstate(__set_failbit ? ios_base::eofbit | ios_base::failbit
                                   : ios_base::eofbit);

  if (__done)
    return __n;






  return __n + _M_ignore_unbuffered(__that, __buf, _Num, __max_chars,
                                    __is_delim, __extract_delim, __set_failbit);
}


template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::ignore(streamsize __n) {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
    typedef ::std::priv:: _Constant_unary_fun<bool, int_type> _Const_bool;
    typedef ::std::priv:: _Constant_binary_fun<streamsize, streamsize, streamsize> _Const_streamsize;
    const streamsize __maxss = (numeric_limits<streamsize>::max)();

    if (__n == (numeric_limits<int>::max)()) {
      if (__buf->gptr() != __buf->egptr())
        _M_gcount = _M_ignore_buffered(this, __buf,
                                       __maxss, _Const_streamsize(__maxss),
                                       _Const_bool(false),
                                       ::std::priv:: _Project2nd<const _CharT*, const _CharT*>(),
                                       false, false);
      else
        _M_gcount = _M_ignore_unbuffered(this, __buf,
                                         __maxss, _Const_streamsize(__maxss),
                                         _Const_bool(false), false, false);
    }
    else {
      if (__buf->gptr() != __buf->egptr())
        _M_gcount = _M_ignore_buffered(this, __buf,
                                       __n, minus<streamsize>(),
                                       _Const_bool(false),
                                       ::std::priv:: _Project2nd<const _CharT*, const _CharT*>(),
                                       false, false);
      else
        _M_gcount = _M_ignore_unbuffered(this, __buf, __n, minus<streamsize>(),
                                         _Const_bool(false), false, false);
    }
  }

  return *this;
}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>::ignore(streamsize __n, int_type __delim) {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
    typedef ::std::priv:: _Constant_binary_fun<streamsize, streamsize, streamsize>
      _Const_streamsize;
    const streamsize __maxss = (numeric_limits<streamsize>::max)();

    if (__n == (numeric_limits<int>::max)()) {
      if (__buf->gptr() != __buf->egptr())
        _M_gcount = _M_ignore_buffered(this, __buf,
                                       __maxss, _Const_streamsize(__maxss),
                                       ::std::priv:: _Eq_int_bound<_Traits>(__delim),
                                       ::std::priv:: _Scan_for_int_val<_Traits>(__delim),
                                       true, false);
      else
        _M_gcount = _M_ignore_unbuffered(this, __buf,
                                         __maxss, _Const_streamsize(__maxss),
                                         ::std::priv:: _Eq_int_bound<_Traits>(__delim),
                                         true, false);
    }
    else {
      if (__buf->gptr() != __buf->egptr())
        _M_gcount = _M_ignore_buffered(this, __buf,
                                       __n, minus<streamsize>(),
                                       ::std::priv:: _Eq_int_bound<_Traits>(__delim),
                                       ::std::priv:: _Scan_for_int_val<_Traits>(__delim),
                                       true, false);
      else
        _M_gcount = _M_ignore_unbuffered(this, __buf, __n, minus<streamsize>(),
                                         ::std::priv:: _Eq_int_bound<_Traits>(__delim),
                                         true, false);
    }
  }

  return *this;
}



template <class _CharT, class _Traits>
void basic_istream<_CharT, _Traits>::_M_skip_whitespace(bool __set_failbit) {
  basic_streambuf<_CharT, _Traits>* __buf = this->rdbuf();
  if (!__buf)
    this->setstate(ios_base::badbit);
  else if (__buf->gptr() != __buf->egptr())
    _M_ignore_buffered(this, __buf,
                       ::std::priv:: _Is_not_wspace<_Traits>(this->_M_ctype_facet()),
                       ::std::priv:: _Scan_for_not_wspace<_Traits>(this->_M_ctype_facet()),
                       false, __set_failbit);
  else
    _M_ignore_unbuffered(this, __buf,
                         ::std::priv:: _Is_not_wspace<_Traits>(this->_M_ctype_facet()),
                         false, __set_failbit);
}
# 1208 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.c"
namespace priv {

template < class _CharT, class _Traits, class _Is_Delim>
streamsize
__copy_unbuffered(basic_istream<_CharT, _Traits>* __that, basic_streambuf<_CharT, _Traits>* __src,
                  basic_streambuf<_CharT, _Traits>* __dest,
                  _Is_Delim __is_delim,
                  bool __extract_delim, bool __rethrow) {
  streamsize __extracted = 0;
  ios_base::iostate __status = 0;
  typedef typename basic_istream<_CharT, _Traits>::int_type int_type;
  int_type __c;

  {
    for (;;) {

      __c = __src->sbumpc();


      if (__that->_S_eof(__c)) {
        __status |= ios_base::eofbit;
        break;
      }

      else if (__is_delim(_Traits::to_char_type(__c))) {
        if (!__extract_delim && !__pushback(__src, _Traits::to_char_type(__c)))
          __status |= ios_base::failbit;
        break;
      }
      else {

        bool __failed = false;
        {
          if (!__that->_S_eof(__dest->sputc(_Traits::to_char_type(__c))))
            ++__extracted;
          else
            __failed = true;
        }
        if (false) {
          __failed = true;
        }



        if (__failed && !__pushback(__src, _Traits::to_char_type(__c)))
          __status |= ios_base::failbit;


        if (__failed)
          break;
      }

    }

  }


  if (false) {

    if (__rethrow && __extracted == 0)
      __that->_M_handle_exception(ios_base::failbit);
  }
  __that->setstate(__status);
  return __extracted;
}






template < class _CharT, class _Traits, class _Is_Delim, class _Scan_Delim>
streamsize
__copy_buffered(basic_istream<_CharT, _Traits>* __that, basic_streambuf<_CharT, _Traits>* __src,
                basic_streambuf<_CharT, _Traits>* __dest,
                _Scan_Delim __scan_delim, _Is_Delim __is_delim,
                bool __extract_delim, bool __rethrow) {
  streamsize __extracted = 0;
  ios_base::iostate __status = 0;
  typedef typename basic_istream<_CharT, _Traits>::int_type int_type;

  int_type __c ;
  _CharT* __first = __src->_M_gptr();
  ptrdiff_t __avail = __src->_M_egptr() - __first;

  bool __do_handle_exceptions = false;

  {
    for (;;) {
      const _CharT* __last = __scan_delim(__first, __src->_M_egptr());


      streamsize __n = __dest->sputn(__first, __extract_delim && __last != __src->_M_egptr()
                                     ? (__last - __first) + 1
                                     : (__last - __first));
      __src->_M_gbump((int)__n);
      __extracted += __n;


      __do_handle_exceptions = true;

      if (__n < __avail)
        break;

      __c = __src->sgetc();



      __first = __src->_M_gptr();
      __avail = __src->_M_egptr() - __first;

      if (__avail > 0)
        {}
      else if (__that->_S_eof(__c)) {
        __status |= ios_base::eofbit;
        break;
      }
      else {
        return __extracted + __copy_unbuffered(__that, __src, __dest, __is_delim,
                                                __extract_delim, __rethrow);
      }

      __do_handle_exceptions = false;
    }
  }

  if (false) {

    if (__rethrow && __do_handle_exceptions && __extracted == 0)
      __that->_M_handle_exception(ios_base::failbit);
  }

  if (__status)
    __that->setstate(__status);
  return __extracted;
}

}

template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>
  ::get(basic_streambuf<_CharT, _Traits>& __dest, _CharT __delim) {
  sentry __sentry(*this, _No_Skip_WS());
  this->_M_gcount = 0;

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __src = this->rdbuf();

    if (__src)
      this->_M_gcount = __src->egptr() != __src->gptr()
        ? ::std::priv:: __copy_buffered(this, __src, &__dest,
                                     ::std::priv:: _Scan_for_char_val<_Traits>(__delim),
                                     ::std::priv:: _Eq_char_bound<_Traits>(__delim),
                                     false, false)
        : ::std::priv:: __copy_unbuffered(this, __src, &__dest,
                                       ::std::priv:: _Eq_char_bound<_Traits>(__delim),
                                       false, false);
  }

  if (this->_M_gcount == 0)
    this->setstate(ios_base::failbit);

  return *this;
}


template <class _CharT, class _Traits>
basic_istream<_CharT, _Traits>&
basic_istream<_CharT, _Traits>
  ::operator>>(basic_streambuf<_CharT, _Traits>* __dest) {
  streamsize __n = 0;
  typedef typename basic_istream<_CharT, _Traits>::sentry _Sentry;
  _Sentry __sentry(*this);
  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __src = this->rdbuf();
    if (__src && __dest)
      __n = __src->egptr() != __src->gptr()
        ? ::std::priv:: __copy_buffered(this, __src, __dest,
                                     ::std::priv:: _Project2nd<const _CharT*, const _CharT*>(),
                                     ::std::priv:: _Constant_unary_fun<bool, int_type>(false),
                                     false, true)
        : ::std::priv:: __copy_unbuffered(this, __src, __dest,
                                       ::std::priv:: _Constant_unary_fun<bool, int_type>(false),
                                       false, true);
  }

  if (__n == 0)
    this->setstate(ios_base::failbit);

  return *this;
}





template <class _CharT, class _Traits>
basic_iostream<_CharT, _Traits>
  ::basic_iostream(basic_streambuf<_CharT, _Traits>* __buf)
    : basic_ios<_CharT, _Traits>(),
      basic_istream<_CharT, _Traits>(__buf),
      basic_ostream<_CharT, _Traits>(__buf) {
  this->init(__buf);
}

template <class _CharT, class _Traits>
basic_iostream<_CharT, _Traits>::~basic_iostream()
{}

}
# 353 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_istream.h" 2
# 28 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_io.h" 2



namespace std {

template <class _CharT, class _Traits, class _Alloc>
basic_ostream<_CharT, _Traits>&
operator<<(basic_ostream<_CharT, _Traits>& __os,
           const basic_string<_CharT,_Traits,_Alloc>& __s);
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_io.h"
template <class _CharT, class _Traits, class _Alloc>
basic_istream<_CharT, _Traits>&
operator>>(basic_istream<_CharT, _Traits>& __is,
           basic_string<_CharT,_Traits,_Alloc>& __s);

template <class _CharT, class _Traits, class _Alloc>
basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT,_Traits,_Alloc>& __s,
        _CharT __delim);



template <class _CharT, class _Traits, class _Alloc>
inline basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT,_Traits,_Alloc>& __s) {
  return getline(__is, __s, __is.widen('\n'));
}


}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_io.c" 1
# 12 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_io.c"
namespace std {

template <class _CharT, class _Traits>
bool
__stlp_string_fill(basic_ostream<_CharT, _Traits>& __os,
                   basic_streambuf<_CharT, _Traits>* __buf,
                   streamsize __n) {
  _CharT __f = __os.fill();
  for (streamsize __i = 0; __i < __n; ++__i) {
    if (_Traits::eq_int_type(__buf->sputc(__f), _Traits::eof()))
      return false;
  }
  return true;
}


template <class _CharT, class _Traits, class _Alloc>
basic_ostream<_CharT, _Traits>&
operator << (basic_ostream<_CharT, _Traits>& __os,
             const basic_string<_CharT,_Traits,_Alloc>& __s) {
  typedef basic_ostream<_CharT, _Traits> __ostream;
  typedef typename basic_string<_CharT, _Traits, _Alloc>::size_type size_type;


  typedef char __static_assert[static_cast<size_type>(-1) > 0 ? 1 : -1] __attribute__((unused));

  typename __ostream::sentry __sentry(__os);
  bool __ok = false;

  if (__sentry) {
    __ok = true;
    size_type __n = __s.size();
    const bool __left = (__os.flags() & __ostream::left) != 0;
    const streamsize __w = __os.width(0);
    basic_streambuf<_CharT, _Traits>* __buf = __os.rdbuf();

    const bool __need_pad = (((sizeof(streamsize) > sizeof(size_t)) && (static_cast<streamsize>(__n) < __w)) ||
                             ((sizeof(streamsize) <= sizeof(size_t)) && (__n < static_cast<size_t>(__w))));
    streamsize __pad_len = __need_pad ? __w - __n : 0;

    if (!__left)
      __ok = __stlp_string_fill(__os, __buf, __pad_len);

    __ok = __ok && (__buf->sputn(__s.data(), streamsize(__n)) == streamsize(__n));

    if (__left)
      __ok = __ok && __stlp_string_fill(__os, __buf, __pad_len);
  }

  if (!__ok)
    __os.setstate(__ostream::failbit);

  return __os;
}

template <class _CharT, class _Traits, class _Alloc>
basic_istream<_CharT, _Traits>&
operator >> (basic_istream<_CharT, _Traits>& __is,
             basic_string<_CharT,_Traits, _Alloc>& __s) {
  typedef basic_istream<_CharT, _Traits> __istream;
  typedef typename basic_string<_CharT, _Traits, _Alloc>::size_type size_type;


  typedef char __static_assert[static_cast<size_type>(-1) > 0 ? 1 : -1] __attribute__((unused));

  typename __istream::sentry __sentry(__is);

  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = __is.rdbuf();
    typedef ctype<_CharT> _C_type;

    const locale& __loc = __is.getloc();
    const _C_type& _Ctype = use_facet<_C_type>(__loc);
    __s.clear();
    streamsize __width = __is.width(0);
    size_type __n;
    if (__width <= 0)
      __n = __s.max_size();




    else if (sizeof(streamsize) > sizeof(size_type) &&
             (__width > static_cast<streamsize>(__s.max_size())))
      __n = 0;
    else {
      __n = static_cast<size_type>(__width);
      __s.reserve(__n);
    }

    while (__n-- > 0) {
      typename _Traits::int_type __c1 = __buf->sbumpc();
      if (_Traits::eq_int_type(__c1, _Traits::eof())) {
        __is.setstate(__istream::eofbit);
        break;
      }
      else {
        _CharT __c = _Traits::to_char_type(__c1);

        if (_Ctype.is(_C_type::space, __c)) {
          if (_Traits::eq_int_type(__buf->sputbackc(__c), _Traits::eof()))
            __is.setstate(__istream::failbit);
          break;
        }
        else
          __s.push_back(__c);
      }
    }


    if (__s.empty())
      __is.setstate(__istream::failbit);
  }
  else
    __is.setstate(__istream::failbit);

  return __is;
}

template <class _CharT, class _Traits, class _Alloc>
basic_istream<_CharT, _Traits>&
getline(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT,_Traits,_Alloc>& __s,
        _CharT __delim) {
  typedef basic_istream<_CharT, _Traits> __istream;
  typedef typename basic_string<_CharT, _Traits, _Alloc>::size_type size_type;
  size_type __nread = 0;
  typename basic_istream<_CharT, _Traits>::sentry __sentry(__is, true);
  if (__sentry) {
    basic_streambuf<_CharT, _Traits>* __buf = __is.rdbuf();
    __s.clear();

    while (__nread < __s.max_size()) {
      int __c1 = __buf->sbumpc();
      if (_Traits::eq_int_type(__c1, _Traits::eof())) {
        __is.setstate(__istream::eofbit);
        break;
      }
      else {
        ++__nread;
        _CharT __c = _Traits::to_char_type(__c1);
        if (!_Traits::eq(__c, __delim))
          __s.push_back(__c);
        else
          break;
      }
    }
  }
  if (__nread == 0 || __nread >= __s.max_size())
    __is.setstate(__istream::failbit);

  return __is;
}

}
# 75 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_string_io.h" 2
# 38 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string" 2
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 51 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string" 2
# 27 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/vector" 1
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/vector"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 1






# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 8 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 2
# 28 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/vector" 2
# 37 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/vector"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.h" 1
# 49 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.h"
namespace std {





namespace priv {

template <class _Tp, class _Alloc>
class _Vector_base {
public:
  typedef _Vector_base<_Tp, _Alloc> _Self;
 
  typedef _Alloc allocator_type;
  typedef _Tp* pointer;
  typedef _STLP_alloc_proxy<pointer, _Tp, allocator_type> _AllocProxy;

  _Vector_base(const _Alloc& __a)
    : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {}

  _Vector_base(size_t __n, const _Alloc& __a)
    : _M_start(0), _M_finish(0), _M_end_of_storage(__a, 0) {
    _M_start = _M_end_of_storage.allocate(__n, __n);
    _M_finish = _M_start;
    _M_end_of_storage._M_data = _M_start + __n;
   
  }


  _Vector_base(__move_source<_Self> src)
    : _M_start(src.get()._M_start), _M_finish(src.get()._M_finish),
      _M_end_of_storage(__move_source<_AllocProxy>(src.get()._M_end_of_storage)) {

    src.get()._M_finish = src.get()._M_end_of_storage._M_data = src.get()._M_start = 0;
  }


  ~_Vector_base() {
    if (_M_start != pointer())
      _M_end_of_storage.deallocate(_M_start, _M_end_of_storage._M_data - _M_start);
  }

protected:
  void __attribute__((noreturn)) _M_throw_length_error() const;
  void __attribute__((noreturn)) _M_throw_out_of_range() const;

  pointer _M_start;
  pointer _M_finish;
  _AllocProxy _M_end_of_storage;
};






}


template <class _Tp, class _Alloc = allocator<_Tp> >
class vector : protected ::std::priv:: _Vector_base<_Tp, _Alloc>



{
private:
  typedef ::std::priv:: _Vector_base<_Tp, _Alloc> _Base;
  typedef vector<_Tp, _Alloc> _Self;
public:
 
  typedef typename _Base::allocator_type allocator_type;

  typedef _Tp value_type;
  typedef value_type* pointer;
  typedef const value_type* const_pointer;
  typedef value_type* iterator;
  typedef const value_type* const_iterator;

  typedef value_type& reference;
  typedef const value_type& const_reference;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef random_access_iterator_tag _Iterator_category;

  typedef ::std::reverse_iterator<const_iterator> const_reverse_iterator; typedef ::std::reverse_iterator<iterator> reverse_iterator;

  allocator_type get_allocator() const
  { return (const allocator_type&)this->_M_end_of_storage; }

private:





  void _M_insert_overflow_aux(pointer __pos, const _Tp& __x, const __false_type& ,
                              size_type __fill_len, bool __atend);
  void _M_insert_overflow_aux(pointer __pos, const _Tp& __x, const __true_type& ,
                              size_type __fill_len, bool __atend) {

    if (_M_is_inside(__x)) {
      value_type __x_copy = __x;
      _M_insert_overflow_aux(__pos, __x_copy, __false_type(), __fill_len, __atend);
      return;
    }
    _M_insert_overflow_aux(__pos, __x, __false_type(), __fill_len, __atend);
  }

  void _M_insert_overflow(pointer __pos, const _Tp& __x, const __false_type& ,
                          size_type __fill_len, bool __atend = false) {

    typedef typename __move_traits<_Tp>::implemented _Movable;

    _M_insert_overflow_aux(__pos, __x, _Movable(), __fill_len, __atend);
  }
  void _M_insert_overflow(pointer __pos, const _Tp& __x, const __true_type& ,
                          size_type __fill_len, bool __atend = false);
  void _M_range_check(size_type __n) const {
    if (__n >= size_type(this->_M_finish - this->_M_start))
      this->_M_throw_out_of_range();
  }

  size_type _M_compute_next_size(size_type __n) {
    const size_type __size = size();
    if (__n > max_size() - __size)
      this->_M_throw_length_error();
    size_type __len = __size + (max)(__n, __size);
    if (__len > max_size() || __len < __size)
      __len = max_size();
    return __len;
  }

public:
  iterator begin() { return this->_M_start; }
  const_iterator begin() const { return this->_M_start; }
  iterator end() { return this->_M_finish; }
  const_iterator end() const { return this->_M_finish; }

  reverse_iterator rbegin() { return reverse_iterator(end()); }
  const_reverse_iterator rbegin() const { return const_reverse_iterator(end()); }
  reverse_iterator rend() { return reverse_iterator(begin()); }
  const_reverse_iterator rend() const { return const_reverse_iterator(begin()); }

  size_type size() const { return size_type(this->_M_finish - this->_M_start); }
  size_type max_size() const {
    size_type __vector_max_size = size_type(-1) / sizeof(_Tp);
    typename allocator_type::size_type __alloc_max_size = this->_M_end_of_storage.max_size();
    return (__alloc_max_size < __vector_max_size)?__alloc_max_size:__vector_max_size;
  }

  size_type capacity() const { return size_type(this->_M_end_of_storage._M_data - this->_M_start); }
  bool empty() const { return this->_M_start == this->_M_finish; }

  reference operator[](size_type __n) { return *(begin() + __n); }
  const_reference operator[](size_type __n) const { return *(begin() + __n); }

  reference front() { return *begin(); }
  const_reference front() const { return *begin(); }
  reference back() { return *(end() - 1); }
  const_reference back() const { return *(end() - 1); }

  reference at(size_type __n) { _M_range_check(__n); return (*this)[__n]; }
  const_reference at(size_type __n) const { _M_range_check(__n); return (*this)[__n]; }


  explicit vector(const allocator_type& __a = allocator_type())





    : ::std::priv:: _Vector_base<_Tp, _Alloc>(__a) {}


private:



  void _M_initialize(size_type __n, const _Tp& __val = _Tp())
  { this->_M_finish = ::std::priv:: __uninitialized_init(this->_M_start, __n, __val); }
public:
  explicit vector(size_type __n)
    : ::std::priv:: _Vector_base<_Tp, _Alloc>(__n, allocator_type())
  { _M_initialize(__n); }
  vector(size_type __n, const _Tp& __val, const allocator_type& __a = allocator_type())
# 243 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.h"
    : ::std::priv:: _Vector_base<_Tp, _Alloc>(__n, __a)
  { this->_M_finish = ::std::priv:: __uninitialized_fill_n(this->_M_start, __n, __val); }

  vector(const _Self& __x)
    : ::std::priv:: _Vector_base<_Tp, _Alloc>(__x.size(), __x.get_allocator()) {
    typedef typename __type_traits<_Tp>::has_trivial_copy_constructor _TrivialUCopy;
    this->_M_finish = ::std::priv:: __ucopy_ptrs(__x.begin(), __x.end(), this->_M_start, _TrivialUCopy());
  }


  vector(__move_source<_Self> src)
    : ::std::priv:: _Vector_base<_Tp, _Alloc>(__move_source<_Base>(src.get()))
  {}



private:
  template <class _Integer>
  void _M_initialize_aux(_Integer __n, _Integer __val,
                         const __true_type& ) {
    size_type __real_n = __n;
    this->_M_start = this->_M_end_of_storage.allocate(__n, __real_n);
    this->_M_end_of_storage._M_data = this->_M_start + __real_n;
    this->_M_finish = ::std::priv:: __uninitialized_fill_n(this->_M_start, __n, __val);
  }

  template <class _InputIterator>
  void _M_initialize_aux(_InputIterator __first, _InputIterator __last,
                         const __false_type& )
  { _M_range_initialize(__first, __last, typename ::std::iterator_traits< _InputIterator >::iterator_category()); }

public:

  template <class _InputIterator>
  vector(_InputIterator __first, _InputIterator __last,
               const allocator_type& __a = allocator_type() )
    : ::std::priv:: _Vector_base<_Tp, _Alloc>(__a) {
    typedef typename _IsIntegral<_InputIterator>::_Ret _Integral;
    _M_initialize_aux(__first, __last, _Integral());
  }
# 304 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.h"
  ~vector() { ::std::_Destroy_Range(rbegin(), rend()); }

  _Self& operator=(const _Self& __x);

  void reserve(size_type __n);






  void assign(size_type __n, const _Tp& __val) { _M_fill_assign(__n, __val); }
  void _M_fill_assign(size_type __n, const _Tp& __val);


  template <class _ForwardIter>
  void _M_assign_aux(_ForwardIter __first, _ForwardIter __last, const forward_iterator_tag &) {




    const size_type __len = ::std::distance(__first, __last);
    if (__len > capacity()) {
      size_type __n = __len;
      iterator __tmp = _M_allocate_and_copy(__n, __first, __last);
      _M_clear();
      _M_set(__tmp, __tmp + __len, __tmp + __n);
    }
    else if (size() >= __len) {
      iterator __new_finish = copy(__first, __last, this->_M_start);
      ::std::_Destroy_Range(__new_finish, this->_M_finish);
      this->_M_finish = __new_finish;
    }
    else {
      _ForwardIter __mid = __first;
      ::std::advance(__mid, size());
      ::std::copy(__first, __mid, this->_M_start);
      this->_M_finish = ::std::uninitialized_copy(__mid, __last, this->_M_finish);
    }
  }


  template <class _InputIter>
  void _M_assign_aux(_InputIter __first, _InputIter __last,
                     const input_iterator_tag &) {
    iterator __cur = begin();
    for ( ; __first != __last && __cur != end(); ++__cur, ++__first)
      *__cur = *__first;
    if (__first == __last)
      erase(__cur, end());
    else
      insert(end(), __first, __last);
  }

  template <class _Integer>
  void _M_assign_dispatch(_Integer __n, _Integer __val,
                          const __true_type& )
  { _M_fill_assign(__n, __val); }

  template <class _InputIter>
  void _M_assign_dispatch(_InputIter __first, _InputIter __last,
                          const __false_type& )
  { _M_assign_aux(__first, __last, typename ::std::iterator_traits< _InputIter >::iterator_category()); }

  template <class _InputIterator>
  void assign(_InputIterator __first, _InputIterator __last) {
    typedef typename _IsIntegral<_InputIterator>::_Ret _Integral;
    _M_assign_dispatch(__first, __last, _Integral());
  }



  void push_back(const _Tp& __x = _Tp()) {



    if (this->_M_finish != this->_M_end_of_storage._M_data) {
      _Copy_Construct(this->_M_finish, __x);
      ++this->_M_finish;
    }
    else {
      typedef typename __type_traits<_Tp>::has_trivial_assignment_operator _TrivialCopy;
      _M_insert_overflow(this->_M_finish, __x, _TrivialCopy(), 1, true);
    }
  }


  iterator insert(iterator __pos, const _Tp& __x = _Tp());
# 401 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.h"
  void swap(_Self& __x) {
    ::std::swap(this->_M_start, __x._M_start);
    ::std::swap(this->_M_finish, __x._M_finish);
    this->_M_end_of_storage.swap(__x._M_end_of_storage);
  }




private:
  void _M_fill_insert_aux (iterator __pos, size_type __n, const _Tp& __x, const __true_type& );
  void _M_fill_insert_aux (iterator __pos, size_type __n, const _Tp& __x, const __false_type& );
  void _M_fill_insert (iterator __pos, size_type __n, const _Tp& __x);

  bool _M_is_inside(const value_type& __x) const {
    return (&__x >= this->_M_start && &__x < this->_M_finish);
  }


  template <class _ForwardIterator>
  void _M_range_insert_realloc(iterator __pos,
                               _ForwardIterator __first, _ForwardIterator __last,




                               size_type __n) {
    typedef typename __type_traits<_Tp>::has_trivial_copy_constructor _TrivialUCopy;

    typedef typename __move_traits<_Tp>::implemented _Movable;

    size_type __len = _M_compute_next_size(__n);
    pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);
    pointer __new_finish = __new_start;
    {
      __new_finish = ::std::priv:: __uninitialized_move(this->_M_start, __pos, __new_start, _TrivialUCopy(), _Movable());
      __new_finish = uninitialized_copy(__first, __last, __new_finish);
      __new_finish = ::std::priv:: __uninitialized_move(__pos, this->_M_finish, __new_finish, _TrivialUCopy(), _Movable());
    }
   

    _M_clear_after_move();
    _M_set(__new_start, __new_finish, __new_start + __len);
  }


  template <class _ForwardIterator>
  void _M_range_insert_aux(iterator __pos,
                           _ForwardIterator __first, _ForwardIterator __last,




                           size_type __n, const __true_type& ) {
    iterator __src = this->_M_finish - 1;
    iterator __dst = __src + __n;
    for (; __src >= __pos; --__dst, --__src) {
      ::std::_Move_Construct(__dst, *__src);
      ::std::_Destroy_Moved(__src);
    }
    uninitialized_copy(__first, __last, __pos);
    this->_M_finish += __n;
  }


  template <class _ForwardIterator>
  void _M_range_insert_aux(iterator __pos,
                           _ForwardIterator __first, _ForwardIterator __last,




                           size_type __n, const __false_type& ) {
    typedef typename __type_traits<_Tp>::has_trivial_copy_constructor _TrivialUCopy;
    typedef typename __type_traits<_Tp>::has_trivial_assignment_operator _TrivialCopy;
    const size_type __elems_after = this->_M_finish - __pos;
    pointer __old_finish = this->_M_finish;
    if (__elems_after > __n) {
      ::std::priv:: __ucopy_ptrs(this->_M_finish - __n, this->_M_finish, this->_M_finish, _TrivialUCopy());
      this->_M_finish += __n;
      ::std::priv:: __copy_backward_ptrs(__pos, __old_finish - __n, __old_finish, _TrivialCopy());
      copy(__first, __last, __pos);
    }
    else {

      _ForwardIterator __mid = __first;
      ::std::advance(__mid, __elems_after);



      uninitialized_copy(__mid, __last, this->_M_finish);
      this->_M_finish += __n - __elems_after;
      ::std::priv:: __ucopy_ptrs(__pos, __old_finish, this->_M_finish, _TrivialUCopy());
      this->_M_finish += __elems_after;
      copy(__first, __mid, __pos);
    }
  }



  template <class _Integer>
  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
                          const __true_type&)
  { _M_fill_insert(__pos, (size_type) __n, (_Tp) __val); }

  template <class _InputIterator>
  void _M_insert_dispatch(iterator __pos,
                          _InputIterator __first, _InputIterator __last,
                          const __false_type&)
  { _M_range_insert(__pos, __first, __last, typename ::std::iterator_traits< _InputIterator >::iterator_category()); }

public:

  template <class _InputIterator>
  void insert(iterator __pos, _InputIterator __first, _InputIterator __last) {
    typedef typename _IsIntegral<_InputIterator>::_Ret _Integral;
    _M_insert_dispatch(__pos, __first, __last, _Integral());
  }

private:
  template <class _InputIterator>
  void _M_range_insert(iterator __pos,
                       _InputIterator __first, _InputIterator __last,
                       const input_iterator_tag &) {
    for ( ; __first != __last; ++__first) {
      __pos = insert(__pos, *__first);
      ++__pos;
    }
  }

  template <class _ForwardIterator>
  void _M_range_insert(iterator __pos,
                       _ForwardIterator __first, _ForwardIterator __last,
                       const forward_iterator_tag &) {






    typedef typename __move_traits<_Tp>::implemented _Movable;




    if (__first != __last) {
      size_type __n = ::std::distance(__first, __last);

      if (size_type(this->_M_end_of_storage._M_data - this->_M_finish) >= __n) {
        _M_range_insert_aux(__pos, __first, __last, __n, _Movable());
      }
      else {
        _M_range_insert_realloc(__pos, __first, __last, __n);
      }
    }
  }

public:
  void insert (iterator __pos, size_type __n, const _Tp& __x)
  { _M_fill_insert(__pos, __n, __x); }

  void pop_back() {
    --this->_M_finish;
    ::std::_Destroy(this->_M_finish);
  }

private:
  iterator _M_erase(iterator __pos, const __true_type& ) {
    ::std::_Destroy(__pos);
    iterator __dst = __pos, __src = __dst + 1;
    iterator __end = end();
    for (; __src != __end; ++__dst, ++__src) {
      ::std::_Move_Construct(__dst, *__src);
      ::std::_Destroy_Moved(__src);
    }
    this->_M_finish = __dst;
    return __pos;
  }
  iterator _M_erase(iterator __pos, const __false_type& ) {
    if (__pos + 1 != end()) {
      typedef typename __type_traits<_Tp>::has_trivial_assignment_operator _TrivialCopy;
      ::std::priv:: __copy_ptrs(__pos + 1, this->_M_finish, __pos, _TrivialCopy());
    }
    --this->_M_finish;
    ::std::_Destroy(this->_M_finish);
    return __pos;
  }
  iterator _M_erase(iterator __first, iterator __last, const __true_type& ) {
    iterator __dst = __first, __src = __last;
    iterator __end = end();
    for (; __dst != __last && __src != __end; ++__dst, ++__src) {
      ::std::_Destroy(__dst);
      ::std::_Move_Construct(__dst, *__src);
    }
    if (__dst != __last) {

      ::std::_Destroy_Range(__dst, __last);
      ::std::_Destroy_Moved_Range(__last, __end);
    }
    else {

      for (; __src != __end; ++__dst, ++__src) {
        ::std::_Destroy_Moved(__dst);
        ::std::_Move_Construct(__dst, *__src);
      }
      ::std::_Destroy_Moved_Range(__dst, __end);
    }
    this->_M_finish = __dst;
    return __first;
  }
  iterator _M_erase(iterator __first, iterator __last, const __false_type& ) {
    typedef typename __type_traits<_Tp>::has_trivial_assignment_operator _TrivialCopy;
    pointer __i = ::std::priv:: __copy_ptrs(__last, this->_M_finish, __first, _TrivialCopy());
    ::std::_Destroy_Range(__i, this->_M_finish);
    this->_M_finish = __i;
    return __first;
  }

public:
  iterator erase(iterator __pos) {

    typedef typename __move_traits<_Tp>::implemented _Movable;

    return _M_erase(__pos, _Movable());
  }
  iterator erase(iterator __first, iterator __last) {

    typedef typename __move_traits<_Tp>::implemented _Movable;

    if (__first == __last)
      return __first;
    return _M_erase(__first, __last, _Movable());
  }


  void resize(size_type __new_size, const _Tp& __x = _Tp()) {



    if (__new_size < size())
      erase(begin() + __new_size, end());
    else
      insert(end(), __new_size - size(), __x);
  }





  void clear() {
    erase(begin(), end());
  }

private:
  void _M_clear() {
    ::std::_Destroy_Range(rbegin(), rend());
    this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);
  }

  void _M_clear_after_move() {
    ::std::_Destroy_Moved_Range(rbegin(), rend());
    this->_M_end_of_storage.deallocate(this->_M_start, this->_M_end_of_storage._M_data - this->_M_start);
  }

  void _M_set(pointer __s, pointer __f, pointer __e) {
    this->_M_start = __s;
    this->_M_finish = __f;
    this->_M_end_of_storage._M_data = __e;
  }


  template <class _ForwardIterator>
  pointer _M_allocate_and_copy(size_type& __n,
                               _ForwardIterator __first, _ForwardIterator __last)




  {
    pointer __result = this->_M_end_of_storage.allocate(__n, __n);
    {
      uninitialized_copy(__first, __last, __result);
      return __result;
    }
   
   
  }



  template <class _InputIterator>
  void _M_range_initialize(_InputIterator __first, _InputIterator __last,
                           const input_iterator_tag &) {
    for ( ; __first != __last; ++__first)
      push_back(*__first);
  }

  template <class _ForwardIterator>
  void _M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
                           const forward_iterator_tag &) {
    size_type __n = ::std::distance(__first, __last);
    this->_M_start = this->_M_end_of_storage.allocate(__n, __n);
    this->_M_end_of_storage._M_data = this->_M_start + __n;
    this->_M_finish = uninitialized_copy(__first, __last, this->_M_start);
  }

};






}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.c" 1
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.c"
namespace std {

namespace priv {

template <class _Tp, class _Alloc>
void _Vector_base<_Tp,_Alloc>::_M_throw_length_error() const
{ __stl_throw_length_error("vector"); }

template <class _Tp, class _Alloc>
void _Vector_base<_Tp, _Alloc>::_M_throw_out_of_range() const
{ __stl_throw_out_of_range("vector"); }






}
# 61 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.c"
template <class _Tp, class _Alloc>
void vector<_Tp, _Alloc>::reserve(size_type __n) {
  if (capacity() < __n) {
    if (max_size() < __n) {
      this->_M_throw_length_error();
    }

    const size_type __old_size = size();
    pointer __tmp;
    if (this->_M_start) {
      __tmp = _M_allocate_and_copy(__n, this->_M_start, this->_M_finish);
      _M_clear();
    } else {
      __tmp = this->_M_end_of_storage.allocate(__n, __n);
    }
    _M_set(__tmp, __tmp + __old_size, __tmp + __n);
  }
}

template <class _Tp, class _Alloc>
__attribute__((noinline)) void vector<_Tp, _Alloc>::_M_insert_overflow_aux(pointer __pos, const _Tp& __x, const __false_type& ,
                                                 size_type __fill_len, bool __atend ) {
  typedef typename __type_traits<_Tp>::has_trivial_copy_constructor _TrivialUCopy;

  typedef typename __move_traits<_Tp>::implemented _Movable;

  size_type __len = _M_compute_next_size(__fill_len);
  pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);
  pointer __new_finish = __new_start;
  {
    __new_finish = ::std::priv:: __uninitialized_move(this->_M_start, __pos, __new_start, _TrivialUCopy(), _Movable());

    if (__fill_len == 1) {
      _Copy_Construct(__new_finish, __x);
      ++__new_finish;
    } else
      __new_finish = ::std::priv:: __uninitialized_fill_n(__new_finish, __fill_len, __x);
    if (!__atend)
      __new_finish = ::std::priv:: __uninitialized_move(__pos, this->_M_finish, __new_finish, _TrivialUCopy(), _Movable());
  }
 

  _M_clear_after_move();
  _M_set(__new_start, __new_finish, __new_start + __len);
}

template <class _Tp, class _Alloc>
void vector<_Tp, _Alloc>::_M_insert_overflow(pointer __pos, const _Tp& __x, const __true_type& ,
                                             size_type __fill_len, bool __atend ) {
  size_type __len = _M_compute_next_size(__fill_len);
  pointer __new_start = this->_M_end_of_storage.allocate(__len, __len);
  pointer __new_finish = static_cast<pointer>(::std::priv:: __copy_trivial(this->_M_start, __pos, __new_start));

  __new_finish = ::std::priv:: __fill_n(__new_finish, __fill_len, __x);
  if (!__atend)
    __new_finish = static_cast<pointer>(::std::priv:: __copy_trivial(__pos, this->_M_finish, __new_finish));
  _M_clear();
  _M_set(__new_start, __new_finish, __new_start + __len);
}

template <class _Tp, class _Alloc>
void vector<_Tp, _Alloc>::_M_fill_insert_aux(iterator __pos, size_type __n,
                                             const _Tp& __x, const __true_type& ) {
  if (_M_is_inside(__x)) {
    _Tp __x_copy = __x;
    _M_fill_insert_aux(__pos, __n, __x_copy, __true_type());
    return;
  }
  iterator __src = this->_M_finish - 1;
  iterator __dst = __src + __n;
  for (; __src >= __pos; --__dst, --__src) {
    ::std::_Move_Construct(__dst, *__src);
    ::std::_Destroy_Moved(__src);
  }
  ::std::priv:: __uninitialized_fill_n(__pos, __n, __x);
  this->_M_finish += __n;
}

template <class _Tp, class _Alloc>
void vector<_Tp, _Alloc>::_M_fill_insert_aux (iterator __pos, size_type __n,
                                              const _Tp& __x, const __false_type& ) {
  typedef typename __type_traits<_Tp>::has_trivial_copy_constructor _TrivialUCopy;
  typedef typename __type_traits<_Tp>::has_trivial_assignment_operator _TrivialCopy;

  if (_M_is_inside(__x)) {
    _Tp __x_copy = __x;
    _M_fill_insert_aux(__pos, __n, __x_copy, __false_type());
    return;
  }
  const size_type __elems_after = this->_M_finish - __pos;
  pointer __old_finish = this->_M_finish;
  if (__elems_after > __n) {
    ::std::priv:: __ucopy_ptrs(this->_M_finish - __n, this->_M_finish, this->_M_finish, _TrivialUCopy());
    this->_M_finish += __n;
    ::std::priv:: __copy_backward_ptrs(__pos, __old_finish - __n, __old_finish, _TrivialCopy());
    ::std::fill(__pos, __pos + __n, __x);
  } else {
    this->_M_finish = ::std::priv:: __uninitialized_fill_n(this->_M_finish, __n - __elems_after, __x);
    ::std::priv:: __ucopy_ptrs(__pos, __old_finish, this->_M_finish, _TrivialUCopy());
    this->_M_finish += __elems_after;
    ::std::fill(__pos, __old_finish, __x);
  }
}

template <class _Tp, class _Alloc>
void vector<_Tp, _Alloc>::_M_fill_insert(iterator __pos,
                                         size_type __n, const _Tp& __x) {

  typedef typename __move_traits<_Tp>::implemented _Movable;

  if (__n != 0) {
    if (size_type(this->_M_end_of_storage._M_data - this->_M_finish) >= __n) {
      _M_fill_insert_aux(__pos, __n, __x, _Movable());
    } else {
      typedef typename __type_traits<_Tp>::has_trivial_assignment_operator _TrivialCopy;
      _M_insert_overflow(__pos, __x, _TrivialCopy(), __n);
    }
  }
}

template <class _Tp, class _Alloc>
vector<_Tp, _Alloc>& vector<_Tp, _Alloc>::operator = (const vector<_Tp, _Alloc>& __x) {
  typedef typename __type_traits<_Tp>::has_trivial_assignment_operator _TrivialCopy;
  typedef typename __type_traits<_Tp>::has_trivial_copy_constructor _TrivialUCopy;
  if (&__x != this) {
    const size_type __xlen = __x.size();
    if (__xlen > capacity()) {
      size_type __len = __xlen;
      pointer __tmp = _M_allocate_and_copy(__len, const_cast<const_pointer>(__x._M_start) + 0,
                                                  const_cast<const_pointer>(__x._M_finish) + 0);
      _M_clear();
      this->_M_start = __tmp;
      this->_M_end_of_storage._M_data = this->_M_start + __len;
    } else if (size() >= __xlen) {
      pointer __i = ::std::priv:: __copy_ptrs(const_cast<const_pointer>(__x._M_start) + 0,
                                           const_cast<const_pointer>(__x._M_finish) + 0, this->_M_start, _TrivialCopy());
      ::std::_Destroy_Range(__i, this->_M_finish);
    } else {
      ::std::priv:: __copy_ptrs(const_cast<const_pointer>(__x._M_start),
                             const_cast<const_pointer>(__x._M_start) + size(), this->_M_start, _TrivialCopy());
      ::std::priv:: __ucopy_ptrs(const_cast<const_pointer>(__x._M_start) + size(),
                              const_cast<const_pointer>(__x._M_finish) + 0, this->_M_finish, _TrivialUCopy());
    }
    this->_M_finish = this->_M_start + __xlen;
  }
  return *this;
}

template <class _Tp, class _Alloc>
void vector<_Tp, _Alloc>::_M_fill_assign(size_t __n, const _Tp& __val) {
  if (__n > capacity()) {
    vector<_Tp, _Alloc> __tmp(__n, __val, get_allocator());
    __tmp.swap(*this);
  } else if (__n > size()) {
    fill(begin(), end(), __val);
    this->_M_finish = ::std::priv:: __uninitialized_fill_n(this->_M_finish, __n - size(), __val);
  } else
    erase(::std::priv:: __fill_n(begin(), __n, __val), end());
}

template <class _Tp, class _Alloc>
typename vector<_Tp, _Alloc>::iterator
vector<_Tp, _Alloc>::insert(iterator __pos, const _Tp& __x) {
  size_type __n = __pos - begin();
  _M_fill_insert(__pos, 1, __x);
  return begin() + __n;
}
# 236 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.c"
}
# 718 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.h" 2
# 729 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_bvector.h" 1
# 39 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_bvector.h"
namespace std {
namespace priv {

struct _Bit_reference {
  unsigned int* _M_p;
  unsigned int _M_mask;
  _Bit_reference(unsigned int* __x, unsigned int __y)
    : _M_p(__x), _M_mask(__y) {}

public:
  _Bit_reference() : _M_p(0), _M_mask(0) {}

  operator bool() const {
    return !(!(*_M_p & _M_mask));
  }
  _Bit_reference& operator = (bool __x) {
    if (__x) *_M_p |= _M_mask;
    else *_M_p &= ~_M_mask;
    return *this;
  }
  _Bit_reference& operator = (const _Bit_reference& __x) {
    return *this = bool(__x);
  }
  bool operator == (const _Bit_reference& __x) const {
    return bool(*this) == bool(__x);
  }
  bool operator < (const _Bit_reference& __x) const {
    return !bool(*this) && bool(__x);
  }

  _Bit_reference& operator |= (bool __x) {
    if (__x)
      *_M_p |= _M_mask;
    return *this;
  }
  _Bit_reference& operator &= (bool __x) {
    if (!__x)
      *_M_p &= ~_M_mask;
    return *this;
  }
  void flip() { *_M_p ^= _M_mask; }
};


}

inline void swap(::std::priv:: _Bit_reference& __x, ::std::priv:: _Bit_reference& __y) {
  bool __tmp = (bool)__x;
  __x = __y;
  __y = __tmp;
}


template<>
struct __type_traits< ::std::priv:: _Bit_reference> {
  typedef __false_type has_trivial_default_constructor;
  typedef __true_type has_trivial_copy_constructor;
  typedef __false_type has_trivial_assignment_operator;
  typedef __true_type has_trivial_destructor;
  typedef __false_type is_POD_type;
};

namespace priv {

struct _Bit_iterator_base {
  typedef ptrdiff_t difference_type;

  unsigned int* _M_p;
  unsigned int _M_offset;

  void _M_bump_up() {
    if (_M_offset++ == (int(8 * sizeof(unsigned int))) - 1) {
      _M_offset = 0;
      ++_M_p;
    }
  }

  void _M_bump_down() {
    if (_M_offset-- == 0) {
      _M_offset = (int(8 * sizeof(unsigned int))) - 1;
      --_M_p;
    }
  }

  _Bit_iterator_base() : _M_p(0), _M_offset(0) {}
  _Bit_iterator_base(unsigned int* __x, unsigned int __y) : _M_p(__x), _M_offset(__y) {}






  void _M_advance (difference_type __i) {
    difference_type __n = __i + _M_offset;
    _M_p += __n / (int(8 * sizeof(unsigned int)));
    __n = __n % (int(8 * sizeof(unsigned int)));
    if (__n < 0) {
      _M_offset = (unsigned int) __n + (int(8 * sizeof(unsigned int)));
      --_M_p;
    } else
      _M_offset = (unsigned int) __n;
  }

  difference_type _M_subtract(const _Bit_iterator_base& __x) const {
    return (int(8 * sizeof(unsigned int))) * (_M_p - __x._M_p) + _M_offset - __x._M_offset;
  }
};

inline bool operator==(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {
  return __y._M_p == __x._M_p && __y._M_offset == __x._M_offset;
}
inline bool operator!=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {
  return __y._M_p != __x._M_p || __y._M_offset != __x._M_offset;
}

inline bool operator<(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {
  return __x._M_p < __y._M_p || (__x._M_p == __y._M_p && __x._M_offset < __y._M_offset);
}

inline bool operator>(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {
  return operator <(__y , __x);
}
inline bool operator<=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {
  return !(__y < __x);
}
inline bool operator>=(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y) {
  return !(__x < __y);
}

template <class _Ref, class _Ptr>
struct _Bit_iter : public _Bit_iterator_base {
  typedef _Ref reference;
  typedef _Ptr pointer;
  typedef _Bit_iter<_Ref, _Ptr> _Self;
  typedef random_access_iterator_tag iterator_category;
  typedef bool value_type;
  typedef ptrdiff_t difference_type;
  typedef size_t size_type;

  _Bit_iter(unsigned int* __x, unsigned int __y) : _Bit_iterator_base(__x, __y) {}
  _Bit_iter() {}

  _Bit_iter(const _Bit_iter<_Bit_reference, _Bit_reference*>& __x):
    _Bit_iterator_base((const _Bit_iterator_base&)__x) {}




  reference operator*() const {
    return _Bit_reference(_M_p, 1UL << _M_offset);
  }
  _Self& operator++() {
    _M_bump_up();
    return *this;
  }
  _Self operator++(int) {
    _Self __tmp = *this;
    _M_bump_up();
    return __tmp;
  }
  _Self& operator--() {
    _M_bump_down();
    return *this;
  }
  _Self operator--(int) {
    _Self __tmp = *this;
    _M_bump_down();
    return __tmp;
  }
  _Self& operator+=(difference_type __i) {
    _M_advance(__i);
    return *this;
  }
  _Self& operator-=(difference_type __i) {
    *this += -__i;
    return *this;
  }
  _Self operator+(difference_type __i) const {
    _Self __tmp = *this;
    return __tmp += __i;
  }
  _Self operator-(difference_type __i) const {
    _Self __tmp = *this;
    return __tmp -= __i;
  }
  difference_type operator-(const _Self& __x) const {
    return _M_subtract(__x);
  }
  reference operator[](difference_type __i) { return *(*this + __i); }
};

template <class _Ref, class _Ptr>
inline _Bit_iter<_Ref,_Ptr>
operator+(ptrdiff_t __n, const _Bit_iter<_Ref, _Ptr>& __x) {
   return __x + __n;
}

}


template <class _Ref, class _Ptr>
struct __type_traits< ::std::priv:: _Bit_iter<_Ref, _Ptr> > {
  typedef __false_type has_trivial_default_constructor;
  typedef __true_type has_trivial_copy_constructor;
  typedef __true_type has_trivial_assignment_operator;
  typedef __true_type has_trivial_destructor;
  typedef __false_type is_POD_type;
};
# 260 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_bvector.h"
namespace priv {

typedef _Bit_iter<bool, const bool*> _Bit_const_iterator;
typedef _Bit_iter<_Bit_reference, _Bit_reference*> _Bit_iterator;



template <class _Alloc>
class _Bvector_base {
  typedef _Bvector_base<_Alloc> _Self;
public:
 
  typedef _Alloc allocator_type;
  typedef unsigned int __chunk_type;
  typedef typename _Alloc_traits<__chunk_type, _Alloc>::allocator_type __chunk_allocator_type;
  allocator_type get_allocator() const
  { return static_cast<const __chunk_allocator_type&>(_M_end_of_storage); }

  _Bvector_base(const allocator_type& __a)
    : _M_start(), _M_finish(), _M_end_of_storage(__a,
                                                 (__chunk_type*)0)
  {}

  _Bvector_base(__move_source<_Self> src)
    : _M_start(src.get()._M_start), _M_finish(src.get()._M_finish),
      _M_end_of_storage(src.get()._M_end_of_storage) {

    src.get()._M_start._M_p = 0;
  }


  ~_Bvector_base() {
    _M_deallocate();
  }

protected:

  static size_t _M_bits_to_chunks(size_t __n_bits)
  { return (__n_bits + (int(8 * sizeof(unsigned int))) - 1) / (int(8 * sizeof(unsigned int))); }

  __chunk_type* _M_bit_alloc(size_t __n)
  { return _M_end_of_storage.allocate(_M_bits_to_chunks(__n)); }

  void _M_deallocate() {
    if (_M_start._M_p)
      _M_end_of_storage.deallocate(_M_start._M_p,
                                   _M_end_of_storage._M_data - _M_start._M_p);
  }

  _Bit_iterator _M_start;
  _Bit_iterator _M_finish;
  _STLP_alloc_proxy<__chunk_type*, __chunk_type, __chunk_allocator_type> _M_end_of_storage;
};
# 354 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_bvector.h"
}


template <class _Alloc>
class vector<bool, _Alloc> : public ::std::priv:: _Bvector_base<_Alloc >



{
  typedef ::std::priv:: _Bvector_base<_Alloc > _Base;
  typedef vector<bool, _Alloc> _Self;
public:
  typedef bool value_type;
  typedef size_t size_type;
  typedef ptrdiff_t difference_type;
  typedef ::std::priv:: _Bit_reference reference;
  typedef bool const_reference;
  typedef ::std::priv:: _Bit_reference* pointer;
  typedef const bool* const_pointer;
  typedef random_access_iterator_tag _Iterator_category;

  typedef ::std::priv:: _Bit_iterator iterator;
  typedef ::std::priv:: _Bit_const_iterator const_iterator;

  typedef ::std::reverse_iterator<const_iterator> const_reverse_iterator; typedef ::std::reverse_iterator<iterator> reverse_iterator;


  typedef typename ::std::priv:: _Bvector_base<_Alloc >::allocator_type allocator_type;
  typedef typename ::std::priv:: _Bvector_base<_Alloc >::__chunk_type __chunk_type;





protected:

  void _M_initialize(size_type __n) {
    __chunk_type* __q = this->_M_bit_alloc(__n);
    this->_M_end_of_storage._M_data = __q + _Base::_M_bits_to_chunks(__n);
    this->_M_start = iterator(__q, 0);
    this->_M_finish = this->_M_start + difference_type(__n);
  }
  void _M_insert_aux(iterator __position, bool __x) {
    if (this->_M_finish._M_p != this->_M_end_of_storage._M_data) {
      ::std::priv:: __copy_backward(__position, this->_M_finish, this->_M_finish + 1,
                                 random_access_iterator_tag(), (difference_type*)0 );
      *__position = __x;
      ++this->_M_finish;
    }
    else {
      size_type __len = size() ? 2 * size() : (int(8 * sizeof(unsigned int)));
      __chunk_type* __q = this->_M_bit_alloc(__len);
      iterator __i = ::std::copy(begin(), __position, iterator(__q, 0));
      *__i++ = __x;
      this->_M_finish = ::std::copy(__position, end(), __i);
      this->_M_deallocate();
      this->_M_end_of_storage._M_data = __q + _Base::_M_bits_to_chunks(__len);
      this->_M_start = iterator(__q, 0);
    }
  }


  template <class _InputIterator>
  void _M_initialize_range(_InputIterator __first, _InputIterator __last,
                           const input_iterator_tag &) {
    this->_M_start = iterator();
    this->_M_finish = iterator();
    this->_M_end_of_storage._M_data = 0;
    for ( ; __first != __last; ++__first)
      push_back(*__first);
  }

  template <class _ForwardIterator>
  void _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
                           const forward_iterator_tag &) {
    size_type __n = ::std::distance(__first, __last);
    _M_initialize(__n);
    ::std::copy(__first, __last, this->_M_start);
  }

  template <class _InputIterator>
  void _M_insert_range(iterator __pos,
                       _InputIterator __first, _InputIterator __last,
                       const input_iterator_tag &) {
    for ( ; __first != __last; ++__first) {
      __pos = insert(__pos, *__first);
      ++__pos;
    }
  }

  template <class _ForwardIterator>
  void _M_insert_range(iterator __position,
                       _ForwardIterator __first, _ForwardIterator __last,
                       const forward_iterator_tag &) {
    if (__first != __last) {
      size_type __n = ::std::distance(__first, __last);
      if (capacity() - size() >= __n) {
        ::std::priv:: __copy_backward(__position, end(), this->_M_finish + difference_type(__n),
                                   random_access_iterator_tag(), (difference_type*)0 );
        ::std::copy(__first, __last, __position);
        this->_M_finish += difference_type(__n);
      }
      else {
        size_type __len = size() + (max)(size(), __n);
        __chunk_type* __q = this->_M_bit_alloc(__len);
        iterator __i = ::std::copy(begin(), __position, iterator(__q, 0));
        __i = ::std::copy(__first, __last, __i);
        this->_M_finish = ::std::copy(__position, end(), __i);
        this->_M_deallocate();
        this->_M_end_of_storage._M_data = __q + _Base::_M_bits_to_chunks(__len);
        this->_M_start = iterator(__q, 0);
      }
    }
  }



public:
  iterator begin() { return this->_M_start; }
  const_iterator begin() const { return this->_M_start; }
  iterator end() { return this->_M_finish; }
  const_iterator end() const { return this->_M_finish; }

  reverse_iterator rbegin() { return reverse_iterator(end()); }
  const_reverse_iterator rbegin() const {
    return const_reverse_iterator(end());
  }
  reverse_iterator rend() { return reverse_iterator(begin()); }
  const_reverse_iterator rend() const {
    return const_reverse_iterator(begin());
  }

  size_type size() const { return size_type(end() - begin()); }
  size_type max_size() const { return size_type(-1); }
  size_type capacity() const {
    return size_type(const_iterator(this->_M_end_of_storage._M_data, 0) - begin());
  }
  bool empty() const { return begin() == end(); }
  reference operator[](size_type __n)
  { return *(begin() + difference_type(__n)); }
  const_reference operator[](size_type __n) const
  { return *(begin() + difference_type(__n)); }

  void _M_range_check(size_type __n) const {
    if (__n >= this->size())
      __stl_throw_range_error("vector<bool>");
  }

  reference at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }
  const_reference at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

  explicit vector(const allocator_type& __a = allocator_type())
    : ::std::priv:: _Bvector_base<_Alloc >(__a) {}

  vector(size_type __n, bool __val,
            const allocator_type& __a = allocator_type())
    : ::std::priv:: _Bvector_base<_Alloc >(__a) {
    _M_initialize(__n);
    fill(this->_M_start._M_p, (__chunk_type*)(this->_M_end_of_storage._M_data), __val ? ~0 : 0);
  }

  explicit vector(size_type __n)
    : ::std::priv:: _Bvector_base<_Alloc >(allocator_type()) {
    _M_initialize(__n);
    fill(this->_M_start._M_p, (__chunk_type*)(this->_M_end_of_storage._M_data), 0);
  }

  vector(const _Self& __x)
    : ::std::priv:: _Bvector_base<_Alloc >(__x.get_allocator()) {
    _M_initialize(__x.size());
    ::std::copy(__x.begin(), __x.end(), this->_M_start);
  }


  template <class _Integer>
  void _M_initialize_dispatch(_Integer __n, _Integer __x, const __true_type&) {
    _M_initialize(__n);
    fill(this->_M_start._M_p, this->_M_end_of_storage._M_data, __x ? ~0 : 0);
  }

  template <class _InputIterator>
  void _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
                              const __false_type&) {
    _M_initialize_range(__first, __last, typename ::std::iterator_traits< _InputIterator >::iterator_category());
  }
# 550 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_bvector.h"
  template <class _InputIterator>
  vector(_InputIterator __first, _InputIterator __last,
            const allocator_type& __a = allocator_type())
    : ::std::priv:: _Bvector_base<_Alloc >(__a) {
    typedef typename _IsIntegral<_InputIterator>::_Ret _Integral;
    _M_initialize_dispatch(__first, __last, _Integral());
  }
# 575 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_bvector.h"
  vector(__move_source<_Self> src)
    : ::std::priv:: _Bvector_base<_Alloc >(__move_source<_Base>(src.get())) {}


  ~vector() {}

  vector<bool, _Alloc>& operator=(const vector<bool, _Alloc>& __x) {
    if (&__x == this) return *this;
    if (__x.size() > capacity()) {
      this->_M_deallocate();
      _M_initialize(__x.size());
    }
    ::std::copy(__x.begin(), __x.end(), begin());
    this->_M_finish = begin() + difference_type(__x.size());
    return *this;
  }






  void _M_fill_assign(size_t __n, bool __x) {
    if (__n > size()) {
      fill(this->_M_start._M_p, (__chunk_type*)(this->_M_end_of_storage._M_data), __x ? ~0 : 0);
      insert(end(), __n - size(), __x);
    }
    else {
      erase(begin() + __n, end());
      fill(this->_M_start._M_p, (__chunk_type*)(this->_M_end_of_storage._M_data), __x ? ~0 : 0);
    }
  }
  void assign(size_t __n, bool __x) { _M_fill_assign(__n, __x); }


  template <class _InputIterator>
  void assign(_InputIterator __first, _InputIterator __last) {
    typedef typename _IsIntegral<_InputIterator>::_Ret _Integral;
    _M_assign_dispatch(__first, __last, _Integral());
  }

  template <class _Integer>
  void _M_assign_dispatch(_Integer __n, _Integer __val, const __true_type&)
    { _M_fill_assign((size_t) __n, (bool) __val); }

  template <class _InputIter>
  void _M_assign_dispatch(_InputIter __first, _InputIter __last, const __false_type&)
    { _M_assign_aux(__first, __last, typename ::std::iterator_traits< _InputIter >::iterator_category()); }

  template <class _InputIterator>
  void _M_assign_aux(_InputIterator __first, _InputIterator __last,
                     const input_iterator_tag &) {
    iterator __cur = begin();
    for ( ; __first != __last && __cur != end(); ++__cur, ++__first)
      *__cur = *__first;
    if (__first == __last)
      erase(__cur, end());
    else
      insert(end(), __first, __last);
  }

  template <class _ForwardIterator>
  void _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
                     const forward_iterator_tag &) {
    size_type __len = ::std::distance(__first, __last);
    if (__len < size())
      erase(::std::copy(__first, __last, begin()), end());
    else {
      _ForwardIterator __mid = __first;
      ::std::advance(__mid, size());
      ::std::copy(__first, __mid, begin());
      insert(end(), __mid, __last);
    }
  }


  void reserve(size_type __n) {
    if (capacity() < __n) {
      if (max_size() < __n)
        __stl_throw_length_error("vector<bool>");
      __chunk_type* __q = this->_M_bit_alloc(__n);
      ::std::priv:: _Bit_iterator __z(__q, 0);
      this->_M_finish = ::std::copy(begin(), end(), __z);
      this->_M_deallocate();
      this->_M_start = iterator(__q, 0);
      this->_M_end_of_storage._M_data = __q + _Base::_M_bits_to_chunks(__n);
    }
  }

  reference front() { return *begin(); }
  const_reference front() const { return *begin(); }
  reference back() { return *(end() - 1); }
  const_reference back() const { return *(end() - 1); }
  void push_back(bool __x) {
    if (this->_M_finish._M_p != this->_M_end_of_storage._M_data) {
      *(this->_M_finish) = __x;
      ++this->_M_finish;
    }
    else
      _M_insert_aux(end(), __x);
  }
  void swap(vector<bool, _Alloc>& __x) {
    ::std::swap(this->_M_start, __x._M_start);
    ::std::swap(this->_M_finish, __x._M_finish);
    this->_M_end_of_storage.swap(__x._M_end_of_storage);
  }




  iterator insert(iterator __position, bool __x = bool()) {
    difference_type __n = __position - begin();
    if (this->_M_finish._M_p != this->_M_end_of_storage._M_data && __position == end()) {
      *(this->_M_finish) = __x;
      ++this->_M_finish;
    }
    else
      _M_insert_aux(__position, __x);
    return begin() + __n;
  }



  template <class _Integer>
  void _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
                          const __true_type&) {
    _M_fill_insert(__pos, (size_type) __n, (bool) __x);
  }

  template <class _InputIterator>
  void _M_insert_dispatch(iterator __pos,
                          _InputIterator __first, _InputIterator __last,
                          const __false_type&) {
    _M_insert_range(__pos, __first, __last, typename ::std::iterator_traits< _InputIterator >::iterator_category());
  }


  template <class _InputIterator>
  void insert(iterator __position,
              _InputIterator __first, _InputIterator __last) {
    typedef typename _IsIntegral<_InputIterator>::_Ret _Integral;
    _M_insert_dispatch(__position, __first, __last, _Integral());
  }
# 763 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_bvector.h"
  void _M_fill_insert(iterator __position, size_type __n, bool __x) {
    if (__n == 0) return;
    if (capacity() - size() >= __n) {
      ::std::priv:: __copy_backward(__position, end(), this->_M_finish + difference_type(__n),
                                 random_access_iterator_tag(), (difference_type*)0 );
      fill(__position, __position + difference_type(__n), __x);
      this->_M_finish += difference_type(__n);
    }
    else {
      size_type __len = size() + (max)(size(), __n);
      __chunk_type* __q = this->_M_bit_alloc(__len);
      iterator __i = ::std::copy(begin(), __position, iterator(__q, 0));
      fill_n(__i, __n, __x);
      this->_M_finish = ::std::copy(__position, end(), __i + difference_type(__n));
      this->_M_deallocate();
      this->_M_end_of_storage._M_data = __q + _Base::_M_bits_to_chunks(__len);
      this->_M_start = iterator(__q, 0);
    }
  }

  void insert(iterator __position, size_type __n, bool __x) {
    _M_fill_insert(__position, __n, __x);
  }

  void pop_back() {
    --this->_M_finish;
  }
  iterator erase(iterator __position) {
    if (__position + 1 != end())
      ::std::copy(__position + 1, end(), __position);
      --this->_M_finish;
    return __position;
  }
  iterator erase(iterator __first, iterator __last) {
    this->_M_finish = ::std::copy(__last, end(), __first);
    return __first;
  }
  void resize(size_type __new_size, bool __x = bool()) {
    if (__new_size < size())
      erase(begin() + difference_type(__new_size), end());
    else
      insert(end(), __new_size - size(), __x);
  }
  void flip() {
    for (__chunk_type* __p = this->_M_start._M_p; __p != this->_M_end_of_storage._M_data; ++__p)
      *__p = ~*__p;
  }

  void clear() { erase(begin(), end()); }
};
# 826 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_bvector.h"
}
# 730 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.h" 2







namespace std {



typedef vector<bool, allocator<bool> > bit_vector;




# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_relops_cont.h" 1





template <class _Tp, class _Alloc>
inline bool operator==(const vector<_Tp, _Alloc>& __x,
                                  const vector<_Tp, _Alloc>& __y) {
  return __x.size() == __y.size() &&
         equal(__x.begin(), __x.end(), __y.begin());
}


template <class _Tp, class _Alloc>
inline bool operator<(const vector<_Tp, _Alloc>& __x,
                                 const vector<_Tp, _Alloc>& __y) {
  return lexicographical_compare(__x.begin(), __x.end(),
                                 __y.begin(), __y.end());
}

template <class _Tp, class _Alloc> inline bool operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {return !(__x == __y);}template <class _Tp, class _Alloc> inline bool operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) {return __y < __x;}template <class _Tp, class _Alloc> inline bool operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) { return !(__y < __x);}template <class _Tp, class _Alloc> inline bool operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y) { return !(__x < __y);}


template <class _Tp, class _Alloc>
inline void swap(vector<_Tp, _Alloc>& __x,
                            vector<_Tp, _Alloc>& __y) {
  __x.swap(__y);
}
# 747 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_vector.h" 2





template <class _Tp, class _Alloc>
struct __move_traits<vector<_Tp, _Alloc> > {
  typedef __true_type implemented;
  typedef typename __move_traits<_Alloc>::complete complete;
};



template <class _Tp, class _Alloc>
struct _DefaultZeroValue<vector<_Tp, _Alloc> >
{ typedef typename __type_traits<_Alloc>::has_trivial_default_constructor _Ret; };




}
# 38 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/vector" 2
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/vector"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 51 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/vector" 2
# 28 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cctype" 1
# 21 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cctype"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 1






# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 8 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 2
# 22 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cctype" 2




# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cctype.h" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cctype.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/ctype.h" 1
# 39 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/ctype.h"
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\ctype.h" 1 3 4
# 54 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\ctype.h" 3 4
extern "C" {

extern const char *_ctype_;
extern const short *_tolower_tab_;
extern const short *_toupper_tab_;
# 72 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\ctype.h" 3 4
int isalnum(int);
int isalpha(int);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
int tolower(int);
int toupper(int);



int isblank(int);



int isascii(int);
int toascii(int);
int _tolower(int);
int _toupper(int);






extern inline __attribute__((__gnu_inline__)) int isalnum(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (0x01|0x02|0x04)));
}

extern inline __attribute__((__gnu_inline__)) int isalpha(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (0x01|0x02)));
}

extern inline __attribute__((__gnu_inline__)) int iscntrl(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & 0x20));
}

extern inline __attribute__((__gnu_inline__)) int isdigit(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & 0x04));
}

extern inline __attribute__((__gnu_inline__)) int isgraph(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (0x10|0x01|0x02|0x04)));
}

extern inline __attribute__((__gnu_inline__)) int islower(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & 0x02));
}

extern inline __attribute__((__gnu_inline__)) int isprint(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (0x10|0x01|0x02|0x04|0x80)));
}

extern inline __attribute__((__gnu_inline__)) int ispunct(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & 0x10));
}

extern inline __attribute__((__gnu_inline__)) int isspace(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & 0x08));
}

extern inline __attribute__((__gnu_inline__)) int isupper(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & 0x01));
}

extern inline __attribute__((__gnu_inline__)) int isxdigit(int c)
{
 return (c == -1 ? 0 : ((_ctype_ + 1)[(unsigned char)c] & (0x04|0x40)));
}

extern inline __attribute__((__gnu_inline__)) int tolower(int c)
{
 if ((unsigned int)c > 255)
  return (c);
 return ((_tolower_tab_ + 1)[c]);
}

extern inline __attribute__((__gnu_inline__)) int toupper(int c)
{
 if ((unsigned int)c > 255)
  return (c);
 return ((_toupper_tab_ + 1)[c]);
}



extern inline __attribute__((__gnu_inline__)) int isblank(int c)
{
 return (c == ' ' || c == '\t');
}



extern inline __attribute__((__gnu_inline__)) int isascii(int c)
{
 return ((unsigned int)c <= 0177);
}

extern inline __attribute__((__gnu_inline__)) int toascii(int c)
{
 return (c & 0177);
}

extern inline __attribute__((__gnu_inline__)) int _tolower(int c)
{
 return (c - 'A' + 'a');
}

extern inline __attribute__((__gnu_inline__)) int _toupper(int c)
{
 return (c - 'a' + 'A');
}




}
# 40 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/ctype.h" 2
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cctype.h" 2




namespace std {
using ::isalnum;
using ::isalpha;
using ::iscntrl;
using ::isdigit;
using ::isgraph;
using ::islower;
using ::isprint;
using ::ispunct;
using ::isspace;
using ::isupper;
using ::isxdigit;
using ::tolower;
using ::toupper;
}
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cctype" 2
# 39 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cctype"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 40 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/cctype" 2
# 29 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\dirent.h" 1 3 4
# 34 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\dirent.h" 3 4
extern "C" {
# 53 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\dirent.h" 3 4
struct dirent {
  uint64_t d_ino;
  int64_t d_off;
  unsigned short d_reclen;
  unsigned char d_type;
  char d_name[256];
};

typedef struct DIR DIR;

extern DIR* opendir(const char* dirpath);
extern DIR* fdopendir(int fd);
extern struct dirent* readdir(DIR* dirp);
extern int readdir_r(DIR* dirp, struct dirent* entry, struct dirent** result);
extern int closedir(DIR* dirp);
extern void rewinddir(DIR* dirp);
extern int dirfd(DIR* dirp);
extern int alphasort(const struct dirent** a, const struct dirent** b);
extern int scandir(const char* dir, struct dirent*** namelist,
                                 int(*filter)(const struct dirent*),
                                 int(*compar)(const struct dirent**,
                                              const struct dirent**));

extern int getdents(unsigned int, struct dirent*, unsigned int);

}
# 30 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "jni/scrcap/../util/util.hpp" 1
# 13 "jni/scrcap/../util/util.hpp"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 51 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 14 "jni/scrcap/../util/util.hpp" 2





# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 2
# 60 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 61 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 2
# 20 "jni/scrcap/../util/util.hpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 51 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 21 "jni/scrcap/../util/util.hpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 1
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 2
# 61 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 62 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 2
# 22 "jni/scrcap/../util/util.hpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h" 1
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h" 2
# 41 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 42 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h" 2
# 23 "jni/scrcap/../util/util.hpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 2
# 59 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 60 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 2
# 24 "jni/scrcap/../util/util.hpp" 2

# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 2
# 41 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 42 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 2
# 26 "jni/scrcap/../util/util.hpp" 2


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/fstream" 1
# 28 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/fstream"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 1






# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 8 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 2
# 29 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/fstream" 2
# 37 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/fstream"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_ioserr.h" 1
# 38 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/fstream" 2


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h" 1
# 38 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_codecvt.h" 1
# 38 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_codecvt.h"
namespace std {

class __attribute__((visibility("default"))) codecvt_base {
public:
  enum result {ok, partial, error, noconv};
};

template <class _InternT, class _ExternT, class _StateT>
class codecvt : public locale::facet, public codecvt_base {
public:
  typedef _InternT intern_type;
  typedef _ExternT extern_type;
  typedef _StateT state_type;
# 60 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_codecvt.h"
  explicit codecvt(size_t __refs = 0) : locale::facet(__refs) {}

  result out(state_type& __state,
             const intern_type* __from,
             const intern_type* __from_end,
             const intern_type*& __from_next,
             extern_type* __to,
             extern_type* __to_limit,
             extern_type*& __to_next) const {
   
   
    return do_out(__state,
                  __from, __from_end, __from_next,
                  __to, __to_limit, __to_next);
  }

  result unshift(state_type& __state,
                 extern_type* __to,
                 extern_type* __to_limit,
                 extern_type*& __to_next) const {
   
    return do_unshift(__state, __to, __to_limit, __to_next);
  }

  result in(state_type& __state,
            const extern_type* __from,
            const extern_type* __from_end,
            const extern_type*& __from_next,
            intern_type* __to,
            intern_type* __to_limit,
            intern_type*& __to_next) const {
   
   
    return do_in(__state,
                 __from, __from_end, __from_next,
                 __to, __to_limit, __to_next);
  }

  int encoding() const { return do_encoding(); }

  bool always_noconv() const { return do_always_noconv(); }

  int length(state_type& __state,
             const extern_type* __from,
             const extern_type* __from_end,
             size_t __max) const {
   
    return do_length(__state, __from, __from_end, __max);
  }

  int max_length() const { return do_max_length(); }

  static locale::id id;

protected:
  ~codecvt() {}

  virtual result do_out(state_type&,
                        const intern_type* __from,
                        const intern_type*,
                        const intern_type*& __from_next,
                        extern_type* __to,
                        extern_type*,
                        extern_type*& __to_next) const
  { __from_next = __from; __to_next = __to; return noconv; }

  virtual result do_in (state_type&,
                        const extern_type* __from,
                        const extern_type*,
                        const extern_type*& __from_next,
                        intern_type* __to,
                        intern_type*,
                        intern_type*& __to_next) const
  { __from_next = __from; __to_next = __to; return noconv; }

  virtual result do_unshift(state_type&,
                            extern_type* __to,
                            extern_type*,
                            extern_type*& __to_next) const
  { __to_next = __to; return noconv; }

  virtual int do_encoding() const
  { return 1; }

  virtual bool do_always_noconv() const
  { return true; }

  virtual int do_length(state_type&,
                        const extern_type* __from,
                        const extern_type* __end,
                        size_t __max) const
  { return (int)(min) ( static_cast<size_t>((__end - __from)), __max); }

  virtual int do_max_length() const
  { return 1; }

private:
  codecvt(const codecvt<intern_type, extern_type, state_type>&);
  codecvt<intern_type, extern_type, state_type>& operator = (const codecvt<intern_type, extern_type, state_type>&);
};



template <class _InternT, class _ExternT, class _StateT>
locale::id codecvt<_InternT, _ExternT, _StateT>::id;




template <class _InternT, class _ExternT, class _StateT>
class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT> {};

template<>
class __attribute__((visibility("default"))) codecvt<char, char, mbstate_t>
  : public locale::facet, public codecvt_base {
public:
  typedef char intern_type;
  typedef char extern_type;
  typedef mbstate_t state_type;

  explicit codecvt(size_t __refs = 0) : locale::facet(__refs) {}

  result out(state_type& __state,
             const char* __from,
             const char* __from_end,
             const char*& __from_next,
             char* __to,
             char* __to_limit,
             char*& __to_next) const {
   
   
    return do_out(__state,
                  __from, __from_end, __from_next,
                  __to, __to_limit, __to_next);
  }

  result unshift(state_type& __state,
                 char* __to, char* __to_limit, char*& __to_next) const {
   
    return do_unshift(__state, __to, __to_limit, __to_next);
  }

  result in(state_type& __state,
            const char* __from,
            const char* __from_end,
            const char*& __from_next,
            char* __to,
            char* __to_limit,
            char*& __to_next) const {
   
   
    return do_in(__state,
                 __from, __from_end, __from_next,
                 __to, __to_limit, __to_next);
  }

  int encoding() const { return do_encoding(); }

  bool always_noconv() const { return do_always_noconv(); }

  int length(state_type& __state,
             const char* __from, const char* __from_end,
             size_t __max) const {
   
    return do_length(__state, __from, __from_end, __max);
  }

  int max_length() const { return do_max_length(); }

  static locale::id id;

protected:
  ~codecvt();

  virtual result do_out(state_type& ,
                        const char* __from,
                        const char* ,
                        const char*& __from_next,
                        char* __to,
                        char* ,
                        char*& __to_next) const;

  virtual result do_in (state_type& ,
                        const char* __from,
                        const char* ,
                        const char*& __from_next,
                        char* __to,
                        char* ,
                        char*& __to_next) const;

  virtual result do_unshift(state_type& ,
                            char* __to,
                            char* ,
                            char*& __to_next) const;

  virtual int do_encoding() const ;
  virtual bool do_always_noconv() const ;
  virtual int do_length(state_type& __state,
                        const char* __from,
                        const char* __end,
                        size_t __max) const;
  virtual int do_max_length() const ;
private:
  codecvt(const codecvt<char, char, mbstate_t>&);
  codecvt<char, char, mbstate_t>& operator =(const codecvt<char, char, mbstate_t>&);
};



template<>
class __attribute__((visibility("default"))) codecvt<wchar_t, char, mbstate_t>
  : public locale::facet, public codecvt_base {
public:
  typedef wchar_t intern_type;
  typedef char extern_type;
  typedef mbstate_t state_type;

  explicit codecvt(size_t __refs = 0) : locale::facet(__refs) {}

  result out(state_type& __state,
             const wchar_t* __from,
             const wchar_t* __from_end,
             const wchar_t*& __from_next,
             char* __to,
             char* __to_limit,
             char*& __to_next) const {
   
   
    return do_out(__state,
                  __from, __from_end, __from_next,
                  __to, __to_limit, __to_next);
  }

  result unshift(state_type& __state,
                 char* __to, char* __to_limit, char*& __to_next) const {
   
    return do_unshift(__state, __to, __to_limit, __to_next);
  }

  result in(state_type& __state,
            const char* __from,
            const char* __from_end,
            const char*& __from_next,
            wchar_t* __to,
            wchar_t* __to_limit,
            wchar_t*& __to_next) const {
   
   
    return do_in(__state,
                 __from, __from_end, __from_next,
                 __to, __to_limit, __to_next);
  }

  int encoding() const { return do_encoding(); }

  bool always_noconv() const { return do_always_noconv(); }

  int length(state_type& __state,
             const char* __from, const char* __from_end,
             size_t __max) const {
   
    return do_length(__state, __from, __from_end, __max);
  }

  int max_length() const { return do_max_length(); }

  static locale::id id;

protected:
  ~codecvt();

  virtual result do_out(state_type& __state,
                        const wchar_t* __from,
                        const wchar_t* __from_end,
                        const wchar_t*& __from_next,
                        char* __to,
                        char* __to_limit,
                        char*& __to_next) const;

  virtual result do_in (state_type& __state,
                        const char* __from,
                        const char* __from_end,
                        const char*& __from_next,
                        wchar_t* __to,
                        wchar_t* __to_limit,
                        wchar_t*& __to_next) const;

  virtual result do_unshift(state_type& __state,
                            char* __to,
                            char* __to_limit,
                            char*& __to_next) const;

  virtual int do_encoding() const ;

  virtual bool do_always_noconv() const ;

  virtual int do_length(state_type& __state,
                        const char* __from,
                        const char* __end,
                        size_t __max) const;

  virtual int do_max_length() const ;

private:
  codecvt(const codecvt<wchar_t, char, mbstate_t>&);
  codecvt<wchar_t, char, mbstate_t>& operator = (const codecvt<wchar_t, char, mbstate_t>&);
};



template<>
class __attribute__((visibility("default"))) codecvt_byname<char, char, mbstate_t>
  : public codecvt<char, char, mbstate_t> {
public:
  explicit codecvt_byname(const char* __name, size_t __refs = 0);
  ~codecvt_byname();
private:
  codecvt_byname(const codecvt_byname<char, char, mbstate_t>&);
  codecvt_byname<char, char, mbstate_t>& operator =(const codecvt_byname<char, char, mbstate_t>&);
};


template<>
class __attribute__((visibility("default"))) codecvt_byname<wchar_t, char, mbstate_t>
  : public codecvt<wchar_t, char, mbstate_t> {
  friend class _Locale_impl;
public:
  explicit codecvt_byname(const char * __name, size_t __refs = 0);

protected:
  ~codecvt_byname();

  virtual result do_out(state_type& __state,
                        const wchar_t* __from,
                        const wchar_t* __from_end,
                        const wchar_t*& __from_next,
                        char* __to,
                        char* __to_limit,
                        char*& __to_next) const;

  virtual result do_in (state_type& __state,
                        const char* __from,
                        const char* __from_end,
                        const char*& __from_next,
                        wchar_t* __to,
                        wchar_t* __to_limit,
                        wchar_t*& __to_next) const;

  virtual result do_unshift(state_type& __state,
                            char* __to,
                            char* __to_limit,
                            char*& __to_next) const;

  virtual int do_encoding() const ;

  virtual bool do_always_noconv() const ;

  virtual int do_length(state_type& __state,
                        const char* __from,
                        const char* __end,
                        size_t __max) const;

  virtual int do_max_length() const ;

private:
  codecvt_byname(_Locale_codecvt* __cvt)
    : _M_codecvt(__cvt) {}

  codecvt_byname(const codecvt_byname<wchar_t, char, mbstate_t>&);
  codecvt_byname<wchar_t, char, mbstate_t>& operator =(const codecvt_byname<wchar_t, char, mbstate_t>&);
  _Locale_codecvt* _M_codecvt;
};



}
# 39 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h" 2





typedef int _STLP_fd;




namespace std {





class __attribute__((visibility("default"))) _Filebuf_base {
public:
  _Filebuf_base();

  bool _M_open(const char*, ios_base::openmode, long __protection);
  bool _M_open(const char*, ios_base::openmode);
  bool _M_open(int __id, ios_base::openmode = ios_base::__default_mode);



  bool _M_close();

public:
  ptrdiff_t _M_read(char* __buf, ptrdiff_t __n);
  streamoff _M_seek(streamoff __offset, ios_base::seekdir __dir);
  streamoff _M_file_size();
  bool _M_write(char* __buf, ptrdiff_t __n);

public:
  void* _M_mmap(streamoff __offset, streamoff __len);
  void _M_unmap(void* __mmap_base, streamoff __len);

public:







  streamoff _M_get_offset(char* __first, char* __last) {

    return __last - __first;





  }



  bool _M_in_binary_mode() const {

    return true;





  }

  static void _S_initialize();

protected:
  static size_t _M_page_size;

protected:
  _STLP_fd _M_file_id;




  ios_base::openmode _M_openmode ;
  unsigned char _M_is_open ;
  unsigned char _M_should_close ;
  unsigned char _M_regular_file ;





public :
  static size_t __page_size() { return _M_page_size; }
  int __o_mode() const { return (int)_M_openmode; }
  bool __is_open() const { return (_M_is_open !=0 ); }
  bool __should_close() const { return (_M_should_close != 0); }
  bool __regular_file() const { return (_M_regular_file != 0); }
  _STLP_fd __get_fd() const { return _M_file_id; }
};





template <class _Traits> class _Noconv_input;
template <class _Traits> class _Noconv_output;



template <class _CharT, class _Traits>
class _Underflow;

template <class _CharT, class _Traits>
class basic_filebuf : public basic_streambuf<_CharT, _Traits> {
public:
  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;

  typedef typename _Traits::state_type _State_type;
  typedef basic_streambuf<_CharT, _Traits> _Base;
  typedef basic_filebuf<_CharT, _Traits> _Self;

public:
  basic_filebuf();
  ~basic_filebuf();

public:
  bool is_open() const { return _M_base.__is_open(); }

  _Self* open(const char* __s, ios_base::openmode __m) {
    return _M_base._M_open(__s, __m) ? this : 0;
  }



  _Self* open(const char* __s, ios_base::openmode __m,
              long __protection) {
    return _M_base._M_open(__s, __m, __protection) ? this : 0;
  }

  _STLP_fd fd() const { return _M_base.__get_fd(); }

  _Self* open(int __id, ios_base::openmode _Init_mode = ios_base::__default_mode) {
    return this->_M_open(__id, _Init_mode);
  }
# 193 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h"
  _Self* _M_open(int __id, ios_base::openmode _Init_mode = ios_base::__default_mode) {
    return _M_base._M_open(__id, _Init_mode) ? this : 0;
  }

  _Self* close();

protected:
  virtual streamsize showmanyc();
  virtual int_type underflow();

  virtual int_type pbackfail(int_type = traits_type::eof());
  virtual int_type overflow(int_type = traits_type::eof());

  virtual basic_streambuf<_CharT, _Traits>* setbuf(char_type*, streamsize);
  virtual pos_type seekoff(off_type, ios_base::seekdir,
                           ios_base::openmode = ios_base::in | ios_base::out);
  virtual pos_type seekpos(pos_type,
                           ios_base::openmode = ios_base::in | ios_base::out);

  virtual int sync();
  virtual void imbue(const locale&);

private:



  void _M_exit_putback_mode() {
    this->setg(_M_saved_eback, _M_saved_gptr, _M_saved_egptr);
    _M_in_putback_mode = false;
  }
  bool _M_switch_to_input_mode();
  void _M_exit_input_mode();
  bool _M_switch_to_output_mode();

  int_type _M_input_error();
  int_type _M_underflow_aux();
  friend class _Underflow<_CharT, _Traits>;

  int_type _M_output_error();
  bool _M_unshift();

  bool _M_allocate_buffers(_CharT* __buf, streamsize __n);
  bool _M_allocate_buffers();
  void _M_deallocate_buffers();

  pos_type _M_seek_return(off_type __off, _State_type __state) {
    if (__off != -1) {
      if (_M_in_input_mode)
        _M_exit_input_mode();
      _M_in_input_mode = false;
      _M_in_output_mode = false;
      _M_in_putback_mode = false;
      _M_in_error_mode = false;
      this->setg(0, 0, 0);
      this->setp(0, 0);
    }

    pos_type __result(__off);
    __result.state(__state);
    return __result;
  }

  bool _M_seek_init(bool __do_unshift);

  void _M_setup_codecvt(const locale&, bool __on_imbue = true);

private:

  _Filebuf_base _M_base;

private:

  unsigned char _M_constant_width;
  unsigned char _M_always_noconv;


  unsigned char _M_int_buf_dynamic;

  unsigned char _M_in_input_mode;
  unsigned char _M_in_output_mode;
  unsigned char _M_in_error_mode;
  unsigned char _M_in_putback_mode;


  _CharT* _M_int_buf;
  _CharT* _M_int_buf_EOS;


  char* _M_ext_buf;
  char* _M_ext_buf_EOS;






  char* _M_ext_buf_converted;
  char* _M_ext_buf_end;


  _State_type _M_state;

private:



  _State_type _M_end_state;


  void* _M_mmap_base;
  streamoff _M_mmap_len;

private:
  _CharT* _M_saved_eback;
  _CharT* _M_saved_gptr;
  _CharT* _M_saved_egptr;

  typedef codecvt<_CharT, char, _State_type> _Codecvt;
  const _Codecvt* _M_codecvt;

  int _M_width;
  int _M_max_width;


  enum { _S_pback_buf_size = 8 };
  _CharT _M_pback_buf[_S_pback_buf_size];


public:
  bool _M_write(char* __buf, ptrdiff_t __n) {return _M_base._M_write(__buf, __n); }

public:
  int_type
  _M_do_noconv_input() {
    _M_ext_buf_converted = _M_ext_buf_end;
                 _Base::setg((char_type*)_M_ext_buf, (char_type*)_M_ext_buf, (char_type*)_M_ext_buf_end);
    return traits_type::to_int_type(*_M_ext_buf);
  }
};
# 344 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h"
template <class _Traits>
class _Noconv_output {
public:
  typedef typename _Traits::char_type char_type;
  static bool _M_doit(basic_filebuf<char_type, _Traits >*,
                                  char_type*, char_type*)
  { return false; }
};

template<>
class __attribute__((visibility("default"))) _Noconv_output< char_traits<char> > {
public:
  static bool
  _M_doit(basic_filebuf<char, char_traits<char> >* __buf,
          char* __first, char* __last) {
    ptrdiff_t __n = __last - __first;
    return (__buf->_M_write(__first, __n));
  }
};
# 375 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h"
template <class _Traits>
class _Noconv_input {
public:
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::char_type char_type;

  static inline int_type
  _M_doit(basic_filebuf<char_type, _Traits>*)
  { return _Traits::eof(); }
};

template<>
class _Noconv_input<char_traits<char> > {
public:
  static inline int
  _M_doit(basic_filebuf<char, char_traits<char> >* __buf) {
    return __buf->_M_do_noconv_input();
  }
};





template <class _CharT, class _Traits>
class _Underflow {
public:
  typedef typename _Traits::int_type int_type;
  typedef _Traits traits_type;



  static int_type _M_doit(basic_filebuf<_CharT, _Traits>* __this) {
    if (!__this->_M_in_input_mode) {
      if (!__this->_M_switch_to_input_mode())
        return traits_type::eof();
    }
    else if (__this->_M_in_putback_mode) {
      __this->_M_exit_putback_mode();
      if (__this->gptr() != __this->egptr()) {
        int_type __c = traits_type::to_int_type(*__this->gptr());
        return __c;
      }
    }

    return __this->_M_underflow_aux();
  }
};



template<>
class __attribute__((visibility("default"))) _Underflow< char, char_traits<char> >
{
  public:
    typedef char_traits<char>::int_type int_type;
    typedef char_traits<char> traits_type;
    static int_type _M_doit(basic_filebuf<char, traits_type >* __this);
};
# 442 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h"
template <class _CharT, class _Traits>
class basic_ifstream : public basic_istream<_CharT, _Traits> {
public:
  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;

  typedef basic_ios<_CharT, _Traits> _Basic_ios;
  typedef basic_istream<_CharT, _Traits> _Base;
  typedef basic_filebuf<_CharT, _Traits> _Buf;

public:

  basic_ifstream() :
    basic_ios<_CharT, _Traits>(), basic_istream<_CharT, _Traits>(0), _M_buf() {
      this->init(&_M_buf);
  }

  explicit basic_ifstream(const char* __s, ios_base::openmode __mod = ios_base::in) :
    basic_ios<_CharT, _Traits>(), basic_istream<_CharT, _Traits>(0),
    _M_buf() {
      this->init(&_M_buf);
      if (!_M_buf.open(__s, __mod | ios_base::in))
        this->setstate(ios_base::failbit);
  }


  explicit basic_ifstream(int __id, ios_base::openmode __mod = ios_base::in) :
    basic_ios<_CharT, _Traits>(), basic_istream<_CharT, _Traits>(0), _M_buf() {
    this->init(&_M_buf);
    if (!_M_buf.open(__id, __mod | ios_base::in))
      this->setstate(ios_base::failbit);
  }
  basic_ifstream(const char* __s, ios_base::openmode __m,
     long __protection) :
    basic_ios<_CharT, _Traits>(), basic_istream<_CharT, _Traits>(0), _M_buf() {
    this->init(&_M_buf);
    if (!_M_buf.open(__s, __m | ios_base::in, __protection))
      this->setstate(ios_base::failbit);
  }
# 495 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h"
  ~basic_ifstream() {}

public:
  basic_filebuf<_CharT, _Traits>* rdbuf() const
    { return const_cast<_Buf*>(&_M_buf); }

  bool is_open() {
    return this->rdbuf()->is_open();
  }

  void open(const char* __s, ios_base::openmode __mod = ios_base::in) {
    if (!this->rdbuf()->open(__s, __mod | ios_base::in))
      this->setstate(ios_base::failbit);
  }

  void close() {
    if (!this->rdbuf()->close())
      this->setstate(ios_base::failbit);
  }

private:
  basic_filebuf<_CharT, _Traits> _M_buf;
};





template <class _CharT, class _Traits>
class basic_ofstream : public basic_ostream<_CharT, _Traits> {
public:
  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;

  typedef basic_ios<_CharT, _Traits> _Basic_ios;
  typedef basic_ostream<_CharT, _Traits> _Base;
  typedef basic_filebuf<_CharT, _Traits> _Buf;

public:
  basic_ofstream() :
    basic_ios<_CharT, _Traits>(),
    basic_ostream<_CharT, _Traits>(0), _M_buf() {
      this->init(&_M_buf);
  }
  explicit basic_ofstream(const char* __s, ios_base::openmode __mod = ios_base::out)
    : basic_ios<_CharT, _Traits>(), basic_ostream<_CharT, _Traits>(0), _M_buf() {
    this->init(&_M_buf);
    if (!_M_buf.open(__s, __mod | ios_base::out))
      this->setstate(ios_base::failbit);
  }


  explicit basic_ofstream(int __id, ios_base::openmode __mod = ios_base::out)
    : basic_ios<_CharT, _Traits>(), basic_ostream<_CharT, _Traits>(0),
    _M_buf() {
   this->init(&_M_buf);
   if (!_M_buf.open(__id, __mod | ios_base::out))
     this->setstate(ios_base::failbit);
  }
  basic_ofstream(const char* __s, ios_base::openmode __m, long __protection) :
    basic_ios<_CharT, _Traits>(), basic_ostream<_CharT, _Traits>(0), _M_buf() {
    this->init(&_M_buf);
    if (!_M_buf.open(__s, __m | ios_base::out, __protection))
      this->setstate(ios_base::failbit);
  }
# 574 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h"
  ~basic_ofstream() {}

public:
  basic_filebuf<_CharT, _Traits>* rdbuf() const
    { return const_cast<_Buf*>(&_M_buf); }

  bool is_open() {
    return this->rdbuf()->is_open();
  }

  void open(const char* __s, ios_base::openmode __mod= ios_base::out) {
    if (!this->rdbuf()->open(__s, __mod | ios_base::out))
      this->setstate(ios_base::failbit);
  }

  void close() {
    if (!this->rdbuf()->close())
      this->setstate(ios_base::failbit);
  }

private:
  basic_filebuf<_CharT, _Traits> _M_buf;
};





template <class _CharT, class _Traits>
class basic_fstream : public basic_iostream<_CharT, _Traits> {
public:
  typedef _CharT char_type;
  typedef typename _Traits::int_type int_type;
  typedef typename _Traits::pos_type pos_type;
  typedef typename _Traits::off_type off_type;
  typedef _Traits traits_type;

  typedef basic_ios<_CharT, _Traits> _Basic_ios;
  typedef basic_iostream<_CharT, _Traits> _Base;
  typedef basic_filebuf<_CharT, _Traits> _Buf;

public:

  basic_fstream()
    : basic_ios<_CharT, _Traits>(), basic_iostream<_CharT, _Traits>(0), _M_buf() {
      this->init(&_M_buf);
  }

  explicit basic_fstream(const char* __s,
                         ios_base::openmode __mod = ios_base::in | ios_base::out) :
    basic_ios<_CharT, _Traits>(), basic_iostream<_CharT, _Traits>(0), _M_buf() {
      this->init(&_M_buf);
      if (!_M_buf.open(__s, __mod))
        this->setstate(ios_base::failbit);
  }


  explicit basic_fstream(int __id,
                         ios_base::openmode __mod = ios_base::in | ios_base::out) :
    basic_ios<_CharT, _Traits>(), basic_iostream<_CharT, _Traits>(0), _M_buf() {
    this->init(&_M_buf);
    if (!_M_buf.open(__id, __mod))
      this->setstate(ios_base::failbit);
  }
  basic_fstream(const char* __s, ios_base::openmode __m, long __protection) :
    basic_ios<_CharT, _Traits>(), basic_iostream<_CharT, _Traits>(0), _M_buf() {
    this->init(&_M_buf);
    if (!_M_buf.open(__s, __m, __protection))
      this->setstate(ios_base::failbit);
  }
# 654 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h"
  ~basic_fstream() {}

public:

  basic_filebuf<_CharT, _Traits>* rdbuf() const
    { return const_cast<_Buf*>(&_M_buf); }

  bool is_open() {
    return this->rdbuf()->is_open();
  }

  void open(const char* __s,
      ios_base::openmode __mod =
      ios_base::in | ios_base::out) {
    if (!this->rdbuf()->open(__s, __mod))
      this->setstate(ios_base::failbit);
  }

  void close() {
    if (!this->rdbuf()->close())
      this->setstate(ios_base::failbit);
  }

private:
  basic_filebuf<_CharT, _Traits> _M_buf;







};

}


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c" 1
# 29 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
namespace std {
# 46 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
template <class _CharT, class _Traits>
basic_filebuf<_CharT, _Traits>::basic_filebuf()
     : basic_streambuf<_CharT, _Traits>(), _M_base(),
    _M_constant_width(false), _M_always_noconv(false),
    _M_int_buf_dynamic(false),
    _M_in_input_mode(false), _M_in_output_mode(false),
    _M_in_error_mode(false), _M_in_putback_mode(false),
    _M_int_buf(0), _M_int_buf_EOS(0),
    _M_ext_buf(0), _M_ext_buf_EOS(0),
    _M_ext_buf_converted(0), _M_ext_buf_end(0),
    _M_state(_State_type()),
    _M_end_state(_State_type()),
    _M_mmap_base(0), _M_mmap_len(0),
    _M_saved_eback(0), _M_saved_gptr(0), _M_saved_egptr(0),
    _M_codecvt(0),
    _M_width(1), _M_max_width(1)
{
  this->_M_setup_codecvt(locale(), false);
}

template <class _CharT, class _Traits>
basic_filebuf<_CharT, _Traits>::~basic_filebuf() {
  this->close();
  _M_deallocate_buffers();
}


template <class _CharT, class _Traits>
typename basic_filebuf<_CharT, _Traits>::int_type
basic_filebuf<_CharT, _Traits>::underflow() {
  return _Underflow<_CharT, _Traits>::_M_doit(this);
}

template <class _CharT, class _Traits>
basic_filebuf<_CharT, _Traits>*
basic_filebuf<_CharT, _Traits>::close() {
  bool __ok = this->is_open();

  if (_M_in_output_mode) {
    __ok = __ok && !_Traits::eq_int_type(this->overflow(traits_type::eof()),
                                         traits_type::eof());
    __ok = __ok && this->_M_unshift();
  }
  else if (_M_in_input_mode)
      this->_M_exit_input_mode();


  __ok = _M_base._M_close() && __ok;



  _M_state = _M_end_state = _State_type();
  _M_ext_buf_converted = _M_ext_buf_end = 0;

  _M_mmap_base = 0;
  _M_mmap_len = 0;

  this->setg(0, 0, 0);
  this->setp(0, 0);

  _M_saved_eback = _M_saved_gptr = _M_saved_egptr = 0;

  _M_in_input_mode = _M_in_output_mode = _M_in_error_mode = _M_in_putback_mode
    = false;

  return __ok ? this : 0;
}




template <class _CharT, class _Traits>
void basic_filebuf<_CharT, _Traits>::_M_exit_input_mode() {
  if (_M_mmap_base != 0) {
    _M_base._M_unmap(_M_mmap_base, _M_mmap_len);
    _M_mmap_base = 0;
    _M_mmap_len = 0;
  }
  _M_in_input_mode = false;
}





template <class _CharT, class _Traits>
streamsize basic_filebuf<_CharT, _Traits>::showmanyc() {

  if (!this->is_open() || _M_in_output_mode || _M_in_error_mode)
    return -1;
  else if (_M_in_putback_mode)
    return this->egptr() - this->gptr();
  else if (_M_constant_width) {
    streamoff __pos = _M_base._M_seek(0, ios_base::cur);
    streamoff __size = _M_base._M_file_size();
    return __pos >= 0 && __size > __pos ? __size - __pos : 0;
  }
  else
    return 0;
}
# 155 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
template <class _CharT, class _Traits>
typename basic_filebuf<_CharT, _Traits>::int_type
basic_filebuf<_CharT, _Traits>::pbackfail(int_type __c) {
  const int_type __eof = traits_type::eof();


  if (!_M_in_input_mode)
    return __eof;



  if (this->gptr() != this->eback() &&
      (traits_type::eq_int_type(__c, __eof) ||
       traits_type::eq(traits_type::to_char_type(__c), this->gptr()[-1]) ||
       !_M_mmap_base)) {
    this->gbump(-1);
    if (traits_type::eq_int_type(__c, __eof) ||
        traits_type::eq(traits_type::to_char_type(__c), *this->gptr()))
      return traits_type::to_int_type(*this->gptr());
  }
  else if (!traits_type::eq_int_type(__c, __eof)) {

    _CharT* __pback_end = _M_pback_buf + static_cast<int>(_S_pback_buf_size);
    if (_M_in_putback_mode) {

      if (this->eback() != _M_pback_buf)
        this->setg(this->egptr() - 1, this->egptr() - 1, __pback_end);
      else
        return __eof;
    }
    else {
      _M_saved_eback = this->eback();
      _M_saved_gptr = this->gptr();
      _M_saved_egptr = this->egptr();
      this->setg(__pback_end - 1, __pback_end - 1, __pback_end);
      _M_in_putback_mode = true;
    }
  }
  else
    return __eof;


  *this->gptr() = traits_type::to_char_type(__c);
  return __c;
}






template <class _CharT, class _Traits>
typename basic_filebuf<_CharT, _Traits>::int_type
basic_filebuf<_CharT, _Traits>::overflow(int_type __c) {

  if (!_M_in_output_mode)
    if (!_M_switch_to_output_mode())
      return traits_type::eof();

  _CharT* __ibegin = this->_M_int_buf;
  _CharT* __iend = this->pptr();
  this->setp(_M_int_buf, _M_int_buf_EOS - 1);


  if (!traits_type::eq_int_type(__c, traits_type::eof()))
    *__iend++ = _Traits::to_char_type(__c);


  while (__ibegin != __iend) {
    const _CharT* __inext = __ibegin;
    char* __enext = _M_ext_buf;
    typename _Codecvt::result __status
      = _M_codecvt->out(_M_state, __ibegin, __iend, __inext,
                        _M_ext_buf, _M_ext_buf_EOS, __enext);
    if (__status == _Codecvt::noconv) {
      return _Noconv_output<_Traits>::_M_doit(this, __ibegin, __iend)
        ? traits_type::not_eof(__c)
        : _M_output_error();
    }






    else if (__status != _Codecvt::error &&
             (((__inext == __iend) &&
               (__enext - _M_ext_buf == _M_width * (__iend - __ibegin))) ||
              (!_M_constant_width && __inext != __ibegin))) {

      ptrdiff_t __n = __enext - _M_ext_buf;
      if (_M_write(_M_ext_buf, __n))
        __ibegin += __inext - __ibegin;
      else
        return _M_output_error();
    }
    else
      return _M_output_error();
  }

  return traits_type::not_eof(__c);
}
# 266 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
template <class _CharT, class _Traits>
basic_streambuf<_CharT, _Traits>*
basic_filebuf<_CharT, _Traits>::setbuf(_CharT* __buf, streamsize __n) {
  if (!_M_in_input_mode &&! _M_in_output_mode && !_M_in_error_mode &&
      _M_int_buf == 0) {
    if (__buf == 0 && __n == 0)
      _M_allocate_buffers(0, 1);
    else if (__buf != 0 && __n > 0)
      _M_allocate_buffers(__buf, __n);
  }
  return this;
}
# 289 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
template <class _CharT, class _Traits>
typename basic_filebuf<_CharT, _Traits>::pos_type
basic_filebuf<_CharT, _Traits>::seekoff(off_type __off,
                                        ios_base::seekdir __whence,
                                        ios_base::openmode ) {
  if (!this->is_open())
    return pos_type(-1);

  if (!_M_constant_width && __off != 0)
    return pos_type(-1);

  if (!_M_seek_init(__off != 0 || __whence != ios_base::cur))
    return pos_type(-1);


  if (__whence == ios_base::beg || __whence == ios_base::end)
    return _M_seek_return(_M_base._M_seek(_M_width * __off, __whence),
                          _State_type());


 
  if (!_M_in_input_mode)
    return _M_seek_return(_M_base._M_seek(_M_width * __off, __whence),
                          _State_type());

  if (_M_mmap_base != 0) {


    streamoff __adjust = _M_mmap_len - (this->gptr() - (_CharT*) _M_mmap_base);


    return __off == 0 ? pos_type(_M_base._M_seek(0, ios_base::cur) - __adjust)
                      : _M_seek_return(_M_base._M_seek(__off - __adjust, ios_base::cur), _State_type());
  }

  if (_M_constant_width) {
    streamoff __iadj = _M_width * (this->gptr() - this->eback());






    if (__iadj <= _M_ext_buf_end - _M_ext_buf) {
      streamoff __eadj = _M_base._M_get_offset(_M_ext_buf + static_cast<ptrdiff_t>(__iadj), _M_ext_buf_end);

      return __off == 0 ? pos_type(_M_base._M_seek(0, ios_base::cur) - __eadj)
                        : _M_seek_return(_M_base._M_seek(__off - __eadj, ios_base::cur), _State_type());
    }
  }
  else {

    ptrdiff_t __ipos = this->gptr() - this->eback();


    _State_type __state = _M_state;
    int __epos = _M_codecvt->length(__state, _M_ext_buf, _M_ext_buf_converted,
                                    __ipos);
# 370 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
    streamoff __cur = _M_base._M_seek(0, ios_base::cur);
    streamoff __adj = _M_base._M_get_offset(_M_ext_buf, _M_ext_buf + __epos) -
                      _M_base._M_get_offset(_M_ext_buf, _M_ext_buf_end);
    if (__cur != -1 && __cur + __adj >= 0)
      return __off == 0 ? pos_type(__cur + __adj)
                        : _M_seek_return(__cur + __adj, __state);
  }

  return pos_type(-1);
}


template <class _CharT, class _Traits>
typename basic_filebuf<_CharT, _Traits>::pos_type
basic_filebuf<_CharT, _Traits>::seekpos(pos_type __pos,
                                        ios_base::openmode ) {
  if (this->is_open()) {
    if (!_M_seek_init(true))
      return pos_type(-1);

    streamoff __off = off_type(__pos);
    if (__off != -1 && _M_base._M_seek(__off, ios_base::beg) != -1) {
      _M_state = __pos.state();
      return _M_seek_return(__off, __pos.state());
    }
  }

  return pos_type(-1);
}


template <class _CharT, class _Traits>
int basic_filebuf<_CharT, _Traits>::sync() {
  if (_M_in_output_mode)
    return traits_type::eq_int_type(this->overflow(traits_type::eof()),
                                    traits_type::eof()) ? -1 : 0;
  return 0;
}




template <class _CharT, class _Traits>
void basic_filebuf<_CharT, _Traits>::imbue(const locale& __loc) {
  if (!_M_in_input_mode && !_M_in_output_mode && !_M_in_error_mode) {
    this->_M_setup_codecvt(__loc);
  }
}
# 428 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
template <class _CharT, class _Traits>
bool basic_filebuf<_CharT, _Traits>::_M_switch_to_input_mode() {
  if (this->is_open() && (((int)_M_base.__o_mode() & (int)ios_base::in) !=0)
      && (_M_in_output_mode == 0) && (_M_in_error_mode == 0)) {
    if (!_M_int_buf && !_M_allocate_buffers())
      return false;

    _M_ext_buf_converted = _M_ext_buf;
    _M_ext_buf_end = _M_ext_buf;

    _M_end_state = _M_state;

    _M_in_input_mode = true;
    return true;
  }

  return false;
}





template <class _CharT, class _Traits>
bool basic_filebuf<_CharT, _Traits>::_M_switch_to_output_mode() {
  if (this->is_open() && (_M_base.__o_mode() & (int)ios_base::out) &&
      _M_in_input_mode == 0 && _M_in_error_mode == 0) {

    if (!_M_int_buf && !_M_allocate_buffers())
      return false;




    if (_M_base.__o_mode() & ios_base::app)
      _M_state = _State_type();

    this->setp(_M_int_buf, _M_int_buf_EOS - 1);
    _M_in_output_mode = true;
    return true;
  }

  return false;
}
# 483 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
template <class _CharT, class _Traits>
typename basic_filebuf<_CharT, _Traits>::int_type
basic_filebuf<_CharT, _Traits>::_M_input_error() {
   this->_M_exit_input_mode();
  _M_in_output_mode = false;
  _M_in_error_mode = true;
  this->setg(0, 0, 0);
  return traits_type::eof();
}

template <class _CharT, class _Traits>
typename basic_filebuf<_CharT, _Traits>::int_type
basic_filebuf<_CharT, _Traits>::_M_underflow_aux() {


  _M_state = _M_end_state;



  if (_M_ext_buf_end > _M_ext_buf_converted)

    _M_ext_buf_end = ::std::copy(_M_ext_buf_converted, _M_ext_buf_end, _M_ext_buf);



  else
    _M_ext_buf_end = _M_ext_buf;




  for (;;) {
    ptrdiff_t __n = _M_base._M_read(_M_ext_buf_end, _M_ext_buf_EOS - _M_ext_buf_end);
    if (__n < 0) {

      this->setg(0, 0, 0);
      return traits_type::eof();
    }

    _M_ext_buf_end += __n;


    if (_M_ext_buf == _M_ext_buf_end) {
      this->setg(0, 0, 0);
      return traits_type::eof();
    }


    const char* __enext;
    _CharT* __inext;

    typename _Codecvt::result __status
      = _M_codecvt->in(_M_end_state,
                       _M_ext_buf, _M_ext_buf_end, __enext,
                       _M_int_buf, _M_int_buf_EOS, __inext);
# 547 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
    if (__status == _Codecvt::noconv)
      return _Noconv_input<_Traits>::_M_doit(this);
    else if (__status == _Codecvt::error ||
            (__inext != _M_int_buf && __enext == _M_ext_buf) ||
            (_M_constant_width && (__inext - _M_int_buf) * _M_width != (__enext - _M_ext_buf)) ||
            (__inext == _M_int_buf && __enext - _M_ext_buf >= _M_max_width))
      return _M_input_error();
    else if (__inext != _M_int_buf) {
      _M_ext_buf_converted = _M_ext_buf + (__enext - _M_ext_buf);
      this->setg(_M_int_buf, _M_int_buf, __inext);
      return traits_type::to_int_type(*_M_int_buf);
    }




    if (__n <= 0) {
      this->setg(0, 0, 0);
      return traits_type::eof();
    }
  }
}
# 577 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
template <class _CharT, class _Traits>
typename basic_filebuf<_CharT, _Traits>::int_type
basic_filebuf<_CharT, _Traits>::_M_output_error() {
  _M_in_output_mode = false;
  _M_in_input_mode = false;
  _M_in_error_mode = true;
  this->setp(0, 0);
  return traits_type::eof();
}






template <class _CharT, class _Traits>
bool basic_filebuf<_CharT, _Traits>::_M_unshift() {
  if (_M_in_output_mode && !_M_constant_width) {
    typename _Codecvt::result __status;
    do {
      char* __enext = _M_ext_buf;
      __status = _M_codecvt->unshift(_M_state,
                                     _M_ext_buf, _M_ext_buf_EOS, __enext);
      if (__status == _Codecvt::noconv ||
          (__enext == _M_ext_buf && __status == _Codecvt::ok))
        return true;
      else if (__status == _Codecvt::error)
        return false;
      else if (!_M_write(_M_ext_buf, __enext - _M_ext_buf))
        return false;
    } while (__status == _Codecvt::partial);
  }

  return true;
}
# 629 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
template <class _CharT, class _Traits>
bool basic_filebuf<_CharT, _Traits>::_M_allocate_buffers(_CharT* __buf, streamsize __n) {



  typedef char __static_assert[!numeric_limits<size_t>::is_signed && sizeof(streamsize) >= sizeof(int) ? 1 : -1] __attribute__((unused));


  if (__buf == 0) {
    streamsize __bufsize = __n * sizeof(_CharT);


    if ((sizeof(streamsize) > sizeof(size_t)) &&
        (__bufsize > static_cast<streamsize>((numeric_limits<size_t>::max)())))
      return false;
    _M_int_buf = static_cast<_CharT*>(malloc(static_cast<size_t>(__bufsize)));
    if (!_M_int_buf)
      return false;
    _M_int_buf_dynamic = true;
  }
  else {
    _M_int_buf = __buf;
    _M_int_buf_dynamic = false;
  }

  streamsize __ebufsiz = (max)(__n * static_cast<streamsize>(_M_width),
                               static_cast<streamsize>(_M_codecvt->max_length()));

  _M_ext_buf = 0;
  if ((sizeof(streamsize) < sizeof(size_t)) ||
      ((sizeof(streamsize) == sizeof(size_t)) && numeric_limits<streamsize>::is_signed) ||
      (__ebufsiz <= static_cast<streamsize>((numeric_limits<size_t>::max)()))) {
    _M_ext_buf = static_cast<char*>(malloc(static_cast<size_t>(__ebufsiz)));
  }

  if (!_M_ext_buf) {
    _M_deallocate_buffers();
    return false;
  }

  _M_int_buf_EOS = _M_int_buf + static_cast<ptrdiff_t>(__n);
  _M_ext_buf_EOS = _M_ext_buf + static_cast<ptrdiff_t>(__ebufsiz);
  return true;
}


template <class _CharT, class _Traits>
bool basic_filebuf<_CharT, _Traits>::_M_allocate_buffers() {


  streamsize __default_bufsiz =
    ((_M_base.__page_size() + 4095UL) / _M_base.__page_size()) * _M_base.__page_size();
  return _M_allocate_buffers(0, __default_bufsiz);
}

template <class _CharT, class _Traits>
void basic_filebuf<_CharT, _Traits>::_M_deallocate_buffers() {
  if (_M_int_buf_dynamic)
    free(_M_int_buf);
  free(_M_ext_buf);
  _M_int_buf = 0;
  _M_int_buf_EOS = 0;
  _M_ext_buf = 0;
  _M_ext_buf_EOS = 0;
}





template <class _CharT, class _Traits>
bool basic_filebuf<_CharT, _Traits>::_M_seek_init(bool __do_unshift) {

   _M_in_error_mode = false;



  if (_M_in_output_mode) {
    bool __ok = !traits_type::eq_int_type(this->overflow(traits_type::eof()),
                                          traits_type::eof());
    if (__do_unshift)
      __ok = __ok && this->_M_unshift();
    if (!__ok) {
      _M_in_output_mode = false;
      _M_in_error_mode = true;
      this->setp(0, 0);
      return false;
    }
  }


  if (_M_in_input_mode && _M_in_putback_mode)
    _M_exit_putback_mode();

  return true;
}
# 734 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.c"
template <class _CharT, class _Traits>
void basic_filebuf<_CharT, _Traits>::_M_setup_codecvt(const locale& __loc, bool __on_imbue) {
  if (has_facet<_Codecvt>(__loc)) {
    _M_codecvt = &use_facet<_Codecvt>(__loc) ;
    int __encoding = _M_codecvt->encoding();

    _M_width = (max)(__encoding, 1);
    _M_max_width = _M_codecvt->max_length();
    _M_constant_width = __encoding > 0;
    _M_always_noconv = _M_codecvt->always_noconv();
  }
  else {
    _M_codecvt = 0;
    _M_width = _M_max_width = 1;
    _M_constant_width = _M_always_noconv = false;
    if (__on_imbue) {

      use_facet<_Codecvt>(__loc);
    }
  }
}

}
# 692 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h" 2


namespace std {
# 707 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_fstream.h"
}
# 41 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/fstream" 2
# 53 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/fstream"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 54 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/fstream" 2
# 29 "jni/scrcap/../util/util.hpp" 2
# 1 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\android\\log.h" 1 3 4
# 70 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\android\\log.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 1 3 4
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1 3 4
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 2 3 4
# 41 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1 3 4
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 3 4
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1 3 4
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2 3 4
# 42 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 2 3 4
# 71 "d:\\android-ndk-r12b\\platforms\\android-9\\arch-x86\\usr\\include\\android\\log.h" 2 3 4


extern "C" {





typedef enum android_LogPriority {
    ANDROID_LOG_UNKNOWN = 0,
    ANDROID_LOG_DEFAULT,
    ANDROID_LOG_VERBOSE,
    ANDROID_LOG_DEBUG,
    ANDROID_LOG_INFO,
    ANDROID_LOG_WARN,
    ANDROID_LOG_ERROR,
    ANDROID_LOG_FATAL,
    ANDROID_LOG_SILENT,
} android_LogPriority;




int __android_log_write(int prio, const char *tag, const char *text);




int __android_log_print(int prio, const char *tag, const char *fmt, ...)

    __attribute__ ((format(printf, 3, 4)))

    ;





int __android_log_vprint(int prio, const char *tag,
                         const char *fmt, va_list ap);





void __android_log_assert(const char *cond, const char *tag,
     const char *fmt, ...)

    __attribute__ ((noreturn))
    __attribute__ ((format(printf, 3, 4)))

    ;


}
# 30 "jni/scrcap/../util/util.hpp" 2




std::vector<unsigned char> ReadFile(const char *fileName);
void ReadMaps(int pid,std::vector<std::string> &out);



extern "C" {
    unsigned int GetFuncAddress(const char* libname, const char* funcName);
    unsigned int GetFuncOffset(const char* libname, const char* funcName);
    unsigned int FindBaseLibrary( const char *library, int pid);
    unsigned int FindBaseLibraryFromAddress(unsigned int address, int pid);
    char *GetBaseLibraryNameFromAddress(unsigned int address, int pid);
    void FindLibraryPath(const char* libname,char *path,int len);
    void MonoLoadAndInvokeAssembly(const char* fileName,const char* name_space,char *className,const char* methodName);
    void Test();
    int FindProcessByName(char *processName,char *filter);
    unsigned int FinddlopenAddress(int pid);
    unsigned int FindwriteAddress(int pid);
    unsigned int GetBaseLibraryTextSize(const char* libname,int pid);
};
# 31 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "jni/scrcap/../util/logger.h" 1


# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 2
# 41 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 42 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdarg.h" 2
# 4 "jni/scrcap/../util/logger.h" 2
# 1 "jni/scrcap/../util/Mutex.hpp" 1
# 17 "jni/scrcap/../util/Mutex.hpp"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/pthread.h" 1
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/pthread.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 1






# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 8 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_prolog.h" 2
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/pthread.h" 2
# 35 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/pthread.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 36 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/pthread.h" 2
# 18 "jni/scrcap/../util/Mutex.hpp" 2

extern "C" {


typedef pthread_mutex_t Mutex;
void MutexCreate( Mutex* m );
void MutexDestroy( Mutex* m );
void MutexLock( Mutex* m );
void MutexUnlock( Mutex* m );



}
# 5 "jni/scrcap/../util/logger.h" 2
class Logger {
public:
 Mutex mutex;
 FILE *fp;
 bool flgNoTime;
 Logger(char *logfile,bool FLGNOTIME=false);
        Logger();
        ~Logger();
 void logStr(char *p);
 void logHex(unsigned char *p,int len);
 char *toHex(unsigned char *p,int len);
        void printf(char *format, ...);
};
# 32 "jni/scrcap/../util/PtraceUtil.cpp" 2
# 1 "jni/scrcap/../util/PtraceUtil.hpp" 1
# 13 "jni/scrcap/../util/PtraceUtil.hpp"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 51 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 14 "jni/scrcap/../util/PtraceUtil.hpp" 2





# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 2
# 60 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 61 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdlib.h" 2
# 20 "jni/scrcap/../util/PtraceUtil.hpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 1
# 24 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 25 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 50 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 51 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stdio.h" 2
# 21 "jni/scrcap/../util/PtraceUtil.hpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 1
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 2
# 61 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 62 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/errno.h" 2
# 22 "jni/scrcap/../util/PtraceUtil.hpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h" 1
# 18 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h" 2
# 41 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 42 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/assert.h" 2
# 23 "jni/scrcap/../util/PtraceUtil.hpp" 2
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 1
# 26 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_cprolog.h" 1
# 27 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 2
# 59 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 1
# 19 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h"
# 1 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_config_compat_post.h" 1
# 20 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/stl/_epilog.h" 2
# 60 "D:/android-ndk-r12b/build//../sources/cxx-stl/stlport/stlport/string.h" 2
# 24 "jni/scrcap/../util/PtraceUtil.hpp" 2
# 32 "jni/scrcap/../util/PtraceUtil.hpp"
class MemoryBackup
{
public:
    unsigned int targetAddr;
    unsigned char data[1024];
    int size;
};

class PtraceUtil {
public:
    Logger logger;
    int pid;
    std::vector<MemoryBackup> vMemoryBackup;
    PtraceUtil();
    virtual ~PtraceUtil();
    MemoryBackup* FindBackupMemory(unsigned int targetAddr);
    void DumpHex(unsigned int addr,int size);
    bool ReadProcessMemory(unsigned int addr, unsigned char *buf, int blen);
    bool WriteProcessMemory(unsigned int addr, unsigned char *buf, int blen);
    int wordAlignSize(int size);
    bool BackupMemory(unsigned int targetAddr,int size);
    bool RestoreMemory(unsigned int targetAddr);
    int PokeText(unsigned int addr,size_t value);
    int PeekText(unsigned int addr,size_t *value);
    long Attach(int _pid);
    long Detach();
    long Continue();
    int waitForStop();
private:

};
# 33 "jni/scrcap/../util/PtraceUtil.cpp" 2





PtraceUtil::PtraceUtil() {
}


PtraceUtil::~PtraceUtil() {
}

long PtraceUtil::Attach(int _pid)
{
    pid = _pid;
    (*__errno()) = 0;
    long ret = ptrace( 0x10, pid, 0,0 );
    if( ret == -1){
        __android_log_print(ANDROID_LOG_ERROR, "PtraceUtil", "Attach: %s",strerror((*__errno())));
        return -1;
    }
    __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "Attach Success");
    return 0;
}

long PtraceUtil::Detach()
{
    (*__errno()) = 0;
    long ret = ptrace(0x11, pid, 0,0 );
    if( ret == -1){
        __android_log_print(ANDROID_LOG_ERROR, "PtraceUtil", "Detach: %s",strerror((*__errno())));
        return -1;
    }
    __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "Detach Success");
    return 0;
}

long PtraceUtil::Continue()
{
    long ret = ptrace( 7, pid, 0,0 );
    if( ret == -1){
        __android_log_print(ANDROID_LOG_ERROR, "PtraceUtil", "Continue: %s",strerror((*__errno())));
        return -1;
    }
    __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "Continue Success");
    return ret;
}

MemoryBackup* PtraceUtil::FindBackupMemory(unsigned int targetAddr)
{
    for(int i=0;i<vMemoryBackup.size();i++){
        if(vMemoryBackup[i].targetAddr==targetAddr){
            __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "FindBackupMemory %08X found",targetAddr);
            return(&vMemoryBackup[i]);
        }
    }

    return __null;
}

bool PtraceUtil::BackupMemory(unsigned int targetAddr,int size)
{
    __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "BackupMemory %08X %d",targetAddr,size);
    if(size > 1024){
        __android_log_print(ANDROID_LOG_ERROR, "PtraceUtil", "BackupMemory size %d > maxsize(%d)",size,1024);
        return false;
    }



    MemoryBackup *oldm = FindBackupMemory(targetAddr);
    if(oldm==__null){
        __android_log_print(ANDROID_LOG_ERROR, "PtraceUtil", "BackupMemory create new");
        MemoryBackup m;
        m.size = size;
        m.targetAddr = targetAddr;
        ReadProcessMemory(targetAddr,&m.data[0],size);
        vMemoryBackup.push_back(m);


    }else{
        __android_log_print(ANDROID_LOG_ERROR, "PtraceUtil", "BackupMemory reused");
        oldm->size = size;
        ReadProcessMemory(targetAddr,&oldm->data[0],size);
    }
    __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "BackupMemory done");
}

bool PtraceUtil::RestoreMemory(unsigned int targetAddr)
{
    __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "RestoreMemory %08X",targetAddr);


    MemoryBackup *m = FindBackupMemory(targetAddr);
    if(m!=__null){
            WriteProcessMemory(targetAddr,&m->data[0],m->size);


            __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "RestoreMemory done");
            return true;
    }
    __android_log_print(ANDROID_LOG_ERROR, "PtraceUtil", "RestoreMemory of %08X not found",targetAddr);
    return false;
}

bool PtraceUtil::ReadProcessMemory(unsigned int addr, unsigned char *buf, int blen) {
    for (int i = 0; i < blen; i += sizeof (size_t)) {
        size_t value;
        int ret = PeekText(addr + i,&value);
        if (ret == -1) {
            __android_log_print(ANDROID_LOG_ERROR, "PtraceUtil", "ReadProcessMemory %d %08X fail",pid,addr);
            return false;
        }
        memcpy(&buf[i], &value, sizeof (value));
    }
    return true;
}

int PtraceUtil::wordAlignSize(int size)
{
    return (size + size % sizeof (size_t));
}

bool PtraceUtil::WriteProcessMemory(unsigned int addr, unsigned char *buf, int blen) {
    long ret;
    unsigned long size = wordAlignSize(blen);

    char *ptr = (char *) calloc(size, 1);
    memcpy(ptr, buf, blen);

    for (int i = 0; i < size; i += sizeof (size_t)) {
        ret = PokeText(addr + i,*(size_t *) & ptr[i]);
        if (ret == -1) {
            ::free(ptr);
            return false;
        }
    }
    ::free(ptr);
    return true;
}

int PtraceUtil::PeekText(unsigned int addr,size_t *value)
{
    (*__errno()) = 0;
    long ret = ptrace( 1, pid,addr,0);
    if( ret == -1){
        if((*__errno())){
            __android_log_print(ANDROID_LOG_ERROR, "PtraceUtil", "PeekText: %s",strerror((*__errno())));
            return -1;
        }
    }
    *value = ret;
    return 0;
}

int PtraceUtil::PokeText(unsigned int addr,size_t value)
{
    (*__errno()) = 0;
    long ret = ptrace( 4, pid,addr,value);
    if( ret == -1){
        __android_log_print(ANDROID_LOG_ERROR, "PtraceUtil", "PokeText: %s",strerror((*__errno())));
        return -1;
    }
    return ret;
}

void PtraceUtil::DumpHex(unsigned int addr,int size)
{
    unsigned char *buf = (unsigned char *)malloc(size);
    if(ReadProcessMemory(addr,buf,size)){
        logger.logHex(buf,size);
    }
    free(buf);
}

int PtraceUtil::waitForStop()
{
    __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "waitForStop %d",pid);
    while(true){
        int wstatus = 0;
        int ret = waitpid( pid, &wstatus, 0x40000000 );
        __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "waitForStop pid=%d ret=%d status=%08X\n",pid, ret,wstatus);
        if((((wstatus) & 0x7f) == 0x7f)){
            __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "WIFSTOPPED");
            break;
        }




        if((((wstatus) & 0xff00) >> 8)){
            __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "WSTOPSIG");
            continue;
        }
        if(((wstatus) & 0x7f)){
            __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "WTERMSIG");
            continue;
        }
        if(((((wstatus)+1) & 0x7f) >= 2)){
            __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "WIFSIGNALED");
            continue;
        }
        if((((wstatus) & 0xff00) >> 8)){
            __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "WEXITSTATUS");
            continue;
        }
        if((((wstatus) & 0x7f) == 0)){
            __android_log_print(ANDROID_LOG_DEBUG, "PtraceUtil", "WIFEXITED");
            return -1;
        }
    }
    return 0;
}
